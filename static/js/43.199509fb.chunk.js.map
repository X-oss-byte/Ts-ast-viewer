{"version":3,"sources":["resources/factoryCode/typescript-4.0.5.ts"],"names":["generateFactoryCode","ts","initialNode","writer","CodeBlockWriter","newLine","indentNumberOfSpaces","syntaxKindToName","map","Object","keys","SyntaxKind","filter","k","isNaN","parseInt","name","value","createSyntaxKindToNameMap","isSourceFile","write","statements","length","indent","i","statement","writeNodeText","newLineIfLastNot","toString","node","kind","NumericLiteral","quote","text","createNumericLiteral","BigIntLiteral","createBigIntLiteral","StringLiteral","createStringLiteral","RegularExpressionLiteral","createRegularExpressionLiteral","Identifier","createIdentifier","PrivateIdentifier","createPrivateIdentifier","SuperKeyword","ThisKeyword","NullKeyword","TrueKeyword","FalseKeyword","QualifiedName","left","right","createQualifiedName","ComputedPropertyName","expression","createComputedPropertyName","TypeParameter","constraint","writeNodeTextForTypeNode","default","createTypeParameterDeclaration","Parameter","decorators","item","modifiers","dotDotDotToken","questionToken","type","initializer","createParameterDeclaration","Decorator","createDecorator","PropertySignature","createPropertySignature","PropertyDeclaration","exclamationToken","createPropertyDeclaration","MethodSignature","typeParameters","parameters","createMethodSignature","MethodDeclaration","asteriskToken","body","createMethodDeclaration","Constructor","createConstructorDeclaration","GetAccessor","createGetAccessorDeclaration","SetAccessor","createSetAccessorDeclaration","CallSignature","createCallSignature","ConstructSignature","createConstructSignature","IndexSignature","createIndexSignature","AnyKeyword","BooleanKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","BigIntKeyword","createKeywordTypeNode","TypeReference","typeName","typeArguments","createTypeReferenceNode","FunctionType","createFunctionTypeNode","ConstructorType","createConstructorTypeNode","TypeQuery","exprName","createTypeQueryNode","TypeLiteral","members","createTypeLiteralNode","ArrayType","elementType","createArrayTypeNode","TupleType","elements","createTupleTypeNode","NamedTupleMember","createNamedTupleMember","OptionalType","createOptionalTypeNode","RestType","createRestTypeNode","UnionType","types","createUnionTypeNode","IntersectionType","createIntersectionTypeNode","ConditionalType","checkType","extendsType","trueType","falseType","createConditionalTypeNode","InferType","typeParameter","createInferTypeNode","ImportType","argument","qualifier","isTypeOf","createImportTypeNode","ParenthesizedType","createParenthesizedType","ThisType","TypeOperator","operator","createTypeOperatorNode","IndexedAccessType","objectType","indexType","createIndexedAccessTypeNode","MappedType","readonlyToken","createMappedTypeNode","LiteralType","literal","createLiteralTypeNode","ObjectBindingPattern","createObjectBindingPattern","ArrayBindingPattern","createArrayBindingPattern","BindingElement","propertyName","createBindingElement","ArrayLiteralExpression","multiLine","createArrayLiteralExpression","ObjectLiteralExpression","properties","createObjectLiteralExpression","PropertyAccessExpression","isPropertyAccessChain","questionDotToken","createPropertyAccessChain","isPropertyAccessExpression","createPropertyAccessExpression","Error","getText","ElementAccessExpression","isElementAccessChain","argumentExpression","createElementAccessChain","isElementAccessExpression","createElementAccessExpression","CallExpression","isCallChain","arguments","createCallChain","isCallExpression","createCallExpression","NewExpression","createNewExpression","TaggedTemplateExpression","tag","template","createTaggedTemplateExpression","TypeAssertionExpression","createTypeAssertion","ParenthesizedExpression","createParenthesizedExpression","FunctionExpression","createFunctionExpression","ArrowFunction","equalsGreaterThanToken","createArrowFunction","DeleteExpression","createDeleteExpression","TypeOfExpression","createTypeOfExpression","VoidExpression","createVoidExpression","AwaitExpression","createAwaitExpression","PrefixUnaryExpression","operand","createPrefixUnaryExpression","PostfixUnaryExpression","createPostfixUnaryExpression","BinaryExpression","operatorToken","createBinaryExpression","ConditionalExpression","condition","whenTrue","colonToken","whenFalse","createConditionalExpression","TemplateExpression","head","templateSpans","createTemplateExpression","TemplateHead","rawText","createTemplateHead","TemplateMiddle","createTemplateMiddle","TemplateTail","createTemplateTail","NoSubstitutionTemplateLiteral","createNoSubstitutionTemplateLiteral","YieldExpression","createYieldExpression","SpreadElement","createSpreadElement","ClassExpression","heritageClauses","createClassExpression","OmittedExpression","ExpressionWithTypeArguments","createExpressionWithTypeArguments","AsExpression","createAsExpression","NonNullExpression","isNonNullChain","createNonNullChain","isNonNullExpression","createNonNullExpression","MetaProperty","keywordToken","createMetaProperty","TemplateSpan","createTemplateSpan","SemicolonClassElement","Block","createBlock","VariableStatement","declarationList","createVariableStatement","EmptyStatement","ExpressionStatement","createExpressionStatement","IfStatement","thenStatement","elseStatement","createIfStatement","DoStatement","createDoStatement","WhileStatement","createWhileStatement","ForStatement","incrementor","createForStatement","ForInStatement","createForInStatement","ForOfStatement","awaitModifier","createForOfStatement","ContinueStatement","label","createContinueStatement","BreakStatement","createBreakStatement","ReturnStatement","createReturnStatement","WithStatement","createWithStatement","SwitchStatement","caseBlock","createSwitchStatement","LabeledStatement","createLabeledStatement","ThrowStatement","createThrowStatement","TryStatement","tryBlock","catchClause","finallyBlock","createTryStatement","DebuggerStatement","VariableDeclaration","createVariableDeclaration","VariableDeclarationList","declarations","getNodeFlagValues","flags","createVariableDeclarationList","FunctionDeclaration","createFunctionDeclaration","ClassDeclaration","createClassDeclaration","InterfaceDeclaration","createInterfaceDeclaration","TypeAliasDeclaration","createTypeAliasDeclaration","EnumDeclaration","createEnumDeclaration","ModuleDeclaration","createModuleDeclaration","ModuleBlock","createModuleBlock","CaseBlock","clauses","createCaseBlock","NamespaceExportDeclaration","createNamespaceExportDeclaration","ImportEqualsDeclaration","moduleReference","createImportEqualsDeclaration","ImportDeclaration","importClause","moduleSpecifier","createImportDeclaration","ImportClause","isTypeOnly","namedBindings","createImportClause","NamespaceImport","createNamespaceImport","NamespaceExport","createNamespaceExport","NamedImports","createNamedImports","ImportSpecifier","createImportSpecifier","ExportAssignment","isExportEquals","createExportAssignment","ExportDeclaration","exportClause","createExportDeclaration","NamedExports","createNamedExports","ExportSpecifier","createExportSpecifier","ExternalModuleReference","createExternalModuleReference","JsxElement","openingElement","children","closingElement","createJsxElement","JsxSelfClosingElement","tagName","attributes","createJsxSelfClosingElement","JsxOpeningElement","createJsxOpeningElement","JsxClosingElement","createJsxClosingElement","JsxFragment","openingFragment","closingFragment","createJsxFragment","JsxText","containsOnlyTriviaWhiteSpaces","createJsxText","JsxOpeningFragment","JsxClosingFragment","JsxAttribute","createJsxAttribute","JsxAttributes","createJsxAttributes","JsxSpreadAttribute","createJsxSpreadAttribute","JsxExpression","createJsxExpression","CaseClause","createCaseClause","DefaultClause","createDefaultClause","HeritageClause","token","createHeritageClause","CatchClause","variableDeclaration","block","createCatchClause","PropertyAssignment","createPropertyAssignment","ShorthandPropertyAssignment","objectAssignmentInitializer","createShorthandPropertyAssignment","SpreadAssignment","createSpreadAssignment","EnumMember","createEnumMember","CommaListExpression","createCommaListExpression","FirstToken","LastToken","FirstKeyword","LastKeyword","enumObj","enumName","defaultName","flagValues","getFlagValues","flagValue","push","join","getFlagValuesAsString","NodeFlags","v","BlockScoped","prop"],"mappings":"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","file":"static/js/43.199509fb.chunk.js","sourcesContent":["import CodeBlockWriter from \"code-block-writer\";\n\nexport function generateFactoryCode(ts: typeof import(\"typescript-4.0.5\"), initialNode: import(\"typescript-4.0.5\").Node) {\n    const writer = new CodeBlockWriter({ newLine: \"\\n\", indentNumberOfSpaces: 2 });\n    const syntaxKindToName = createSyntaxKindToNameMap();\n\n    if (ts.isSourceFile(initialNode)) {\n        writer.write(\"[\");\n        if (initialNode.statements.length > 0) {\n            writer.indent(() => {\n                for (let i = 0; i < initialNode.statements.length; i++) {\n                    const statement = initialNode.statements[i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(statement);\n                }\n            }).newLine();\n        }\n        writer.write(\"];\");\n    }\n    else {\n        writeNodeText(initialNode);\n    }\n    writer.newLineIfLastNot();\n\n    return writer.toString();\n\n    function writeNodeText(node: import(\"typescript-4.0.5\").Node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NumericLiteral:\n                createNumericLiteral(node as import(\"typescript-4.0.5\").NumericLiteral);\n                return;\n            case ts.SyntaxKind.BigIntLiteral:\n                createBigIntLiteral(node as import(\"typescript-4.0.5\").BigIntLiteral);\n                return;\n            case ts.SyntaxKind.StringLiteral:\n                createStringLiteral(node as import(\"typescript-4.0.5\").StringLiteral);\n                return;\n            case ts.SyntaxKind.RegularExpressionLiteral:\n                createRegularExpressionLiteral(node as import(\"typescript-4.0.5\").RegularExpressionLiteral);\n                return;\n            case ts.SyntaxKind.Identifier:\n                createIdentifier(node as import(\"typescript-4.0.5\").Identifier);\n                return;\n            case ts.SyntaxKind.PrivateIdentifier:\n                createPrivateIdentifier(node as import(\"typescript-4.0.5\").PrivateIdentifier);\n                return;\n            case ts.SyntaxKind.SuperKeyword:\n                createSuper(node as import(\"typescript-4.0.5\").SuperExpression);\n                return;\n            case ts.SyntaxKind.ThisKeyword:\n                createThis(node as import(\"typescript-4.0.5\").ThisExpression);\n                return;\n            case ts.SyntaxKind.NullKeyword:\n                createNull(node as import(\"typescript-4.0.5\").NullLiteral);\n                return;\n            case ts.SyntaxKind.TrueKeyword:\n                createTrue(node as import(\"typescript-4.0.5\").TrueLiteral);\n                return;\n            case ts.SyntaxKind.FalseKeyword:\n                createFalse(node as import(\"typescript-4.0.5\").FalseLiteral);\n                return;\n            case ts.SyntaxKind.QualifiedName:\n                createQualifiedName(node as import(\"typescript-4.0.5\").QualifiedName);\n                return;\n            case ts.SyntaxKind.ComputedPropertyName:\n                createComputedPropertyName(node as import(\"typescript-4.0.5\").ComputedPropertyName);\n                return;\n            case ts.SyntaxKind.TypeParameter:\n                createTypeParameterDeclaration(node as import(\"typescript-4.0.5\").TypeParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Parameter:\n                createParameterDeclaration(node as import(\"typescript-4.0.5\").ParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Decorator:\n                createDecorator(node as import(\"typescript-4.0.5\").Decorator);\n                return;\n            case ts.SyntaxKind.PropertySignature:\n                createPropertySignature(node as import(\"typescript-4.0.5\").PropertySignature);\n                return;\n            case ts.SyntaxKind.PropertyDeclaration:\n                createPropertyDeclaration(node as import(\"typescript-4.0.5\").PropertyDeclaration);\n                return;\n            case ts.SyntaxKind.MethodSignature:\n                createMethodSignature(node as import(\"typescript-4.0.5\").MethodSignature);\n                return;\n            case ts.SyntaxKind.MethodDeclaration:\n                createMethodDeclaration(node as import(\"typescript-4.0.5\").MethodDeclaration);\n                return;\n            case ts.SyntaxKind.Constructor:\n                createConstructorDeclaration(node as import(\"typescript-4.0.5\").ConstructorDeclaration);\n                return;\n            case ts.SyntaxKind.GetAccessor:\n                createGetAccessorDeclaration(node as import(\"typescript-4.0.5\").GetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.SetAccessor:\n                createSetAccessorDeclaration(node as import(\"typescript-4.0.5\").SetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.CallSignature:\n                createCallSignature(node as import(\"typescript-4.0.5\").CallSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.ConstructSignature:\n                createConstructSignature(node as import(\"typescript-4.0.5\").ConstructSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.IndexSignature:\n                createIndexSignature(node as import(\"typescript-4.0.5\").IndexSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.AnyKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BooleanKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NeverKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NumberKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.StringKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.SymbolKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UndefinedKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UnknownKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BigIntKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.0.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.TypeReference:\n                createTypeReferenceNode(node as import(\"typescript-4.0.5\").TypeReferenceNode);\n                return;\n            case ts.SyntaxKind.FunctionType:\n                createFunctionTypeNode(node as import(\"typescript-4.0.5\").FunctionTypeNode);\n                return;\n            case ts.SyntaxKind.ConstructorType:\n                createConstructorTypeNode(node as import(\"typescript-4.0.5\").ConstructorTypeNode);\n                return;\n            case ts.SyntaxKind.TypeQuery:\n                createTypeQueryNode(node as import(\"typescript-4.0.5\").TypeQueryNode);\n                return;\n            case ts.SyntaxKind.TypeLiteral:\n                createTypeLiteralNode(node as import(\"typescript-4.0.5\").TypeLiteralNode);\n                return;\n            case ts.SyntaxKind.ArrayType:\n                createArrayTypeNode(node as import(\"typescript-4.0.5\").ArrayTypeNode);\n                return;\n            case ts.SyntaxKind.TupleType:\n                createTupleTypeNode(node as import(\"typescript-4.0.5\").TupleTypeNode);\n                return;\n            case ts.SyntaxKind.NamedTupleMember:\n                createNamedTupleMember(node as import(\"typescript-4.0.5\").NamedTupleMember);\n                return;\n            case ts.SyntaxKind.OptionalType:\n                createOptionalTypeNode(node as import(\"typescript-4.0.5\").OptionalTypeNode);\n                return;\n            case ts.SyntaxKind.RestType:\n                createRestTypeNode(node as import(\"typescript-4.0.5\").RestTypeNode);\n                return;\n            case ts.SyntaxKind.UnionType:\n                createUnionTypeNode(node as import(\"typescript-4.0.5\").UnionTypeNode);\n                return;\n            case ts.SyntaxKind.IntersectionType:\n                createIntersectionTypeNode(node as import(\"typescript-4.0.5\").IntersectionTypeNode);\n                return;\n            case ts.SyntaxKind.ConditionalType:\n                createConditionalTypeNode(node as import(\"typescript-4.0.5\").ConditionalTypeNode);\n                return;\n            case ts.SyntaxKind.InferType:\n                createInferTypeNode(node as import(\"typescript-4.0.5\").InferTypeNode);\n                return;\n            case ts.SyntaxKind.ImportType:\n                createImportTypeNode(node as import(\"typescript-4.0.5\").ImportTypeNode);\n                return;\n            case ts.SyntaxKind.ParenthesizedType:\n                createParenthesizedType(node as import(\"typescript-4.0.5\").ParenthesizedTypeNode);\n                return;\n            case ts.SyntaxKind.ThisType:\n                createThisTypeNode(node as import(\"typescript-4.0.5\").ThisTypeNode);\n                return;\n            case ts.SyntaxKind.TypeOperator:\n                createTypeOperatorNode(node as import(\"typescript-4.0.5\").TypeOperatorNode);\n                return;\n            case ts.SyntaxKind.IndexedAccessType:\n                createIndexedAccessTypeNode(node as import(\"typescript-4.0.5\").IndexedAccessTypeNode);\n                return;\n            case ts.SyntaxKind.MappedType:\n                createMappedTypeNode(node as import(\"typescript-4.0.5\").MappedTypeNode);\n                return;\n            case ts.SyntaxKind.LiteralType:\n                createLiteralTypeNode(node as import(\"typescript-4.0.5\").LiteralTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectBindingPattern:\n                createObjectBindingPattern(node as import(\"typescript-4.0.5\").ObjectBindingPattern);\n                return;\n            case ts.SyntaxKind.ArrayBindingPattern:\n                createArrayBindingPattern(node as import(\"typescript-4.0.5\").ArrayBindingPattern);\n                return;\n            case ts.SyntaxKind.BindingElement:\n                createBindingElement(node as import(\"typescript-4.0.5\").BindingElement);\n                return;\n            case ts.SyntaxKind.ArrayLiteralExpression:\n                createArrayLiteralExpression(node as import(\"typescript-4.0.5\").ArrayLiteralExpression);\n                return;\n            case ts.SyntaxKind.ObjectLiteralExpression:\n                createObjectLiteralExpression(node as import(\"typescript-4.0.5\").ObjectLiteralExpression);\n                return;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                if (ts.isPropertyAccessChain(node)) {\n                    createPropertyAccessChain(node as import(\"typescript-4.0.5\").PropertyAccessChain);\n                    return;\n                }\n                if (ts.isPropertyAccessExpression(node)) {\n                    createPropertyAccessExpression(node as import(\"typescript-4.0.5\").PropertyAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.ElementAccessExpression:\n                if (ts.isElementAccessChain(node)) {\n                    createElementAccessChain(node as import(\"typescript-4.0.5\").ElementAccessChain);\n                    return;\n                }\n                if (ts.isElementAccessExpression(node)) {\n                    createElementAccessExpression(node as import(\"typescript-4.0.5\").ElementAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.CallExpression:\n                if (ts.isCallChain(node)) {\n                    createCallChain(node as import(\"typescript-4.0.5\").CallChain);\n                    return;\n                }\n                if (ts.isCallExpression(node)) {\n                    createCallExpression(node as import(\"typescript-4.0.5\").CallExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.NewExpression:\n                createNewExpression(node as import(\"typescript-4.0.5\").NewExpression);\n                return;\n            case ts.SyntaxKind.TaggedTemplateExpression:\n                createTaggedTemplateExpression(node as import(\"typescript-4.0.5\").TaggedTemplateExpression);\n                return;\n            case ts.SyntaxKind.TypeAssertionExpression:\n                createTypeAssertion(node as import(\"typescript-4.0.5\").TypeAssertion);\n                return;\n            case ts.SyntaxKind.ParenthesizedExpression:\n                createParenthesizedExpression(node as import(\"typescript-4.0.5\").ParenthesizedExpression);\n                return;\n            case ts.SyntaxKind.FunctionExpression:\n                createFunctionExpression(node as import(\"typescript-4.0.5\").FunctionExpression);\n                return;\n            case ts.SyntaxKind.ArrowFunction:\n                createArrowFunction(node as import(\"typescript-4.0.5\").ArrowFunction);\n                return;\n            case ts.SyntaxKind.DeleteExpression:\n                createDeleteExpression(node as import(\"typescript-4.0.5\").DeleteExpression);\n                return;\n            case ts.SyntaxKind.TypeOfExpression:\n                createTypeOfExpression(node as import(\"typescript-4.0.5\").TypeOfExpression);\n                return;\n            case ts.SyntaxKind.VoidExpression:\n                createVoidExpression(node as import(\"typescript-4.0.5\").VoidExpression);\n                return;\n            case ts.SyntaxKind.AwaitExpression:\n                createAwaitExpression(node as import(\"typescript-4.0.5\").AwaitExpression);\n                return;\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                createPrefixUnaryExpression(node as import(\"typescript-4.0.5\").PrefixUnaryExpression);\n                return;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n                createPostfixUnaryExpression(node as import(\"typescript-4.0.5\").PostfixUnaryExpression);\n                return;\n            case ts.SyntaxKind.BinaryExpression:\n                createBinaryExpression(node as import(\"typescript-4.0.5\").BinaryExpression);\n                return;\n            case ts.SyntaxKind.ConditionalExpression:\n                createConditionalExpression(node as import(\"typescript-4.0.5\").ConditionalExpression);\n                return;\n            case ts.SyntaxKind.TemplateExpression:\n                createTemplateExpression(node as import(\"typescript-4.0.5\").TemplateExpression);\n                return;\n            case ts.SyntaxKind.TemplateHead:\n                createTemplateHead(node as import(\"typescript-4.0.5\").TemplateHead);\n                return;\n            case ts.SyntaxKind.TemplateMiddle:\n                createTemplateMiddle(node as import(\"typescript-4.0.5\").TemplateMiddle);\n                return;\n            case ts.SyntaxKind.TemplateTail:\n                createTemplateTail(node as import(\"typescript-4.0.5\").TemplateTail);\n                return;\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                createNoSubstitutionTemplateLiteral(node as import(\"typescript-4.0.5\").NoSubstitutionTemplateLiteral);\n                return;\n            case ts.SyntaxKind.YieldExpression:\n                createYieldExpression(node as import(\"typescript-4.0.5\").YieldExpression);\n                return;\n            case ts.SyntaxKind.SpreadElement:\n                createSpreadElement(node as import(\"typescript-4.0.5\").SpreadElement);\n                return;\n            case ts.SyntaxKind.ClassExpression:\n                createClassExpression(node as import(\"typescript-4.0.5\").ClassExpression);\n                return;\n            case ts.SyntaxKind.OmittedExpression:\n                createOmittedExpression(node as import(\"typescript-4.0.5\").OmittedExpression);\n                return;\n            case ts.SyntaxKind.ExpressionWithTypeArguments:\n                createExpressionWithTypeArguments(node as import(\"typescript-4.0.5\").ExpressionWithTypeArguments);\n                return;\n            case ts.SyntaxKind.AsExpression:\n                createAsExpression(node as import(\"typescript-4.0.5\").AsExpression);\n                return;\n            case ts.SyntaxKind.NonNullExpression:\n                if (ts.isNonNullChain(node)) {\n                    createNonNullChain(node as import(\"typescript-4.0.5\").NonNullChain);\n                    return;\n                }\n                if (ts.isNonNullExpression(node)) {\n                    createNonNullExpression(node as import(\"typescript-4.0.5\").NonNullExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.MetaProperty:\n                createMetaProperty(node as import(\"typescript-4.0.5\").MetaProperty);\n                return;\n            case ts.SyntaxKind.TemplateSpan:\n                createTemplateSpan(node as import(\"typescript-4.0.5\").TemplateSpan);\n                return;\n            case ts.SyntaxKind.SemicolonClassElement:\n                createSemicolonClassElement(node as import(\"typescript-4.0.5\").SemicolonClassElement);\n                return;\n            case ts.SyntaxKind.Block:\n                createBlock(node as import(\"typescript-4.0.5\").Block);\n                return;\n            case ts.SyntaxKind.VariableStatement:\n                createVariableStatement(node as import(\"typescript-4.0.5\").VariableStatement);\n                return;\n            case ts.SyntaxKind.EmptyStatement:\n                createEmptyStatement(node as import(\"typescript-4.0.5\").EmptyStatement);\n                return;\n            case ts.SyntaxKind.ExpressionStatement:\n                createExpressionStatement(node as import(\"typescript-4.0.5\").ExpressionStatement);\n                return;\n            case ts.SyntaxKind.IfStatement:\n                createIfStatement(node as import(\"typescript-4.0.5\").IfStatement);\n                return;\n            case ts.SyntaxKind.DoStatement:\n                createDoStatement(node as import(\"typescript-4.0.5\").DoStatement);\n                return;\n            case ts.SyntaxKind.WhileStatement:\n                createWhileStatement(node as import(\"typescript-4.0.5\").WhileStatement);\n                return;\n            case ts.SyntaxKind.ForStatement:\n                createForStatement(node as import(\"typescript-4.0.5\").ForStatement);\n                return;\n            case ts.SyntaxKind.ForInStatement:\n                createForInStatement(node as import(\"typescript-4.0.5\").ForInStatement);\n                return;\n            case ts.SyntaxKind.ForOfStatement:\n                createForOfStatement(node as import(\"typescript-4.0.5\").ForOfStatement);\n                return;\n            case ts.SyntaxKind.ContinueStatement:\n                createContinueStatement(node as import(\"typescript-4.0.5\").ContinueStatement);\n                return;\n            case ts.SyntaxKind.BreakStatement:\n                createBreakStatement(node as import(\"typescript-4.0.5\").BreakStatement);\n                return;\n            case ts.SyntaxKind.ReturnStatement:\n                createReturnStatement(node as import(\"typescript-4.0.5\").ReturnStatement);\n                return;\n            case ts.SyntaxKind.WithStatement:\n                createWithStatement(node as import(\"typescript-4.0.5\").WithStatement);\n                return;\n            case ts.SyntaxKind.SwitchStatement:\n                createSwitchStatement(node as import(\"typescript-4.0.5\").SwitchStatement);\n                return;\n            case ts.SyntaxKind.LabeledStatement:\n                createLabeledStatement(node as import(\"typescript-4.0.5\").LabeledStatement);\n                return;\n            case ts.SyntaxKind.ThrowStatement:\n                createThrowStatement(node as import(\"typescript-4.0.5\").ThrowStatement);\n                return;\n            case ts.SyntaxKind.TryStatement:\n                createTryStatement(node as import(\"typescript-4.0.5\").TryStatement);\n                return;\n            case ts.SyntaxKind.DebuggerStatement:\n                createDebuggerStatement(node as import(\"typescript-4.0.5\").DebuggerStatement);\n                return;\n            case ts.SyntaxKind.VariableDeclaration:\n                createVariableDeclaration(node as import(\"typescript-4.0.5\").VariableDeclaration);\n                return;\n            case ts.SyntaxKind.VariableDeclarationList:\n                createVariableDeclarationList(node as import(\"typescript-4.0.5\").VariableDeclarationList);\n                return;\n            case ts.SyntaxKind.FunctionDeclaration:\n                createFunctionDeclaration(node as import(\"typescript-4.0.5\").FunctionDeclaration);\n                return;\n            case ts.SyntaxKind.ClassDeclaration:\n                createClassDeclaration(node as import(\"typescript-4.0.5\").ClassDeclaration);\n                return;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                createInterfaceDeclaration(node as import(\"typescript-4.0.5\").InterfaceDeclaration);\n                return;\n            case ts.SyntaxKind.TypeAliasDeclaration:\n                createTypeAliasDeclaration(node as import(\"typescript-4.0.5\").TypeAliasDeclaration);\n                return;\n            case ts.SyntaxKind.EnumDeclaration:\n                createEnumDeclaration(node as import(\"typescript-4.0.5\").EnumDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleDeclaration:\n                createModuleDeclaration(node as import(\"typescript-4.0.5\").ModuleDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleBlock:\n                createModuleBlock(node as import(\"typescript-4.0.5\").ModuleBlock);\n                return;\n            case ts.SyntaxKind.CaseBlock:\n                createCaseBlock(node as import(\"typescript-4.0.5\").CaseBlock);\n                return;\n            case ts.SyntaxKind.NamespaceExportDeclaration:\n                createNamespaceExportDeclaration(node as import(\"typescript-4.0.5\").NamespaceExportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n                createImportEqualsDeclaration(node as import(\"typescript-4.0.5\").ImportEqualsDeclaration);\n                return;\n            case ts.SyntaxKind.ImportDeclaration:\n                createImportDeclaration(node as import(\"typescript-4.0.5\").ImportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportClause:\n                createImportClause(node as import(\"typescript-4.0.5\").ImportClause);\n                return;\n            case ts.SyntaxKind.NamespaceImport:\n                createNamespaceImport(node as import(\"typescript-4.0.5\").NamespaceImport);\n                return;\n            case ts.SyntaxKind.NamespaceExport:\n                createNamespaceExport(node as import(\"typescript-4.0.5\").NamespaceExport);\n                return;\n            case ts.SyntaxKind.NamedImports:\n                createNamedImports(node as import(\"typescript-4.0.5\").NamedImports);\n                return;\n            case ts.SyntaxKind.ImportSpecifier:\n                createImportSpecifier(node as import(\"typescript-4.0.5\").ImportSpecifier);\n                return;\n            case ts.SyntaxKind.ExportAssignment:\n                createExportAssignment(node as import(\"typescript-4.0.5\").ExportAssignment);\n                return;\n            case ts.SyntaxKind.ExportDeclaration:\n                createExportDeclaration(node as import(\"typescript-4.0.5\").ExportDeclaration);\n                return;\n            case ts.SyntaxKind.NamedExports:\n                createNamedExports(node as import(\"typescript-4.0.5\").NamedExports);\n                return;\n            case ts.SyntaxKind.ExportSpecifier:\n                createExportSpecifier(node as import(\"typescript-4.0.5\").ExportSpecifier);\n                return;\n            case ts.SyntaxKind.ExternalModuleReference:\n                createExternalModuleReference(node as import(\"typescript-4.0.5\").ExternalModuleReference);\n                return;\n            case ts.SyntaxKind.JsxElement:\n                createJsxElement(node as import(\"typescript-4.0.5\").JsxElement);\n                return;\n            case ts.SyntaxKind.JsxSelfClosingElement:\n                createJsxSelfClosingElement(node as import(\"typescript-4.0.5\").JsxSelfClosingElement);\n                return;\n            case ts.SyntaxKind.JsxOpeningElement:\n                createJsxOpeningElement(node as import(\"typescript-4.0.5\").JsxOpeningElement);\n                return;\n            case ts.SyntaxKind.JsxClosingElement:\n                createJsxClosingElement(node as import(\"typescript-4.0.5\").JsxClosingElement);\n                return;\n            case ts.SyntaxKind.JsxFragment:\n                createJsxFragment(node as import(\"typescript-4.0.5\").JsxFragment);\n                return;\n            case ts.SyntaxKind.JsxText:\n                createJsxText(node as import(\"typescript-4.0.5\").JsxText);\n                return;\n            case ts.SyntaxKind.JsxOpeningFragment:\n                createJsxOpeningFragment(node as import(\"typescript-4.0.5\").JsxOpeningFragment);\n                return;\n            case ts.SyntaxKind.JsxClosingFragment:\n                createJsxJsxClosingFragment(node as import(\"typescript-4.0.5\").JsxClosingFragment);\n                return;\n            case ts.SyntaxKind.JsxAttribute:\n                createJsxAttribute(node as import(\"typescript-4.0.5\").JsxAttribute);\n                return;\n            case ts.SyntaxKind.JsxAttributes:\n                createJsxAttributes(node as import(\"typescript-4.0.5\").JsxAttributes);\n                return;\n            case ts.SyntaxKind.JsxSpreadAttribute:\n                createJsxSpreadAttribute(node as import(\"typescript-4.0.5\").JsxSpreadAttribute);\n                return;\n            case ts.SyntaxKind.JsxExpression:\n                createJsxExpression(node as import(\"typescript-4.0.5\").JsxExpression);\n                return;\n            case ts.SyntaxKind.CaseClause:\n                createCaseClause(node as import(\"typescript-4.0.5\").CaseClause);\n                return;\n            case ts.SyntaxKind.DefaultClause:\n                createDefaultClause(node as import(\"typescript-4.0.5\").DefaultClause);\n                return;\n            case ts.SyntaxKind.HeritageClause:\n                createHeritageClause(node as import(\"typescript-4.0.5\").HeritageClause);\n                return;\n            case ts.SyntaxKind.CatchClause:\n                createCatchClause(node as import(\"typescript-4.0.5\").CatchClause);\n                return;\n            case ts.SyntaxKind.PropertyAssignment:\n                createPropertyAssignment(node as import(\"typescript-4.0.5\").PropertyAssignment);\n                return;\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n                createShorthandPropertyAssignment(node as import(\"typescript-4.0.5\").ShorthandPropertyAssignment);\n                return;\n            case ts.SyntaxKind.SpreadAssignment:\n                createSpreadAssignment(node as import(\"typescript-4.0.5\").SpreadAssignment);\n                return;\n            case ts.SyntaxKind.EnumMember:\n                createEnumMember(node as import(\"typescript-4.0.5\").EnumMember);\n                return;\n            case ts.SyntaxKind.CommaListExpression:\n                createCommaListExpression(node as import(\"typescript-4.0.5\").CommaListExpression);\n                return;\n            default:\n                if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {\n                    writer.write(\"factory.createToken(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n                    return;\n                }\n                writer.write(\"/* Unhandled node kind: \").write(syntaxKindToName[node.kind]).write(\" */\")\n        }\n    }\n\n    function writeNodeTextForTypeNode(node: import(\"typescript-4.0.5\").TypeNode) {\n        if (node.kind >= ts.SyntaxKind.FirstKeyword && node.kind <= ts.SyntaxKind.LastKeyword) {\n            writer.write(\"factory.createKeywordTypeNode(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n        }\n        else {\n            writeNodeText(node);\n        }\n    }\n\n    function createNumericLiteral(node: import(\"typescript-4.0.5\").NumericLiteral) {\n        writer.write(\"factory.createNumericLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createBigIntLiteral(node: import(\"typescript-4.0.5\").BigIntLiteral) {\n        writer.write(\"factory.createBigIntLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createStringLiteral(node: import(\"typescript-4.0.5\").StringLiteral) {\n        writer.write(\"factory.createStringLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createRegularExpressionLiteral(node: import(\"typescript-4.0.5\").RegularExpressionLiteral) {\n        writer.write(\"factory.createRegularExpressionLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createIdentifier(node: import(\"typescript-4.0.5\").Identifier) {\n        writer.write(\"factory.createIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createPrivateIdentifier(node: import(\"typescript-4.0.5\").PrivateIdentifier) {\n        writer.write(\"factory.createPrivateIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createSuper(node: import(\"typescript-4.0.5\").SuperExpression) {\n        writer.write(\"factory.createSuper(\");\n        writer.write(\")\");\n    }\n\n    function createThis(node: import(\"typescript-4.0.5\").ThisExpression) {\n        writer.write(\"factory.createThis(\");\n        writer.write(\")\");\n    }\n\n    function createNull(node: import(\"typescript-4.0.5\").NullLiteral) {\n        writer.write(\"factory.createNull(\");\n        writer.write(\")\");\n    }\n\n    function createTrue(node: import(\"typescript-4.0.5\").TrueLiteral) {\n        writer.write(\"factory.createTrue(\");\n        writer.write(\")\");\n    }\n\n    function createFalse(node: import(\"typescript-4.0.5\").FalseLiteral) {\n        writer.write(\"factory.createFalse(\");\n        writer.write(\")\");\n    }\n\n    function createQualifiedName(node: import(\"typescript-4.0.5\").QualifiedName) {\n        writer.write(\"factory.createQualifiedName(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createComputedPropertyName(node: import(\"typescript-4.0.5\").ComputedPropertyName) {\n        writer.write(\"factory.createComputedPropertyName(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeParameterDeclaration(node: import(\"typescript-4.0.5\").TypeParameterDeclaration) {\n        writer.write(\"factory.createTypeParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.constraint == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.constraint)\n            }\n            writer.write(\",\").newLine();\n            if (node.default == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.default)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParameterDeclaration(node: import(\"typescript-4.0.5\").ParameterDeclaration) {\n        writer.write(\"factory.createParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDecorator(node: import(\"typescript-4.0.5\").Decorator) {\n        writer.write(\"factory.createDecorator(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPropertySignature(node: import(\"typescript-4.0.5\").PropertySignature) {\n        writer.write(\"factory.createPropertySignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyDeclaration(node: import(\"typescript-4.0.5\").PropertyDeclaration) {\n        writer.write(\"factory.createPropertyDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken != null)\n                writer.write(\"factory.createToken(ts.SyntaxKind.QuestionToken)\");\n            else if (node.exclamationToken != null)\n                writer.write(\"factory.createToken(ts.SyntaxKind.ExclamationToken)\");\n            else\n                writer.write(\"undefined\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodSignature(node: import(\"typescript-4.0.5\").MethodSignature) {\n        writer.write(\"factory.createMethodSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodDeclaration(node: import(\"typescript-4.0.5\").MethodDeclaration) {\n        writer.write(\"factory.createMethodDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorDeclaration(node: import(\"typescript-4.0.5\").ConstructorDeclaration) {\n        writer.write(\"factory.createConstructorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createGetAccessorDeclaration(node: import(\"typescript-4.0.5\").GetAccessorDeclaration) {\n        writer.write(\"factory.createGetAccessorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSetAccessorDeclaration(node: import(\"typescript-4.0.5\").SetAccessorDeclaration) {\n        writer.write(\"factory.createSetAccessorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCallSignature(node: import(\"typescript-4.0.5\").CallSignatureDeclaration) {\n        writer.write(\"factory.createCallSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructSignature(node: import(\"typescript-4.0.5\").ConstructSignatureDeclaration) {\n        writer.write(\"factory.createConstructSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexSignature(node: import(\"typescript-4.0.5\").IndexSignatureDeclaration) {\n        writer.write(\"factory.createIndexSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createKeywordTypeNode(node: import(\"typescript-4.0.5\").KeywordTypeNode) {\n        writer.write(\"factory.createKeywordTypeNode(\");\n        writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.kind])\n        writer.write(\")\");\n    }\n\n    function createTypeReferenceNode(node: import(\"typescript-4.0.5\").TypeReferenceNode) {\n        writer.write(\"factory.createTypeReferenceNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.typeName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionTypeNode(node: import(\"typescript-4.0.5\").FunctionTypeNode) {\n        writer.write(\"factory.createFunctionTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorTypeNode(node: import(\"typescript-4.0.5\").ConstructorTypeNode) {\n        writer.write(\"factory.createConstructorTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeQueryNode(node: import(\"typescript-4.0.5\").TypeQueryNode) {\n        writer.write(\"factory.createTypeQueryNode(\");\n        writeNodeText(node.exprName)\n        writer.write(\")\");\n    }\n\n    function createTypeLiteralNode(node: import(\"typescript-4.0.5\").TypeLiteralNode) {\n        writer.write(\"factory.createTypeLiteralNode(\");\n        writer.write(\"[\");\n        if (node.members.length === 1) {\n            const item = node.members![0];\n            writeNodeText(item)\n        }\n        else if (node.members.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.members!.length; i++) {\n                    const item = node.members![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayTypeNode(node: import(\"typescript-4.0.5\").ArrayTypeNode) {\n        writer.write(\"factory.createArrayTypeNode(\");\n        writeNodeTextForTypeNode(node.elementType)\n        writer.write(\")\");\n    }\n\n    function createTupleTypeNode(node: import(\"typescript-4.0.5\").TupleTypeNode) {\n        writer.write(\"factory.createTupleTypeNode(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamedTupleMember(node: import(\"typescript-4.0.5\").NamedTupleMember) {\n        writer.write(\"factory.createNamedTupleMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createOptionalTypeNode(node: import(\"typescript-4.0.5\").OptionalTypeNode) {\n        writer.write(\"factory.createOptionalTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createRestTypeNode(node: import(\"typescript-4.0.5\").RestTypeNode) {\n        writer.write(\"factory.createRestTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createUnionTypeNode(node: import(\"typescript-4.0.5\").UnionTypeNode) {\n        writer.write(\"factory.createUnionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createIntersectionTypeNode(node: import(\"typescript-4.0.5\").IntersectionTypeNode) {\n        writer.write(\"factory.createIntersectionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createConditionalTypeNode(node: import(\"typescript-4.0.5\").ConditionalTypeNode) {\n        writer.write(\"factory.createConditionalTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.checkType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.extendsType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.trueType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.falseType)\n        });\n        writer.write(\")\");\n    }\n\n    function createInferTypeNode(node: import(\"typescript-4.0.5\").InferTypeNode) {\n        writer.write(\"factory.createInferTypeNode(\");\n        writeNodeText(node.typeParameter)\n        writer.write(\")\");\n    }\n\n    function createImportTypeNode(node: import(\"typescript-4.0.5\").ImportTypeNode) {\n        writer.write(\"factory.createImportTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.argument)\n            writer.write(\",\").newLine();\n            if (node.qualifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.qualifier)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOf.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedType(node: import(\"typescript-4.0.5\").ParenthesizedTypeNode) {\n        writer.write(\"factory.createParenthesizedType(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createThisTypeNode(node: import(\"typescript-4.0.5\").ThisTypeNode) {\n        writer.write(\"factory.createThisTypeNode(\");\n        writer.write(\")\");\n    }\n\n    function createTypeOperatorNode(node: import(\"typescript-4.0.5\").TypeOperatorNode) {\n        writer.write(\"factory.createTypeOperatorNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexedAccessTypeNode(node: import(\"typescript-4.0.5\").IndexedAccessTypeNode) {\n        writer.write(\"factory.createIndexedAccessTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.objectType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.indexType)\n        });\n        writer.write(\")\");\n    }\n\n    function createMappedTypeNode(node: import(\"typescript-4.0.5\").MappedTypeNode) {\n        writer.write(\"factory.createMappedTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.readonlyToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.readonlyToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.typeParameter)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createLiteralTypeNode(node: import(\"typescript-4.0.5\").LiteralTypeNode) {\n        writer.write(\"factory.createLiteralTypeNode(\");\n        writeNodeText(node.literal)\n        writer.write(\")\");\n    }\n\n    function createObjectBindingPattern(node: import(\"typescript-4.0.5\").ObjectBindingPattern) {\n        writer.write(\"factory.createObjectBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayBindingPattern(node: import(\"typescript-4.0.5\").ArrayBindingPattern) {\n        writer.write(\"factory.createArrayBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createBindingElement(node: import(\"typescript-4.0.5\").BindingElement) {\n        writer.write(\"factory.createBindingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createArrayLiteralExpression(node: import(\"typescript-4.0.5\").ArrayLiteralExpression) {\n        writer.write(\"factory.createArrayLiteralExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.elements.length === 1) {\n                const item = node.elements![0];\n                writeNodeText(item)\n            }\n            else if (node.elements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.elements!.length; i++) {\n                        const item = node.elements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectLiteralExpression(node: import(\"typescript-4.0.5\").ObjectLiteralExpression) {\n        writer.write(\"factory.createObjectLiteralExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.properties.length === 1) {\n                const item = node.properties![0];\n                writeNodeText(item)\n            }\n            else if (node.properties.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.properties!.length; i++) {\n                        const item = node.properties![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessExpression(node: import(\"typescript-4.0.5\").PropertyAccessExpression) {\n        writer.write(\"factory.createPropertyAccessExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessChain(node: import(\"typescript-4.0.5\").PropertyAccessChain) {\n        writer.write(\"factory.createPropertyAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessExpression(node: import(\"typescript-4.0.5\").ElementAccessExpression) {\n        writer.write(\"factory.createElementAccessExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessChain(node: import(\"typescript-4.0.5\").ElementAccessChain) {\n        writer.write(\"factory.createElementAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createCallExpression(node: import(\"typescript-4.0.5\").CallExpression) {\n        writer.write(\"factory.createCallExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCallChain(node: import(\"typescript-4.0.5\").CallChain) {\n        writer.write(\"factory.createCallChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createNewExpression(node: import(\"typescript-4.0.5\").NewExpression) {\n        writer.write(\"factory.createNewExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.arguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.arguments.length === 1) {\n                    const item = node.arguments![0];\n                    writeNodeText(item)\n                }\n                else if (node.arguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.arguments!.length; i++) {\n                            const item = node.arguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTaggedTemplateExpression(node: import(\"typescript-4.0.5\").TaggedTemplateExpression) {\n        writer.write(\"factory.createTaggedTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tag)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.template)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAssertion(node: import(\"typescript-4.0.5\").TypeAssertion) {\n        writer.write(\"factory.createTypeAssertion(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedExpression(node: import(\"typescript-4.0.5\").ParenthesizedExpression) {\n        writer.write(\"factory.createParenthesizedExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createFunctionExpression(node: import(\"typescript-4.0.5\").FunctionExpression) {\n        writer.write(\"factory.createFunctionExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createArrowFunction(node: import(\"typescript-4.0.5\").ArrowFunction) {\n        writer.write(\"factory.createArrowFunction(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.equalsGreaterThanToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createDeleteExpression(node: import(\"typescript-4.0.5\").DeleteExpression) {\n        writer.write(\"factory.createDeleteExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeOfExpression(node: import(\"typescript-4.0.5\").TypeOfExpression) {\n        writer.write(\"factory.createTypeOfExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createVoidExpression(node: import(\"typescript-4.0.5\").VoidExpression) {\n        writer.write(\"factory.createVoidExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createAwaitExpression(node: import(\"typescript-4.0.5\").AwaitExpression) {\n        writer.write(\"factory.createAwaitExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPrefixUnaryExpression(node: import(\"typescript-4.0.5\").PrefixUnaryExpression) {\n        writer.write(\"factory.createPrefixUnaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeText(node.operand)\n        });\n        writer.write(\")\");\n    }\n\n    function createPostfixUnaryExpression(node: import(\"typescript-4.0.5\").PostfixUnaryExpression) {\n        writer.write(\"factory.createPostfixUnaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.operand)\n            writer.write(\",\").newLine();\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n        });\n        writer.write(\")\");\n    }\n\n    function createBinaryExpression(node: import(\"typescript-4.0.5\").BinaryExpression) {\n        writer.write(\"factory.createBinaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.operatorToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createConditionalExpression(node: import(\"typescript-4.0.5\").ConditionalExpression) {\n        writer.write(\"factory.createConditionalExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.condition)\n            writer.write(\",\").newLine();\n            writeNodeText(node.questionToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenTrue)\n            writer.write(\",\").newLine();\n            writeNodeText(node.colonToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenFalse)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateExpression(node: import(\"typescript-4.0.5\").TemplateExpression) {\n        writer.write(\"factory.createTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateHead(node: import(\"typescript-4.0.5\").TemplateHead) {\n        writer.write(\"factory.createTemplateHead(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateMiddle(node: import(\"typescript-4.0.5\").TemplateMiddle) {\n        writer.write(\"factory.createTemplateMiddle(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateTail(node: import(\"typescript-4.0.5\").TemplateTail) {\n        writer.write(\"factory.createTemplateTail(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNoSubstitutionTemplateLiteral(node: import(\"typescript-4.0.5\").NoSubstitutionTemplateLiteral) {\n        writer.write(\"factory.createNoSubstitutionTemplateLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createYieldExpression(node: import(\"typescript-4.0.5\").YieldExpression) {\n        writer.write(\"factory.createYieldExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadElement(node: import(\"typescript-4.0.5\").SpreadElement) {\n        writer.write(\"factory.createSpreadElement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createClassExpression(node: import(\"typescript-4.0.5\").ClassExpression) {\n        writer.write(\"factory.createClassExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createOmittedExpression(node: import(\"typescript-4.0.5\").OmittedExpression) {\n        writer.write(\"factory.createOmittedExpression(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionWithTypeArguments(node: import(\"typescript-4.0.5\").ExpressionWithTypeArguments) {\n        writer.write(\"factory.createExpressionWithTypeArguments(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createAsExpression(node: import(\"typescript-4.0.5\").AsExpression) {\n        writer.write(\"factory.createAsExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createNonNullExpression(node: import(\"typescript-4.0.5\").NonNullExpression) {\n        writer.write(\"factory.createNonNullExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createNonNullChain(node: import(\"typescript-4.0.5\").NonNullChain) {\n        writer.write(\"factory.createNonNullChain(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createMetaProperty(node: import(\"typescript-4.0.5\").MetaProperty) {\n        writer.write(\"factory.createMetaProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.keywordToken])\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateSpan(node: import(\"typescript-4.0.5\").TemplateSpan) {\n        writer.write(\"factory.createTemplateSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createSemicolonClassElement(node: import(\"typescript-4.0.5\").SemicolonClassElement) {\n        writer.write(\"factory.createSemicolonClassElement(\");\n        writer.write(\")\");\n    }\n\n    function createBlock(node: import(\"typescript-4.0.5\").Block) {\n        writer.write(\"factory.createBlock(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableStatement(node: import(\"typescript-4.0.5\").VariableStatement) {\n        writer.write(\"factory.createVariableStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.declarationList)\n        });\n        writer.write(\")\");\n    }\n\n    function createEmptyStatement(node: import(\"typescript-4.0.5\").EmptyStatement) {\n        writer.write(\"factory.createEmptyStatement(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionStatement(node: import(\"typescript-4.0.5\").ExpressionStatement) {\n        writer.write(\"factory.createExpressionStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createIfStatement(node: import(\"typescript-4.0.5\").IfStatement) {\n        writer.write(\"factory.createIfStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.thenStatement)\n            writer.write(\",\").newLine();\n            if (node.elseStatement == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.elseStatement)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDoStatement(node: import(\"typescript-4.0.5\").DoStatement) {\n        writer.write(\"factory.createDoStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.statement)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createWhileStatement(node: import(\"typescript-4.0.5\").WhileStatement) {\n        writer.write(\"factory.createWhileStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForStatement(node: import(\"typescript-4.0.5\").ForStatement) {\n        writer.write(\"factory.createForStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n            writer.write(\",\").newLine();\n            if (node.condition == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.condition)\n            }\n            writer.write(\",\").newLine();\n            if (node.incrementor == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.incrementor)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForInStatement(node: import(\"typescript-4.0.5\").ForInStatement) {\n        writer.write(\"factory.createForInStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForOfStatement(node: import(\"typescript-4.0.5\").ForOfStatement) {\n        writer.write(\"factory.createForOfStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.awaitModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.awaitModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createContinueStatement(node: import(\"typescript-4.0.5\").ContinueStatement) {\n        writer.write(\"factory.createContinueStatement(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createBreakStatement(node: import(\"typescript-4.0.5\").BreakStatement) {\n        writer.write(\"factory.createBreakStatement(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createReturnStatement(node: import(\"typescript-4.0.5\").ReturnStatement) {\n        writer.write(\"factory.createReturnStatement(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createWithStatement(node: import(\"typescript-4.0.5\").WithStatement) {\n        writer.write(\"factory.createWithStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createSwitchStatement(node: import(\"typescript-4.0.5\").SwitchStatement) {\n        writer.write(\"factory.createSwitchStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.caseBlock)\n        });\n        writer.write(\")\");\n    }\n\n    function createLabeledStatement(node: import(\"typescript-4.0.5\").LabeledStatement) {\n        writer.write(\"factory.createLabeledStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.label)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createThrowStatement(node: import(\"typescript-4.0.5\").ThrowStatement) {\n        writer.write(\"factory.createThrowStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTryStatement(node: import(\"typescript-4.0.5\").TryStatement) {\n        writer.write(\"factory.createTryStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tryBlock)\n            writer.write(\",\").newLine();\n            if (node.catchClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.catchClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.finallyBlock == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.finallyBlock)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDebuggerStatement(node: import(\"typescript-4.0.5\").DebuggerStatement) {\n        writer.write(\"factory.createDebuggerStatement(\");\n        writer.write(\")\");\n    }\n\n    function createVariableDeclaration(node: import(\"typescript-4.0.5\").VariableDeclaration) {\n        writer.write(\"factory.createVariableDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.exclamationToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exclamationToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableDeclarationList(node: import(\"typescript-4.0.5\").VariableDeclarationList) {\n        writer.write(\"factory.createVariableDeclarationList(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.declarations.length === 1) {\n                const item = node.declarations![0];\n                writeNodeText(item)\n            }\n            else if (node.declarations.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.declarations!.length; i++) {\n                        const item = node.declarations![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionDeclaration(node: import(\"typescript-4.0.5\").FunctionDeclaration) {\n        writer.write(\"factory.createFunctionDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createClassDeclaration(node: import(\"typescript-4.0.5\").ClassDeclaration) {\n        writer.write(\"factory.createClassDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createInterfaceDeclaration(node: import(\"typescript-4.0.5\").InterfaceDeclaration) {\n        writer.write(\"factory.createInterfaceDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAliasDeclaration(node: import(\"typescript-4.0.5\").TypeAliasDeclaration) {\n        writer.write(\"factory.createTypeAliasDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createEnumDeclaration(node: import(\"typescript-4.0.5\").EnumDeclaration) {\n        writer.write(\"factory.createEnumDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleDeclaration(node: import(\"typescript-4.0.5\").ModuleDeclaration) {\n        writer.write(\"factory.createModuleDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleBlock(node: import(\"typescript-4.0.5\").ModuleBlock) {\n        writer.write(\"factory.createModuleBlock(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createCaseBlock(node: import(\"typescript-4.0.5\").CaseBlock) {\n        writer.write(\"factory.createCaseBlock(\");\n        writer.write(\"[\");\n        if (node.clauses.length === 1) {\n            const item = node.clauses![0];\n            writeNodeText(item)\n        }\n        else if (node.clauses.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.clauses!.length; i++) {\n                    const item = node.clauses![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamespaceExportDeclaration(node: import(\"typescript-4.0.5\").NamespaceExportDeclaration) {\n        writer.write(\"factory.createNamespaceExportDeclaration(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createImportEqualsDeclaration(node: import(\"typescript-4.0.5\").ImportEqualsDeclaration) {\n        writer.write(\"factory.createImportEqualsDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleReference)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportDeclaration(node: import(\"typescript-4.0.5\").ImportDeclaration) {\n        writer.write(\"factory.createImportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.importClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.importClause)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleSpecifier)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportClause(node: import(\"typescript-4.0.5\").ImportClause) {\n        writer.write(\"factory.createImportClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(node.isTypeOnly.toString())\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.namedBindings == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.namedBindings)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamespaceImport(node: import(\"typescript-4.0.5\").NamespaceImport) {\n        writer.write(\"factory.createNamespaceImport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamespaceExport(node: import(\"typescript-4.0.5\").NamespaceExport) {\n        writer.write(\"factory.createNamespaceExport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamedImports(node: import(\"typescript-4.0.5\").NamedImports) {\n        writer.write(\"factory.createNamedImports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createImportSpecifier(node: import(\"typescript-4.0.5\").ImportSpecifier) {\n        writer.write(\"factory.createImportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportAssignment(node: import(\"typescript-4.0.5\").ExportAssignment) {\n        writer.write(\"factory.createExportAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isExportEquals == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isExportEquals.toString())\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportDeclaration(node: import(\"typescript-4.0.5\").ExportDeclaration) {\n        writer.write(\"factory.createExportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOnly.toString())\n            writer.write(\",\").newLine();\n            if (node.exportClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exportClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.moduleSpecifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.moduleSpecifier)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamedExports(node: import(\"typescript-4.0.5\").NamedExports) {\n        writer.write(\"factory.createNamedExports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createExportSpecifier(node: import(\"typescript-4.0.5\").ExportSpecifier) {\n        writer.write(\"factory.createExportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExternalModuleReference(node: import(\"typescript-4.0.5\").ExternalModuleReference) {\n        writer.write(\"factory.createExternalModuleReference(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxElement(node: import(\"typescript-4.0.5\").JsxElement) {\n        writer.write(\"factory.createJsxElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingElement)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingElement)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxSelfClosingElement(node: import(\"typescript-4.0.5\").JsxSelfClosingElement) {\n        writer.write(\"factory.createJsxSelfClosingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningElement(node: import(\"typescript-4.0.5\").JsxOpeningElement) {\n        writer.write(\"factory.createJsxOpeningElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxClosingElement(node: import(\"typescript-4.0.5\").JsxClosingElement) {\n        writer.write(\"factory.createJsxClosingElement(\");\n        writeNodeText(node.tagName)\n        writer.write(\")\");\n    }\n\n    function createJsxFragment(node: import(\"typescript-4.0.5\").JsxFragment) {\n        writer.write(\"factory.createJsxFragment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingFragment)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingFragment)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxText(node: import(\"typescript-4.0.5\").JsxText) {\n        writer.write(\"factory.createJsxText(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            writer.write(node.containsOnlyTriviaWhiteSpaces.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningFragment(node: import(\"typescript-4.0.5\").JsxOpeningFragment) {\n        writer.write(\"factory.createJsxOpeningFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxJsxClosingFragment(node: import(\"typescript-4.0.5\").JsxClosingFragment) {\n        writer.write(\"factory.createJsxJsxClosingFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxAttribute(node: import(\"typescript-4.0.5\").JsxAttribute) {\n        writer.write(\"factory.createJsxAttribute(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxAttributes(node: import(\"typescript-4.0.5\").JsxAttributes) {\n        writer.write(\"factory.createJsxAttributes(\");\n        writer.write(\"[\");\n        if (node.properties.length === 1) {\n            const item = node.properties![0];\n            writeNodeText(item)\n        }\n        else if (node.properties.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.properties!.length; i++) {\n                    const item = node.properties![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createJsxSpreadAttribute(node: import(\"typescript-4.0.5\").JsxSpreadAttribute) {\n        writer.write(\"factory.createJsxSpreadAttribute(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxExpression(node: import(\"typescript-4.0.5\").JsxExpression) {\n        writer.write(\"factory.createJsxExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCaseClause(node: import(\"typescript-4.0.5\").CaseClause) {\n        writer.write(\"factory.createCaseClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createDefaultClause(node: import(\"typescript-4.0.5\").DefaultClause) {\n        writer.write(\"factory.createDefaultClause(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createHeritageClause(node: import(\"typescript-4.0.5\").HeritageClause) {\n        writer.write(\"factory.createHeritageClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.token])\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.types.length === 1) {\n                const item = node.types![0];\n                writeNodeText(item)\n            }\n            else if (node.types.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.types!.length; i++) {\n                        const item = node.types![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCatchClause(node: import(\"typescript-4.0.5\").CatchClause) {\n        writer.write(\"factory.createCatchClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.variableDeclaration == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.variableDeclaration)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.block)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAssignment(node: import(\"typescript-4.0.5\").PropertyAssignment) {\n        writer.write(\"factory.createPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n        });\n        writer.write(\")\");\n    }\n\n    function createShorthandPropertyAssignment(node: import(\"typescript-4.0.5\").ShorthandPropertyAssignment) {\n        writer.write(\"factory.createShorthandPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.objectAssignmentInitializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.objectAssignmentInitializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadAssignment(node: import(\"typescript-4.0.5\").SpreadAssignment) {\n        writer.write(\"factory.createSpreadAssignment(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createEnumMember(node: import(\"typescript-4.0.5\").EnumMember) {\n        writer.write(\"factory.createEnumMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCommaListExpression(node: import(\"typescript-4.0.5\").CommaListExpression) {\n        writer.write(\"factory.createCommaListExpression(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createSyntaxKindToNameMap() {\n        const map: { [kind: number]: string } = {};\n        for (const name of Object.keys(ts.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n            const value = (ts.SyntaxKind as any)[name] as number;\n            if (map[value] == null)\n                map[value] = name;\n        }\n        return map;\n    }\n\n    function getNodeFlagValues(value: number) {\n        // ignore the BlockScoped node flag\n        return getFlagValuesAsString(ts.NodeFlags, \"ts.NodeFlags\", value || 0, \"None\", getFlagValues(ts.NodeFlags, value).filter(v => v !== ts.NodeFlags.BlockScoped));\n    }\n\n    function getFlagValuesAsString(enumObj: any, enumName: string, value: number, defaultName: string, flagValues?: number[]) {\n        flagValues = flagValues || getFlagValues(enumObj, value);\n        const members: string[] = [];\n        for (const flagValue of flagValues)\n            members.push(enumName + \".\" + enumObj[flagValue]);\n        if (members.length === 0)\n            members.push(enumName + \".\" + defaultName);\n        return members.join(\" | \");\n    }\n\n    function getFlagValues(enumObj: any, value: number) {\n        const members: number[] = [];\n        for (const prop in enumObj) {\n            if (typeof enumObj[prop] === \"string\")\n                continue;\n            if ((enumObj[prop] & value) !== 0)\n                members.push(enumObj[prop]);\n        }\n        return members;\n    }\n}\n"],"sourceRoot":""}