{"version":3,"sources":["resources/factoryCode/typescript-4.2.4.ts"],"names":["generateFactoryCode","ts","initialNode","writer","CodeBlockWriter","newLine","indentNumberOfSpaces","syntaxKindToName","map","Object","keys","SyntaxKind","filter","k","isNaN","parseInt","name","value","createSyntaxKindToNameMap","isSourceFile","write","statements","length","indent","i","statement","writeNodeText","newLineIfLastNot","toString","node","kind","NumericLiteral","quote","text","createNumericLiteral","BigIntLiteral","createBigIntLiteral","StringLiteral","createStringLiteral","RegularExpressionLiteral","createRegularExpressionLiteral","Identifier","createIdentifier","PrivateIdentifier","createPrivateIdentifier","SuperKeyword","ThisKeyword","NullKeyword","TrueKeyword","FalseKeyword","QualifiedName","left","right","createQualifiedName","ComputedPropertyName","expression","createComputedPropertyName","TypeParameter","constraint","writeNodeTextForTypeNode","default","createTypeParameterDeclaration","Parameter","decorators","item","modifiers","dotDotDotToken","questionToken","type","initializer","createParameterDeclaration","Decorator","createDecorator","PropertySignature","createPropertySignature","PropertyDeclaration","exclamationToken","createPropertyDeclaration","MethodSignature","typeParameters","parameters","createMethodSignature","MethodDeclaration","asteriskToken","body","createMethodDeclaration","Constructor","createConstructorDeclaration","GetAccessor","createGetAccessorDeclaration","SetAccessor","createSetAccessorDeclaration","CallSignature","createCallSignature","ConstructSignature","createConstructSignature","IndexSignature","createIndexSignature","TemplateLiteralTypeSpan","literal","createTemplateLiteralTypeSpan","AnyKeyword","BooleanKeyword","IntrinsicKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","BigIntKeyword","createKeywordTypeNode","TypeReference","typeName","typeArguments","createTypeReferenceNode","FunctionType","createFunctionTypeNode","ConstructorType","createConstructorTypeNode","TypeQuery","exprName","createTypeQueryNode","TypeLiteral","members","createTypeLiteralNode","ArrayType","elementType","createArrayTypeNode","TupleType","elements","createTupleTypeNode","NamedTupleMember","createNamedTupleMember","OptionalType","createOptionalTypeNode","RestType","createRestTypeNode","UnionType","types","createUnionTypeNode","IntersectionType","createIntersectionTypeNode","ConditionalType","checkType","extendsType","trueType","falseType","createConditionalTypeNode","InferType","typeParameter","createInferTypeNode","ImportType","argument","qualifier","isTypeOf","createImportTypeNode","ParenthesizedType","createParenthesizedType","ThisType","TypeOperator","operator","createTypeOperatorNode","IndexedAccessType","objectType","indexType","createIndexedAccessTypeNode","MappedType","readonlyToken","nameType","createMappedTypeNode","LiteralType","createLiteralTypeNode","TemplateLiteralType","head","templateSpans","createTemplateLiteralType","ObjectBindingPattern","createObjectBindingPattern","ArrayBindingPattern","createArrayBindingPattern","BindingElement","propertyName","createBindingElement","ArrayLiteralExpression","multiLine","createArrayLiteralExpression","ObjectLiteralExpression","properties","createObjectLiteralExpression","PropertyAccessExpression","isPropertyAccessChain","questionDotToken","createPropertyAccessChain","isPropertyAccessExpression","createPropertyAccessExpression","Error","getText","ElementAccessExpression","isElementAccessChain","argumentExpression","createElementAccessChain","isElementAccessExpression","createElementAccessExpression","CallExpression","isCallChain","arguments","createCallChain","isCallExpression","createCallExpression","NewExpression","createNewExpression","TaggedTemplateExpression","tag","template","createTaggedTemplateExpression","TypeAssertionExpression","createTypeAssertion","ParenthesizedExpression","createParenthesizedExpression","FunctionExpression","createFunctionExpression","ArrowFunction","equalsGreaterThanToken","createArrowFunction","DeleteExpression","createDeleteExpression","TypeOfExpression","createTypeOfExpression","VoidExpression","createVoidExpression","AwaitExpression","createAwaitExpression","PrefixUnaryExpression","operand","createPrefixUnaryExpression","PostfixUnaryExpression","createPostfixUnaryExpression","BinaryExpression","operatorToken","createBinaryExpression","ConditionalExpression","condition","whenTrue","colonToken","whenFalse","createConditionalExpression","TemplateExpression","createTemplateExpression","TemplateHead","rawText","createTemplateHead","TemplateMiddle","createTemplateMiddle","TemplateTail","createTemplateTail","NoSubstitutionTemplateLiteral","createNoSubstitutionTemplateLiteral","YieldExpression","createYieldExpression","SpreadElement","createSpreadElement","ClassExpression","heritageClauses","createClassExpression","OmittedExpression","ExpressionWithTypeArguments","createExpressionWithTypeArguments","AsExpression","createAsExpression","NonNullExpression","isNonNullChain","createNonNullChain","isNonNullExpression","createNonNullExpression","MetaProperty","keywordToken","createMetaProperty","TemplateSpan","createTemplateSpan","SemicolonClassElement","Block","createBlock","VariableStatement","declarationList","createVariableStatement","EmptyStatement","ExpressionStatement","createExpressionStatement","IfStatement","thenStatement","elseStatement","createIfStatement","DoStatement","createDoStatement","WhileStatement","createWhileStatement","ForStatement","incrementor","createForStatement","ForInStatement","createForInStatement","ForOfStatement","awaitModifier","createForOfStatement","ContinueStatement","label","createContinueStatement","BreakStatement","createBreakStatement","ReturnStatement","createReturnStatement","WithStatement","createWithStatement","SwitchStatement","caseBlock","createSwitchStatement","LabeledStatement","createLabeledStatement","ThrowStatement","createThrowStatement","TryStatement","tryBlock","catchClause","finallyBlock","createTryStatement","DebuggerStatement","VariableDeclaration","createVariableDeclaration","VariableDeclarationList","declarations","getNodeFlagValues","flags","createVariableDeclarationList","FunctionDeclaration","createFunctionDeclaration","ClassDeclaration","createClassDeclaration","InterfaceDeclaration","createInterfaceDeclaration","TypeAliasDeclaration","createTypeAliasDeclaration","EnumDeclaration","createEnumDeclaration","ModuleDeclaration","createModuleDeclaration","ModuleBlock","createModuleBlock","CaseBlock","clauses","createCaseBlock","NamespaceExportDeclaration","createNamespaceExportDeclaration","ImportEqualsDeclaration","isTypeOnly","moduleReference","createImportEqualsDeclaration","ImportDeclaration","importClause","moduleSpecifier","createImportDeclaration","ImportClause","namedBindings","createImportClause","NamespaceImport","createNamespaceImport","NamespaceExport","createNamespaceExport","NamedImports","createNamedImports","ImportSpecifier","createImportSpecifier","ExportAssignment","isExportEquals","createExportAssignment","ExportDeclaration","exportClause","createExportDeclaration","NamedExports","createNamedExports","ExportSpecifier","createExportSpecifier","ExternalModuleReference","createExternalModuleReference","JsxElement","openingElement","children","closingElement","createJsxElement","JsxSelfClosingElement","tagName","attributes","createJsxSelfClosingElement","JsxOpeningElement","createJsxOpeningElement","JsxClosingElement","createJsxClosingElement","JsxFragment","openingFragment","closingFragment","createJsxFragment","JsxText","containsOnlyTriviaWhiteSpaces","createJsxText","JsxOpeningFragment","JsxClosingFragment","JsxAttribute","createJsxAttribute","JsxAttributes","createJsxAttributes","JsxSpreadAttribute","createJsxSpreadAttribute","JsxExpression","createJsxExpression","CaseClause","createCaseClause","DefaultClause","createDefaultClause","HeritageClause","token","createHeritageClause","CatchClause","variableDeclaration","block","createCatchClause","PropertyAssignment","createPropertyAssignment","ShorthandPropertyAssignment","objectAssignmentInitializer","createShorthandPropertyAssignment","SpreadAssignment","createSpreadAssignment","EnumMember","createEnumMember","CommaListExpression","createCommaListExpression","FirstToken","LastToken","FirstKeyword","LastKeyword","enumObj","enumName","defaultName","flagValues","getFlagValues","flagValue","push","join","getFlagValuesAsString","NodeFlags","v","BlockScoped","prop"],"mappings":"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","file":"static/js/45.637bfa50.chunk.js","sourcesContent":["import CodeBlockWriter from \"code-block-writer\";\n\nexport function generateFactoryCode(ts: typeof import(\"typescript-4.2.4\"), initialNode: import(\"typescript-4.2.4\").Node) {\n    const writer = new CodeBlockWriter({ newLine: \"\\n\", indentNumberOfSpaces: 2 });\n    const syntaxKindToName = createSyntaxKindToNameMap();\n\n    if (ts.isSourceFile(initialNode)) {\n        writer.write(\"[\");\n        if (initialNode.statements.length > 0) {\n            writer.indent(() => {\n                for (let i = 0; i < initialNode.statements.length; i++) {\n                    const statement = initialNode.statements[i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(statement);\n                }\n            }).newLine();\n        }\n        writer.write(\"];\");\n    }\n    else {\n        writeNodeText(initialNode);\n    }\n    writer.newLineIfLastNot();\n\n    return writer.toString();\n\n    function writeNodeText(node: import(\"typescript-4.2.4\").Node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NumericLiteral:\n                createNumericLiteral(node as import(\"typescript-4.2.4\").NumericLiteral);\n                return;\n            case ts.SyntaxKind.BigIntLiteral:\n                createBigIntLiteral(node as import(\"typescript-4.2.4\").BigIntLiteral);\n                return;\n            case ts.SyntaxKind.StringLiteral:\n                createStringLiteral(node as import(\"typescript-4.2.4\").StringLiteral);\n                return;\n            case ts.SyntaxKind.RegularExpressionLiteral:\n                createRegularExpressionLiteral(node as import(\"typescript-4.2.4\").RegularExpressionLiteral);\n                return;\n            case ts.SyntaxKind.Identifier:\n                createIdentifier(node as import(\"typescript-4.2.4\").Identifier);\n                return;\n            case ts.SyntaxKind.PrivateIdentifier:\n                createPrivateIdentifier(node as import(\"typescript-4.2.4\").PrivateIdentifier);\n                return;\n            case ts.SyntaxKind.SuperKeyword:\n                createSuper(node as import(\"typescript-4.2.4\").SuperExpression);\n                return;\n            case ts.SyntaxKind.ThisKeyword:\n                createThis(node as import(\"typescript-4.2.4\").ThisExpression);\n                return;\n            case ts.SyntaxKind.NullKeyword:\n                createNull(node as import(\"typescript-4.2.4\").NullLiteral);\n                return;\n            case ts.SyntaxKind.TrueKeyword:\n                createTrue(node as import(\"typescript-4.2.4\").TrueLiteral);\n                return;\n            case ts.SyntaxKind.FalseKeyword:\n                createFalse(node as import(\"typescript-4.2.4\").FalseLiteral);\n                return;\n            case ts.SyntaxKind.QualifiedName:\n                createQualifiedName(node as import(\"typescript-4.2.4\").QualifiedName);\n                return;\n            case ts.SyntaxKind.ComputedPropertyName:\n                createComputedPropertyName(node as import(\"typescript-4.2.4\").ComputedPropertyName);\n                return;\n            case ts.SyntaxKind.TypeParameter:\n                createTypeParameterDeclaration(node as import(\"typescript-4.2.4\").TypeParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Parameter:\n                createParameterDeclaration(node as import(\"typescript-4.2.4\").ParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Decorator:\n                createDecorator(node as import(\"typescript-4.2.4\").Decorator);\n                return;\n            case ts.SyntaxKind.PropertySignature:\n                createPropertySignature(node as import(\"typescript-4.2.4\").PropertySignature);\n                return;\n            case ts.SyntaxKind.PropertyDeclaration:\n                createPropertyDeclaration(node as import(\"typescript-4.2.4\").PropertyDeclaration);\n                return;\n            case ts.SyntaxKind.MethodSignature:\n                createMethodSignature(node as import(\"typescript-4.2.4\").MethodSignature);\n                return;\n            case ts.SyntaxKind.MethodDeclaration:\n                createMethodDeclaration(node as import(\"typescript-4.2.4\").MethodDeclaration);\n                return;\n            case ts.SyntaxKind.Constructor:\n                createConstructorDeclaration(node as import(\"typescript-4.2.4\").ConstructorDeclaration);\n                return;\n            case ts.SyntaxKind.GetAccessor:\n                createGetAccessorDeclaration(node as import(\"typescript-4.2.4\").GetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.SetAccessor:\n                createSetAccessorDeclaration(node as import(\"typescript-4.2.4\").SetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.CallSignature:\n                createCallSignature(node as import(\"typescript-4.2.4\").CallSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.ConstructSignature:\n                createConstructSignature(node as import(\"typescript-4.2.4\").ConstructSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.IndexSignature:\n                createIndexSignature(node as import(\"typescript-4.2.4\").IndexSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.TemplateLiteralTypeSpan:\n                createTemplateLiteralTypeSpan(node as import(\"typescript-4.2.4\").TemplateLiteralTypeSpan);\n                return;\n            case ts.SyntaxKind.AnyKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BooleanKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.IntrinsicKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NeverKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NumberKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.StringKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.SymbolKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UndefinedKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UnknownKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BigIntKeyword:\n                createKeywordTypeNode(node as import(\"typescript-4.2.4\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.TypeReference:\n                createTypeReferenceNode(node as import(\"typescript-4.2.4\").TypeReferenceNode);\n                return;\n            case ts.SyntaxKind.FunctionType:\n                createFunctionTypeNode(node as import(\"typescript-4.2.4\").FunctionTypeNode);\n                return;\n            case ts.SyntaxKind.ConstructorType:\n                createConstructorTypeNode(node as import(\"typescript-4.2.4\").ConstructorTypeNode);\n                return;\n            case ts.SyntaxKind.TypeQuery:\n                createTypeQueryNode(node as import(\"typescript-4.2.4\").TypeQueryNode);\n                return;\n            case ts.SyntaxKind.TypeLiteral:\n                createTypeLiteralNode(node as import(\"typescript-4.2.4\").TypeLiteralNode);\n                return;\n            case ts.SyntaxKind.ArrayType:\n                createArrayTypeNode(node as import(\"typescript-4.2.4\").ArrayTypeNode);\n                return;\n            case ts.SyntaxKind.TupleType:\n                createTupleTypeNode(node as import(\"typescript-4.2.4\").TupleTypeNode);\n                return;\n            case ts.SyntaxKind.NamedTupleMember:\n                createNamedTupleMember(node as import(\"typescript-4.2.4\").NamedTupleMember);\n                return;\n            case ts.SyntaxKind.OptionalType:\n                createOptionalTypeNode(node as import(\"typescript-4.2.4\").OptionalTypeNode);\n                return;\n            case ts.SyntaxKind.RestType:\n                createRestTypeNode(node as import(\"typescript-4.2.4\").RestTypeNode);\n                return;\n            case ts.SyntaxKind.UnionType:\n                createUnionTypeNode(node as import(\"typescript-4.2.4\").UnionTypeNode);\n                return;\n            case ts.SyntaxKind.IntersectionType:\n                createIntersectionTypeNode(node as import(\"typescript-4.2.4\").IntersectionTypeNode);\n                return;\n            case ts.SyntaxKind.ConditionalType:\n                createConditionalTypeNode(node as import(\"typescript-4.2.4\").ConditionalTypeNode);\n                return;\n            case ts.SyntaxKind.InferType:\n                createInferTypeNode(node as import(\"typescript-4.2.4\").InferTypeNode);\n                return;\n            case ts.SyntaxKind.ImportType:\n                createImportTypeNode(node as import(\"typescript-4.2.4\").ImportTypeNode);\n                return;\n            case ts.SyntaxKind.ParenthesizedType:\n                createParenthesizedType(node as import(\"typescript-4.2.4\").ParenthesizedTypeNode);\n                return;\n            case ts.SyntaxKind.ThisType:\n                createThisTypeNode(node as import(\"typescript-4.2.4\").ThisTypeNode);\n                return;\n            case ts.SyntaxKind.TypeOperator:\n                createTypeOperatorNode(node as import(\"typescript-4.2.4\").TypeOperatorNode);\n                return;\n            case ts.SyntaxKind.IndexedAccessType:\n                createIndexedAccessTypeNode(node as import(\"typescript-4.2.4\").IndexedAccessTypeNode);\n                return;\n            case ts.SyntaxKind.MappedType:\n                createMappedTypeNode(node as import(\"typescript-4.2.4\").MappedTypeNode);\n                return;\n            case ts.SyntaxKind.LiteralType:\n                createLiteralTypeNode(node as import(\"typescript-4.2.4\").LiteralTypeNode);\n                return;\n            case ts.SyntaxKind.TemplateLiteralType:\n                createTemplateLiteralType(node as import(\"typescript-4.2.4\").TemplateLiteralTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectBindingPattern:\n                createObjectBindingPattern(node as import(\"typescript-4.2.4\").ObjectBindingPattern);\n                return;\n            case ts.SyntaxKind.ArrayBindingPattern:\n                createArrayBindingPattern(node as import(\"typescript-4.2.4\").ArrayBindingPattern);\n                return;\n            case ts.SyntaxKind.BindingElement:\n                createBindingElement(node as import(\"typescript-4.2.4\").BindingElement);\n                return;\n            case ts.SyntaxKind.ArrayLiteralExpression:\n                createArrayLiteralExpression(node as import(\"typescript-4.2.4\").ArrayLiteralExpression);\n                return;\n            case ts.SyntaxKind.ObjectLiteralExpression:\n                createObjectLiteralExpression(node as import(\"typescript-4.2.4\").ObjectLiteralExpression);\n                return;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                if (ts.isPropertyAccessChain(node)) {\n                    createPropertyAccessChain(node as import(\"typescript-4.2.4\").PropertyAccessChain);\n                    return;\n                }\n                if (ts.isPropertyAccessExpression(node)) {\n                    createPropertyAccessExpression(node as import(\"typescript-4.2.4\").PropertyAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.ElementAccessExpression:\n                if (ts.isElementAccessChain(node)) {\n                    createElementAccessChain(node as import(\"typescript-4.2.4\").ElementAccessChain);\n                    return;\n                }\n                if (ts.isElementAccessExpression(node)) {\n                    createElementAccessExpression(node as import(\"typescript-4.2.4\").ElementAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.CallExpression:\n                if (ts.isCallChain(node)) {\n                    createCallChain(node as import(\"typescript-4.2.4\").CallChain);\n                    return;\n                }\n                if (ts.isCallExpression(node)) {\n                    createCallExpression(node as import(\"typescript-4.2.4\").CallExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.NewExpression:\n                createNewExpression(node as import(\"typescript-4.2.4\").NewExpression);\n                return;\n            case ts.SyntaxKind.TaggedTemplateExpression:\n                createTaggedTemplateExpression(node as import(\"typescript-4.2.4\").TaggedTemplateExpression);\n                return;\n            case ts.SyntaxKind.TypeAssertionExpression:\n                createTypeAssertion(node as import(\"typescript-4.2.4\").TypeAssertion);\n                return;\n            case ts.SyntaxKind.ParenthesizedExpression:\n                createParenthesizedExpression(node as import(\"typescript-4.2.4\").ParenthesizedExpression);\n                return;\n            case ts.SyntaxKind.FunctionExpression:\n                createFunctionExpression(node as import(\"typescript-4.2.4\").FunctionExpression);\n                return;\n            case ts.SyntaxKind.ArrowFunction:\n                createArrowFunction(node as import(\"typescript-4.2.4\").ArrowFunction);\n                return;\n            case ts.SyntaxKind.DeleteExpression:\n                createDeleteExpression(node as import(\"typescript-4.2.4\").DeleteExpression);\n                return;\n            case ts.SyntaxKind.TypeOfExpression:\n                createTypeOfExpression(node as import(\"typescript-4.2.4\").TypeOfExpression);\n                return;\n            case ts.SyntaxKind.VoidExpression:\n                createVoidExpression(node as import(\"typescript-4.2.4\").VoidExpression);\n                return;\n            case ts.SyntaxKind.AwaitExpression:\n                createAwaitExpression(node as import(\"typescript-4.2.4\").AwaitExpression);\n                return;\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                createPrefixUnaryExpression(node as import(\"typescript-4.2.4\").PrefixUnaryExpression);\n                return;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n                createPostfixUnaryExpression(node as import(\"typescript-4.2.4\").PostfixUnaryExpression);\n                return;\n            case ts.SyntaxKind.BinaryExpression:\n                createBinaryExpression(node as import(\"typescript-4.2.4\").BinaryExpression);\n                return;\n            case ts.SyntaxKind.ConditionalExpression:\n                createConditionalExpression(node as import(\"typescript-4.2.4\").ConditionalExpression);\n                return;\n            case ts.SyntaxKind.TemplateExpression:\n                createTemplateExpression(node as import(\"typescript-4.2.4\").TemplateExpression);\n                return;\n            case ts.SyntaxKind.TemplateHead:\n                createTemplateHead(node as import(\"typescript-4.2.4\").TemplateHead);\n                return;\n            case ts.SyntaxKind.TemplateMiddle:\n                createTemplateMiddle(node as import(\"typescript-4.2.4\").TemplateMiddle);\n                return;\n            case ts.SyntaxKind.TemplateTail:\n                createTemplateTail(node as import(\"typescript-4.2.4\").TemplateTail);\n                return;\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                createNoSubstitutionTemplateLiteral(node as import(\"typescript-4.2.4\").NoSubstitutionTemplateLiteral);\n                return;\n            case ts.SyntaxKind.YieldExpression:\n                createYieldExpression(node as import(\"typescript-4.2.4\").YieldExpression);\n                return;\n            case ts.SyntaxKind.SpreadElement:\n                createSpreadElement(node as import(\"typescript-4.2.4\").SpreadElement);\n                return;\n            case ts.SyntaxKind.ClassExpression:\n                createClassExpression(node as import(\"typescript-4.2.4\").ClassExpression);\n                return;\n            case ts.SyntaxKind.OmittedExpression:\n                createOmittedExpression(node as import(\"typescript-4.2.4\").OmittedExpression);\n                return;\n            case ts.SyntaxKind.ExpressionWithTypeArguments:\n                createExpressionWithTypeArguments(node as import(\"typescript-4.2.4\").ExpressionWithTypeArguments);\n                return;\n            case ts.SyntaxKind.AsExpression:\n                createAsExpression(node as import(\"typescript-4.2.4\").AsExpression);\n                return;\n            case ts.SyntaxKind.NonNullExpression:\n                if (ts.isNonNullChain(node)) {\n                    createNonNullChain(node as import(\"typescript-4.2.4\").NonNullChain);\n                    return;\n                }\n                if (ts.isNonNullExpression(node)) {\n                    createNonNullExpression(node as import(\"typescript-4.2.4\").NonNullExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.MetaProperty:\n                createMetaProperty(node as import(\"typescript-4.2.4\").MetaProperty);\n                return;\n            case ts.SyntaxKind.TemplateSpan:\n                createTemplateSpan(node as import(\"typescript-4.2.4\").TemplateSpan);\n                return;\n            case ts.SyntaxKind.SemicolonClassElement:\n                createSemicolonClassElement(node as import(\"typescript-4.2.4\").SemicolonClassElement);\n                return;\n            case ts.SyntaxKind.Block:\n                createBlock(node as import(\"typescript-4.2.4\").Block);\n                return;\n            case ts.SyntaxKind.VariableStatement:\n                createVariableStatement(node as import(\"typescript-4.2.4\").VariableStatement);\n                return;\n            case ts.SyntaxKind.EmptyStatement:\n                createEmptyStatement(node as import(\"typescript-4.2.4\").EmptyStatement);\n                return;\n            case ts.SyntaxKind.ExpressionStatement:\n                createExpressionStatement(node as import(\"typescript-4.2.4\").ExpressionStatement);\n                return;\n            case ts.SyntaxKind.IfStatement:\n                createIfStatement(node as import(\"typescript-4.2.4\").IfStatement);\n                return;\n            case ts.SyntaxKind.DoStatement:\n                createDoStatement(node as import(\"typescript-4.2.4\").DoStatement);\n                return;\n            case ts.SyntaxKind.WhileStatement:\n                createWhileStatement(node as import(\"typescript-4.2.4\").WhileStatement);\n                return;\n            case ts.SyntaxKind.ForStatement:\n                createForStatement(node as import(\"typescript-4.2.4\").ForStatement);\n                return;\n            case ts.SyntaxKind.ForInStatement:\n                createForInStatement(node as import(\"typescript-4.2.4\").ForInStatement);\n                return;\n            case ts.SyntaxKind.ForOfStatement:\n                createForOfStatement(node as import(\"typescript-4.2.4\").ForOfStatement);\n                return;\n            case ts.SyntaxKind.ContinueStatement:\n                createContinueStatement(node as import(\"typescript-4.2.4\").ContinueStatement);\n                return;\n            case ts.SyntaxKind.BreakStatement:\n                createBreakStatement(node as import(\"typescript-4.2.4\").BreakStatement);\n                return;\n            case ts.SyntaxKind.ReturnStatement:\n                createReturnStatement(node as import(\"typescript-4.2.4\").ReturnStatement);\n                return;\n            case ts.SyntaxKind.WithStatement:\n                createWithStatement(node as import(\"typescript-4.2.4\").WithStatement);\n                return;\n            case ts.SyntaxKind.SwitchStatement:\n                createSwitchStatement(node as import(\"typescript-4.2.4\").SwitchStatement);\n                return;\n            case ts.SyntaxKind.LabeledStatement:\n                createLabeledStatement(node as import(\"typescript-4.2.4\").LabeledStatement);\n                return;\n            case ts.SyntaxKind.ThrowStatement:\n                createThrowStatement(node as import(\"typescript-4.2.4\").ThrowStatement);\n                return;\n            case ts.SyntaxKind.TryStatement:\n                createTryStatement(node as import(\"typescript-4.2.4\").TryStatement);\n                return;\n            case ts.SyntaxKind.DebuggerStatement:\n                createDebuggerStatement(node as import(\"typescript-4.2.4\").DebuggerStatement);\n                return;\n            case ts.SyntaxKind.VariableDeclaration:\n                createVariableDeclaration(node as import(\"typescript-4.2.4\").VariableDeclaration);\n                return;\n            case ts.SyntaxKind.VariableDeclarationList:\n                createVariableDeclarationList(node as import(\"typescript-4.2.4\").VariableDeclarationList);\n                return;\n            case ts.SyntaxKind.FunctionDeclaration:\n                createFunctionDeclaration(node as import(\"typescript-4.2.4\").FunctionDeclaration);\n                return;\n            case ts.SyntaxKind.ClassDeclaration:\n                createClassDeclaration(node as import(\"typescript-4.2.4\").ClassDeclaration);\n                return;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                createInterfaceDeclaration(node as import(\"typescript-4.2.4\").InterfaceDeclaration);\n                return;\n            case ts.SyntaxKind.TypeAliasDeclaration:\n                createTypeAliasDeclaration(node as import(\"typescript-4.2.4\").TypeAliasDeclaration);\n                return;\n            case ts.SyntaxKind.EnumDeclaration:\n                createEnumDeclaration(node as import(\"typescript-4.2.4\").EnumDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleDeclaration:\n                createModuleDeclaration(node as import(\"typescript-4.2.4\").ModuleDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleBlock:\n                createModuleBlock(node as import(\"typescript-4.2.4\").ModuleBlock);\n                return;\n            case ts.SyntaxKind.CaseBlock:\n                createCaseBlock(node as import(\"typescript-4.2.4\").CaseBlock);\n                return;\n            case ts.SyntaxKind.NamespaceExportDeclaration:\n                createNamespaceExportDeclaration(node as import(\"typescript-4.2.4\").NamespaceExportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n                createImportEqualsDeclaration(node as import(\"typescript-4.2.4\").ImportEqualsDeclaration);\n                return;\n            case ts.SyntaxKind.ImportDeclaration:\n                createImportDeclaration(node as import(\"typescript-4.2.4\").ImportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportClause:\n                createImportClause(node as import(\"typescript-4.2.4\").ImportClause);\n                return;\n            case ts.SyntaxKind.NamespaceImport:\n                createNamespaceImport(node as import(\"typescript-4.2.4\").NamespaceImport);\n                return;\n            case ts.SyntaxKind.NamespaceExport:\n                createNamespaceExport(node as import(\"typescript-4.2.4\").NamespaceExport);\n                return;\n            case ts.SyntaxKind.NamedImports:\n                createNamedImports(node as import(\"typescript-4.2.4\").NamedImports);\n                return;\n            case ts.SyntaxKind.ImportSpecifier:\n                createImportSpecifier(node as import(\"typescript-4.2.4\").ImportSpecifier);\n                return;\n            case ts.SyntaxKind.ExportAssignment:\n                createExportAssignment(node as import(\"typescript-4.2.4\").ExportAssignment);\n                return;\n            case ts.SyntaxKind.ExportDeclaration:\n                createExportDeclaration(node as import(\"typescript-4.2.4\").ExportDeclaration);\n                return;\n            case ts.SyntaxKind.NamedExports:\n                createNamedExports(node as import(\"typescript-4.2.4\").NamedExports);\n                return;\n            case ts.SyntaxKind.ExportSpecifier:\n                createExportSpecifier(node as import(\"typescript-4.2.4\").ExportSpecifier);\n                return;\n            case ts.SyntaxKind.ExternalModuleReference:\n                createExternalModuleReference(node as import(\"typescript-4.2.4\").ExternalModuleReference);\n                return;\n            case ts.SyntaxKind.JsxElement:\n                createJsxElement(node as import(\"typescript-4.2.4\").JsxElement);\n                return;\n            case ts.SyntaxKind.JsxSelfClosingElement:\n                createJsxSelfClosingElement(node as import(\"typescript-4.2.4\").JsxSelfClosingElement);\n                return;\n            case ts.SyntaxKind.JsxOpeningElement:\n                createJsxOpeningElement(node as import(\"typescript-4.2.4\").JsxOpeningElement);\n                return;\n            case ts.SyntaxKind.JsxClosingElement:\n                createJsxClosingElement(node as import(\"typescript-4.2.4\").JsxClosingElement);\n                return;\n            case ts.SyntaxKind.JsxFragment:\n                createJsxFragment(node as import(\"typescript-4.2.4\").JsxFragment);\n                return;\n            case ts.SyntaxKind.JsxText:\n                createJsxText(node as import(\"typescript-4.2.4\").JsxText);\n                return;\n            case ts.SyntaxKind.JsxOpeningFragment:\n                createJsxOpeningFragment(node as import(\"typescript-4.2.4\").JsxOpeningFragment);\n                return;\n            case ts.SyntaxKind.JsxClosingFragment:\n                createJsxJsxClosingFragment(node as import(\"typescript-4.2.4\").JsxClosingFragment);\n                return;\n            case ts.SyntaxKind.JsxAttribute:\n                createJsxAttribute(node as import(\"typescript-4.2.4\").JsxAttribute);\n                return;\n            case ts.SyntaxKind.JsxAttributes:\n                createJsxAttributes(node as import(\"typescript-4.2.4\").JsxAttributes);\n                return;\n            case ts.SyntaxKind.JsxSpreadAttribute:\n                createJsxSpreadAttribute(node as import(\"typescript-4.2.4\").JsxSpreadAttribute);\n                return;\n            case ts.SyntaxKind.JsxExpression:\n                createJsxExpression(node as import(\"typescript-4.2.4\").JsxExpression);\n                return;\n            case ts.SyntaxKind.CaseClause:\n                createCaseClause(node as import(\"typescript-4.2.4\").CaseClause);\n                return;\n            case ts.SyntaxKind.DefaultClause:\n                createDefaultClause(node as import(\"typescript-4.2.4\").DefaultClause);\n                return;\n            case ts.SyntaxKind.HeritageClause:\n                createHeritageClause(node as import(\"typescript-4.2.4\").HeritageClause);\n                return;\n            case ts.SyntaxKind.CatchClause:\n                createCatchClause(node as import(\"typescript-4.2.4\").CatchClause);\n                return;\n            case ts.SyntaxKind.PropertyAssignment:\n                createPropertyAssignment(node as import(\"typescript-4.2.4\").PropertyAssignment);\n                return;\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n                createShorthandPropertyAssignment(node as import(\"typescript-4.2.4\").ShorthandPropertyAssignment);\n                return;\n            case ts.SyntaxKind.SpreadAssignment:\n                createSpreadAssignment(node as import(\"typescript-4.2.4\").SpreadAssignment);\n                return;\n            case ts.SyntaxKind.EnumMember:\n                createEnumMember(node as import(\"typescript-4.2.4\").EnumMember);\n                return;\n            case ts.SyntaxKind.CommaListExpression:\n                createCommaListExpression(node as import(\"typescript-4.2.4\").CommaListExpression);\n                return;\n            default:\n                if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {\n                    writer.write(\"factory.createToken(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n                    return;\n                }\n                writer.write(\"/* Unhandled node kind: \").write(syntaxKindToName[node.kind]).write(\" */\")\n        }\n    }\n\n    function writeNodeTextForTypeNode(node: import(\"typescript-4.2.4\").TypeNode) {\n        if (node.kind >= ts.SyntaxKind.FirstKeyword && node.kind <= ts.SyntaxKind.LastKeyword) {\n            writer.write(\"factory.createKeywordTypeNode(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n        }\n        else {\n            writeNodeText(node);\n        }\n    }\n\n    function createNumericLiteral(node: import(\"typescript-4.2.4\").NumericLiteral) {\n        writer.write(\"factory.createNumericLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createBigIntLiteral(node: import(\"typescript-4.2.4\").BigIntLiteral) {\n        writer.write(\"factory.createBigIntLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createStringLiteral(node: import(\"typescript-4.2.4\").StringLiteral) {\n        writer.write(\"factory.createStringLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createRegularExpressionLiteral(node: import(\"typescript-4.2.4\").RegularExpressionLiteral) {\n        writer.write(\"factory.createRegularExpressionLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createIdentifier(node: import(\"typescript-4.2.4\").Identifier) {\n        writer.write(\"factory.createIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createPrivateIdentifier(node: import(\"typescript-4.2.4\").PrivateIdentifier) {\n        writer.write(\"factory.createPrivateIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createSuper(node: import(\"typescript-4.2.4\").SuperExpression) {\n        writer.write(\"factory.createSuper(\");\n        writer.write(\")\");\n    }\n\n    function createThis(node: import(\"typescript-4.2.4\").ThisExpression) {\n        writer.write(\"factory.createThis(\");\n        writer.write(\")\");\n    }\n\n    function createNull(node: import(\"typescript-4.2.4\").NullLiteral) {\n        writer.write(\"factory.createNull(\");\n        writer.write(\")\");\n    }\n\n    function createTrue(node: import(\"typescript-4.2.4\").TrueLiteral) {\n        writer.write(\"factory.createTrue(\");\n        writer.write(\")\");\n    }\n\n    function createFalse(node: import(\"typescript-4.2.4\").FalseLiteral) {\n        writer.write(\"factory.createFalse(\");\n        writer.write(\")\");\n    }\n\n    function createQualifiedName(node: import(\"typescript-4.2.4\").QualifiedName) {\n        writer.write(\"factory.createQualifiedName(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createComputedPropertyName(node: import(\"typescript-4.2.4\").ComputedPropertyName) {\n        writer.write(\"factory.createComputedPropertyName(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeParameterDeclaration(node: import(\"typescript-4.2.4\").TypeParameterDeclaration) {\n        writer.write(\"factory.createTypeParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.constraint == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.constraint)\n            }\n            writer.write(\",\").newLine();\n            if (node.default == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.default)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParameterDeclaration(node: import(\"typescript-4.2.4\").ParameterDeclaration) {\n        writer.write(\"factory.createParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDecorator(node: import(\"typescript-4.2.4\").Decorator) {\n        writer.write(\"factory.createDecorator(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPropertySignature(node: import(\"typescript-4.2.4\").PropertySignature) {\n        writer.write(\"factory.createPropertySignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyDeclaration(node: import(\"typescript-4.2.4\").PropertyDeclaration) {\n        writer.write(\"factory.createPropertyDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken != null)\n                writer.write(\"factory.createToken(ts.SyntaxKind.QuestionToken)\");\n            else if (node.exclamationToken != null)\n                writer.write(\"factory.createToken(ts.SyntaxKind.ExclamationToken)\");\n            else\n                writer.write(\"undefined\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodSignature(node: import(\"typescript-4.2.4\").MethodSignature) {\n        writer.write(\"factory.createMethodSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodDeclaration(node: import(\"typescript-4.2.4\").MethodDeclaration) {\n        writer.write(\"factory.createMethodDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorDeclaration(node: import(\"typescript-4.2.4\").ConstructorDeclaration) {\n        writer.write(\"factory.createConstructorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createGetAccessorDeclaration(node: import(\"typescript-4.2.4\").GetAccessorDeclaration) {\n        writer.write(\"factory.createGetAccessorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSetAccessorDeclaration(node: import(\"typescript-4.2.4\").SetAccessorDeclaration) {\n        writer.write(\"factory.createSetAccessorDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCallSignature(node: import(\"typescript-4.2.4\").CallSignatureDeclaration) {\n        writer.write(\"factory.createCallSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructSignature(node: import(\"typescript-4.2.4\").ConstructSignatureDeclaration) {\n        writer.write(\"factory.createConstructSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexSignature(node: import(\"typescript-4.2.4\").IndexSignatureDeclaration) {\n        writer.write(\"factory.createIndexSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateLiteralTypeSpan(node: import(\"typescript-4.2.4\").TemplateLiteralTypeSpan) {\n        writer.write(\"factory.createTemplateLiteralTypeSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createKeywordTypeNode(node: import(\"typescript-4.2.4\").KeywordTypeNode) {\n        writer.write(\"factory.createKeywordTypeNode(\");\n        writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.kind])\n        writer.write(\")\");\n    }\n\n    function createTypeReferenceNode(node: import(\"typescript-4.2.4\").TypeReferenceNode) {\n        writer.write(\"factory.createTypeReferenceNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.typeName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionTypeNode(node: import(\"typescript-4.2.4\").FunctionTypeNode) {\n        writer.write(\"factory.createFunctionTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorTypeNode(node: import(\"typescript-4.2.4\").ConstructorTypeNode) {\n        writer.write(\"factory.createConstructorTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeQueryNode(node: import(\"typescript-4.2.4\").TypeQueryNode) {\n        writer.write(\"factory.createTypeQueryNode(\");\n        writeNodeText(node.exprName)\n        writer.write(\")\");\n    }\n\n    function createTypeLiteralNode(node: import(\"typescript-4.2.4\").TypeLiteralNode) {\n        writer.write(\"factory.createTypeLiteralNode(\");\n        writer.write(\"[\");\n        if (node.members.length === 1) {\n            const item = node.members![0];\n            writeNodeText(item)\n        }\n        else if (node.members.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.members!.length; i++) {\n                    const item = node.members![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayTypeNode(node: import(\"typescript-4.2.4\").ArrayTypeNode) {\n        writer.write(\"factory.createArrayTypeNode(\");\n        writeNodeTextForTypeNode(node.elementType)\n        writer.write(\")\");\n    }\n\n    function createTupleTypeNode(node: import(\"typescript-4.2.4\").TupleTypeNode) {\n        writer.write(\"factory.createTupleTypeNode(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamedTupleMember(node: import(\"typescript-4.2.4\").NamedTupleMember) {\n        writer.write(\"factory.createNamedTupleMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createOptionalTypeNode(node: import(\"typescript-4.2.4\").OptionalTypeNode) {\n        writer.write(\"factory.createOptionalTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createRestTypeNode(node: import(\"typescript-4.2.4\").RestTypeNode) {\n        writer.write(\"factory.createRestTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createUnionTypeNode(node: import(\"typescript-4.2.4\").UnionTypeNode) {\n        writer.write(\"factory.createUnionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createIntersectionTypeNode(node: import(\"typescript-4.2.4\").IntersectionTypeNode) {\n        writer.write(\"factory.createIntersectionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createConditionalTypeNode(node: import(\"typescript-4.2.4\").ConditionalTypeNode) {\n        writer.write(\"factory.createConditionalTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.checkType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.extendsType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.trueType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.falseType)\n        });\n        writer.write(\")\");\n    }\n\n    function createInferTypeNode(node: import(\"typescript-4.2.4\").InferTypeNode) {\n        writer.write(\"factory.createInferTypeNode(\");\n        writeNodeText(node.typeParameter)\n        writer.write(\")\");\n    }\n\n    function createImportTypeNode(node: import(\"typescript-4.2.4\").ImportTypeNode) {\n        writer.write(\"factory.createImportTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.argument)\n            writer.write(\",\").newLine();\n            if (node.qualifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.qualifier)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOf.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedType(node: import(\"typescript-4.2.4\").ParenthesizedTypeNode) {\n        writer.write(\"factory.createParenthesizedType(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createThisTypeNode(node: import(\"typescript-4.2.4\").ThisTypeNode) {\n        writer.write(\"factory.createThisTypeNode(\");\n        writer.write(\")\");\n    }\n\n    function createTypeOperatorNode(node: import(\"typescript-4.2.4\").TypeOperatorNode) {\n        writer.write(\"factory.createTypeOperatorNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexedAccessTypeNode(node: import(\"typescript-4.2.4\").IndexedAccessTypeNode) {\n        writer.write(\"factory.createIndexedAccessTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.objectType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.indexType)\n        });\n        writer.write(\")\");\n    }\n\n    function createMappedTypeNode(node: import(\"typescript-4.2.4\").MappedTypeNode) {\n        writer.write(\"factory.createMappedTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.readonlyToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.readonlyToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.typeParameter)\n            writer.write(\",\").newLine();\n            if (node.nameType == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.nameType)\n            }\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createLiteralTypeNode(node: import(\"typescript-4.2.4\").LiteralTypeNode) {\n        writer.write(\"factory.createLiteralTypeNode(\");\n        writeNodeText(node.literal)\n        writer.write(\")\");\n    }\n\n    function createTemplateLiteralType(node: import(\"typescript-4.2.4\").TemplateLiteralTypeNode) {\n        writer.write(\"factory.createTemplateLiteralType(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectBindingPattern(node: import(\"typescript-4.2.4\").ObjectBindingPattern) {\n        writer.write(\"factory.createObjectBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayBindingPattern(node: import(\"typescript-4.2.4\").ArrayBindingPattern) {\n        writer.write(\"factory.createArrayBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createBindingElement(node: import(\"typescript-4.2.4\").BindingElement) {\n        writer.write(\"factory.createBindingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createArrayLiteralExpression(node: import(\"typescript-4.2.4\").ArrayLiteralExpression) {\n        writer.write(\"factory.createArrayLiteralExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.elements.length === 1) {\n                const item = node.elements![0];\n                writeNodeText(item)\n            }\n            else if (node.elements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.elements!.length; i++) {\n                        const item = node.elements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectLiteralExpression(node: import(\"typescript-4.2.4\").ObjectLiteralExpression) {\n        writer.write(\"factory.createObjectLiteralExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.properties.length === 1) {\n                const item = node.properties![0];\n                writeNodeText(item)\n            }\n            else if (node.properties.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.properties!.length; i++) {\n                        const item = node.properties![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessExpression(node: import(\"typescript-4.2.4\").PropertyAccessExpression) {\n        writer.write(\"factory.createPropertyAccessExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessChain(node: import(\"typescript-4.2.4\").PropertyAccessChain) {\n        writer.write(\"factory.createPropertyAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessExpression(node: import(\"typescript-4.2.4\").ElementAccessExpression) {\n        writer.write(\"factory.createElementAccessExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessChain(node: import(\"typescript-4.2.4\").ElementAccessChain) {\n        writer.write(\"factory.createElementAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createCallExpression(node: import(\"typescript-4.2.4\").CallExpression) {\n        writer.write(\"factory.createCallExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCallChain(node: import(\"typescript-4.2.4\").CallChain) {\n        writer.write(\"factory.createCallChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createNewExpression(node: import(\"typescript-4.2.4\").NewExpression) {\n        writer.write(\"factory.createNewExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.arguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.arguments.length === 1) {\n                    const item = node.arguments![0];\n                    writeNodeText(item)\n                }\n                else if (node.arguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.arguments!.length; i++) {\n                            const item = node.arguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTaggedTemplateExpression(node: import(\"typescript-4.2.4\").TaggedTemplateExpression) {\n        writer.write(\"factory.createTaggedTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tag)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.template)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAssertion(node: import(\"typescript-4.2.4\").TypeAssertion) {\n        writer.write(\"factory.createTypeAssertion(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedExpression(node: import(\"typescript-4.2.4\").ParenthesizedExpression) {\n        writer.write(\"factory.createParenthesizedExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createFunctionExpression(node: import(\"typescript-4.2.4\").FunctionExpression) {\n        writer.write(\"factory.createFunctionExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createArrowFunction(node: import(\"typescript-4.2.4\").ArrowFunction) {\n        writer.write(\"factory.createArrowFunction(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.equalsGreaterThanToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createDeleteExpression(node: import(\"typescript-4.2.4\").DeleteExpression) {\n        writer.write(\"factory.createDeleteExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeOfExpression(node: import(\"typescript-4.2.4\").TypeOfExpression) {\n        writer.write(\"factory.createTypeOfExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createVoidExpression(node: import(\"typescript-4.2.4\").VoidExpression) {\n        writer.write(\"factory.createVoidExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createAwaitExpression(node: import(\"typescript-4.2.4\").AwaitExpression) {\n        writer.write(\"factory.createAwaitExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPrefixUnaryExpression(node: import(\"typescript-4.2.4\").PrefixUnaryExpression) {\n        writer.write(\"factory.createPrefixUnaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeText(node.operand)\n        });\n        writer.write(\")\");\n    }\n\n    function createPostfixUnaryExpression(node: import(\"typescript-4.2.4\").PostfixUnaryExpression) {\n        writer.write(\"factory.createPostfixUnaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.operand)\n            writer.write(\",\").newLine();\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n        });\n        writer.write(\")\");\n    }\n\n    function createBinaryExpression(node: import(\"typescript-4.2.4\").BinaryExpression) {\n        writer.write(\"factory.createBinaryExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.operatorToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createConditionalExpression(node: import(\"typescript-4.2.4\").ConditionalExpression) {\n        writer.write(\"factory.createConditionalExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.condition)\n            writer.write(\",\").newLine();\n            writeNodeText(node.questionToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenTrue)\n            writer.write(\",\").newLine();\n            writeNodeText(node.colonToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenFalse)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateExpression(node: import(\"typescript-4.2.4\").TemplateExpression) {\n        writer.write(\"factory.createTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateHead(node: import(\"typescript-4.2.4\").TemplateHead) {\n        writer.write(\"factory.createTemplateHead(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateMiddle(node: import(\"typescript-4.2.4\").TemplateMiddle) {\n        writer.write(\"factory.createTemplateMiddle(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateTail(node: import(\"typescript-4.2.4\").TemplateTail) {\n        writer.write(\"factory.createTemplateTail(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNoSubstitutionTemplateLiteral(node: import(\"typescript-4.2.4\").NoSubstitutionTemplateLiteral) {\n        writer.write(\"factory.createNoSubstitutionTemplateLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createYieldExpression(node: import(\"typescript-4.2.4\").YieldExpression) {\n        writer.write(\"factory.createYieldExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadElement(node: import(\"typescript-4.2.4\").SpreadElement) {\n        writer.write(\"factory.createSpreadElement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createClassExpression(node: import(\"typescript-4.2.4\").ClassExpression) {\n        writer.write(\"factory.createClassExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createOmittedExpression(node: import(\"typescript-4.2.4\").OmittedExpression) {\n        writer.write(\"factory.createOmittedExpression(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionWithTypeArguments(node: import(\"typescript-4.2.4\").ExpressionWithTypeArguments) {\n        writer.write(\"factory.createExpressionWithTypeArguments(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createAsExpression(node: import(\"typescript-4.2.4\").AsExpression) {\n        writer.write(\"factory.createAsExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createNonNullExpression(node: import(\"typescript-4.2.4\").NonNullExpression) {\n        writer.write(\"factory.createNonNullExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createNonNullChain(node: import(\"typescript-4.2.4\").NonNullChain) {\n        writer.write(\"factory.createNonNullChain(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createMetaProperty(node: import(\"typescript-4.2.4\").MetaProperty) {\n        writer.write(\"factory.createMetaProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.keywordToken])\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateSpan(node: import(\"typescript-4.2.4\").TemplateSpan) {\n        writer.write(\"factory.createTemplateSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createSemicolonClassElement(node: import(\"typescript-4.2.4\").SemicolonClassElement) {\n        writer.write(\"factory.createSemicolonClassElement(\");\n        writer.write(\")\");\n    }\n\n    function createBlock(node: import(\"typescript-4.2.4\").Block) {\n        writer.write(\"factory.createBlock(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableStatement(node: import(\"typescript-4.2.4\").VariableStatement) {\n        writer.write(\"factory.createVariableStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.declarationList)\n        });\n        writer.write(\")\");\n    }\n\n    function createEmptyStatement(node: import(\"typescript-4.2.4\").EmptyStatement) {\n        writer.write(\"factory.createEmptyStatement(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionStatement(node: import(\"typescript-4.2.4\").ExpressionStatement) {\n        writer.write(\"factory.createExpressionStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createIfStatement(node: import(\"typescript-4.2.4\").IfStatement) {\n        writer.write(\"factory.createIfStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.thenStatement)\n            writer.write(\",\").newLine();\n            if (node.elseStatement == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.elseStatement)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDoStatement(node: import(\"typescript-4.2.4\").DoStatement) {\n        writer.write(\"factory.createDoStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.statement)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createWhileStatement(node: import(\"typescript-4.2.4\").WhileStatement) {\n        writer.write(\"factory.createWhileStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForStatement(node: import(\"typescript-4.2.4\").ForStatement) {\n        writer.write(\"factory.createForStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n            writer.write(\",\").newLine();\n            if (node.condition == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.condition)\n            }\n            writer.write(\",\").newLine();\n            if (node.incrementor == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.incrementor)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForInStatement(node: import(\"typescript-4.2.4\").ForInStatement) {\n        writer.write(\"factory.createForInStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForOfStatement(node: import(\"typescript-4.2.4\").ForOfStatement) {\n        writer.write(\"factory.createForOfStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.awaitModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.awaitModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createContinueStatement(node: import(\"typescript-4.2.4\").ContinueStatement) {\n        writer.write(\"factory.createContinueStatement(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createBreakStatement(node: import(\"typescript-4.2.4\").BreakStatement) {\n        writer.write(\"factory.createBreakStatement(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createReturnStatement(node: import(\"typescript-4.2.4\").ReturnStatement) {\n        writer.write(\"factory.createReturnStatement(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createWithStatement(node: import(\"typescript-4.2.4\").WithStatement) {\n        writer.write(\"factory.createWithStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createSwitchStatement(node: import(\"typescript-4.2.4\").SwitchStatement) {\n        writer.write(\"factory.createSwitchStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.caseBlock)\n        });\n        writer.write(\")\");\n    }\n\n    function createLabeledStatement(node: import(\"typescript-4.2.4\").LabeledStatement) {\n        writer.write(\"factory.createLabeledStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.label)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createThrowStatement(node: import(\"typescript-4.2.4\").ThrowStatement) {\n        writer.write(\"factory.createThrowStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTryStatement(node: import(\"typescript-4.2.4\").TryStatement) {\n        writer.write(\"factory.createTryStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tryBlock)\n            writer.write(\",\").newLine();\n            if (node.catchClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.catchClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.finallyBlock == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.finallyBlock)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDebuggerStatement(node: import(\"typescript-4.2.4\").DebuggerStatement) {\n        writer.write(\"factory.createDebuggerStatement(\");\n        writer.write(\")\");\n    }\n\n    function createVariableDeclaration(node: import(\"typescript-4.2.4\").VariableDeclaration) {\n        writer.write(\"factory.createVariableDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.exclamationToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exclamationToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableDeclarationList(node: import(\"typescript-4.2.4\").VariableDeclarationList) {\n        writer.write(\"factory.createVariableDeclarationList(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.declarations.length === 1) {\n                const item = node.declarations![0];\n                writeNodeText(item)\n            }\n            else if (node.declarations.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.declarations!.length; i++) {\n                        const item = node.declarations![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionDeclaration(node: import(\"typescript-4.2.4\").FunctionDeclaration) {\n        writer.write(\"factory.createFunctionDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createClassDeclaration(node: import(\"typescript-4.2.4\").ClassDeclaration) {\n        writer.write(\"factory.createClassDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createInterfaceDeclaration(node: import(\"typescript-4.2.4\").InterfaceDeclaration) {\n        writer.write(\"factory.createInterfaceDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAliasDeclaration(node: import(\"typescript-4.2.4\").TypeAliasDeclaration) {\n        writer.write(\"factory.createTypeAliasDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createEnumDeclaration(node: import(\"typescript-4.2.4\").EnumDeclaration) {\n        writer.write(\"factory.createEnumDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleDeclaration(node: import(\"typescript-4.2.4\").ModuleDeclaration) {\n        writer.write(\"factory.createModuleDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleBlock(node: import(\"typescript-4.2.4\").ModuleBlock) {\n        writer.write(\"factory.createModuleBlock(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createCaseBlock(node: import(\"typescript-4.2.4\").CaseBlock) {\n        writer.write(\"factory.createCaseBlock(\");\n        writer.write(\"[\");\n        if (node.clauses.length === 1) {\n            const item = node.clauses![0];\n            writeNodeText(item)\n        }\n        else if (node.clauses.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.clauses!.length; i++) {\n                    const item = node.clauses![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamespaceExportDeclaration(node: import(\"typescript-4.2.4\").NamespaceExportDeclaration) {\n        writer.write(\"factory.createNamespaceExportDeclaration(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createImportEqualsDeclaration(node: import(\"typescript-4.2.4\").ImportEqualsDeclaration) {\n        writer.write(\"factory.createImportEqualsDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOnly.toString())\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleReference)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportDeclaration(node: import(\"typescript-4.2.4\").ImportDeclaration) {\n        writer.write(\"factory.createImportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.importClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.importClause)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleSpecifier)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportClause(node: import(\"typescript-4.2.4\").ImportClause) {\n        writer.write(\"factory.createImportClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(node.isTypeOnly.toString())\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.namedBindings == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.namedBindings)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamespaceImport(node: import(\"typescript-4.2.4\").NamespaceImport) {\n        writer.write(\"factory.createNamespaceImport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamespaceExport(node: import(\"typescript-4.2.4\").NamespaceExport) {\n        writer.write(\"factory.createNamespaceExport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamedImports(node: import(\"typescript-4.2.4\").NamedImports) {\n        writer.write(\"factory.createNamedImports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createImportSpecifier(node: import(\"typescript-4.2.4\").ImportSpecifier) {\n        writer.write(\"factory.createImportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportAssignment(node: import(\"typescript-4.2.4\").ExportAssignment) {\n        writer.write(\"factory.createExportAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isExportEquals == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isExportEquals.toString())\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportDeclaration(node: import(\"typescript-4.2.4\").ExportDeclaration) {\n        writer.write(\"factory.createExportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"factory.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOnly.toString())\n            writer.write(\",\").newLine();\n            if (node.exportClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exportClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.moduleSpecifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.moduleSpecifier)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamedExports(node: import(\"typescript-4.2.4\").NamedExports) {\n        writer.write(\"factory.createNamedExports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createExportSpecifier(node: import(\"typescript-4.2.4\").ExportSpecifier) {\n        writer.write(\"factory.createExportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExternalModuleReference(node: import(\"typescript-4.2.4\").ExternalModuleReference) {\n        writer.write(\"factory.createExternalModuleReference(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxElement(node: import(\"typescript-4.2.4\").JsxElement) {\n        writer.write(\"factory.createJsxElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingElement)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingElement)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxSelfClosingElement(node: import(\"typescript-4.2.4\").JsxSelfClosingElement) {\n        writer.write(\"factory.createJsxSelfClosingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningElement(node: import(\"typescript-4.2.4\").JsxOpeningElement) {\n        writer.write(\"factory.createJsxOpeningElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxClosingElement(node: import(\"typescript-4.2.4\").JsxClosingElement) {\n        writer.write(\"factory.createJsxClosingElement(\");\n        writeNodeText(node.tagName)\n        writer.write(\")\");\n    }\n\n    function createJsxFragment(node: import(\"typescript-4.2.4\").JsxFragment) {\n        writer.write(\"factory.createJsxFragment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingFragment)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingFragment)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxText(node: import(\"typescript-4.2.4\").JsxText) {\n        writer.write(\"factory.createJsxText(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            writer.write(node.containsOnlyTriviaWhiteSpaces.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningFragment(node: import(\"typescript-4.2.4\").JsxOpeningFragment) {\n        writer.write(\"factory.createJsxOpeningFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxJsxClosingFragment(node: import(\"typescript-4.2.4\").JsxClosingFragment) {\n        writer.write(\"factory.createJsxJsxClosingFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxAttribute(node: import(\"typescript-4.2.4\").JsxAttribute) {\n        writer.write(\"factory.createJsxAttribute(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxAttributes(node: import(\"typescript-4.2.4\").JsxAttributes) {\n        writer.write(\"factory.createJsxAttributes(\");\n        writer.write(\"[\");\n        if (node.properties.length === 1) {\n            const item = node.properties![0];\n            writeNodeText(item)\n        }\n        else if (node.properties.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.properties!.length; i++) {\n                    const item = node.properties![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createJsxSpreadAttribute(node: import(\"typescript-4.2.4\").JsxSpreadAttribute) {\n        writer.write(\"factory.createJsxSpreadAttribute(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxExpression(node: import(\"typescript-4.2.4\").JsxExpression) {\n        writer.write(\"factory.createJsxExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCaseClause(node: import(\"typescript-4.2.4\").CaseClause) {\n        writer.write(\"factory.createCaseClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createDefaultClause(node: import(\"typescript-4.2.4\").DefaultClause) {\n        writer.write(\"factory.createDefaultClause(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createHeritageClause(node: import(\"typescript-4.2.4\").HeritageClause) {\n        writer.write(\"factory.createHeritageClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.token])\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.types.length === 1) {\n                const item = node.types![0];\n                writeNodeText(item)\n            }\n            else if (node.types.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.types!.length; i++) {\n                        const item = node.types![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCatchClause(node: import(\"typescript-4.2.4\").CatchClause) {\n        writer.write(\"factory.createCatchClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.variableDeclaration == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.variableDeclaration)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.block)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAssignment(node: import(\"typescript-4.2.4\").PropertyAssignment) {\n        writer.write(\"factory.createPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n        });\n        writer.write(\")\");\n    }\n\n    function createShorthandPropertyAssignment(node: import(\"typescript-4.2.4\").ShorthandPropertyAssignment) {\n        writer.write(\"factory.createShorthandPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.objectAssignmentInitializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.objectAssignmentInitializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadAssignment(node: import(\"typescript-4.2.4\").SpreadAssignment) {\n        writer.write(\"factory.createSpreadAssignment(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createEnumMember(node: import(\"typescript-4.2.4\").EnumMember) {\n        writer.write(\"factory.createEnumMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCommaListExpression(node: import(\"typescript-4.2.4\").CommaListExpression) {\n        writer.write(\"factory.createCommaListExpression(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createSyntaxKindToNameMap() {\n        const map: { [kind: number]: string } = {};\n        for (const name of Object.keys(ts.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n            const value = (ts.SyntaxKind as any)[name] as number;\n            if (map[value] == null)\n                map[value] = name;\n        }\n        return map;\n    }\n\n    function getNodeFlagValues(value: number) {\n        // ignore the BlockScoped node flag\n        return getFlagValuesAsString(ts.NodeFlags, \"ts.NodeFlags\", value || 0, \"None\", getFlagValues(ts.NodeFlags, value).filter(v => v !== ts.NodeFlags.BlockScoped));\n    }\n\n    function getFlagValuesAsString(enumObj: any, enumName: string, value: number, defaultName: string, flagValues?: number[]) {\n        flagValues = flagValues || getFlagValues(enumObj, value);\n        const members: string[] = [];\n        for (const flagValue of flagValues)\n            members.push(enumName + \".\" + enumObj[flagValue]);\n        if (members.length === 0)\n            members.push(enumName + \".\" + defaultName);\n        return members.join(\" | \");\n    }\n\n    function getFlagValues(enumObj: any, value: number) {\n        const members: number[] = [];\n        for (const prop in enumObj) {\n            if (typeof enumObj[prop] === \"string\")\n                continue;\n            if ((enumObj[prop] & value) !== 0)\n                members.push(enumObj[prop]);\n        }\n        return members;\n    }\n}\n"],"sourceRoot":""}