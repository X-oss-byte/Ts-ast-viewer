{"version":3,"sources":["resources/factoryCode/typescript-3.8.3.ts"],"names":["generateFactoryCode","ts","initialNode","writer","CodeBlockWriter","newLine","indentNumberOfSpaces","syntaxKindToName","map","Object","keys","SyntaxKind","filter","k","isNaN","parseInt","name","value","createSyntaxKindToNameMap","isSourceFile","write","statements","length","indent","i","statement","writeNodeText","newLineIfLastNot","toString","node","kind","NumericLiteral","quote","text","createNumericLiteral","BigIntLiteral","createBigIntLiteral","StringLiteral","createStringLiteral","RegularExpressionLiteral","createRegularExpressionLiteral","Identifier","createIdentifier","PrivateIdentifier","createPrivateIdentifier","SuperKeyword","ThisKeyword","NullKeyword","TrueKeyword","FalseKeyword","QualifiedName","left","right","createQualifiedName","ComputedPropertyName","expression","createComputedPropertyName","TypeParameter","constraint","writeNodeTextForTypeNode","default","createTypeParameterDeclaration","Parameter","decorators","item","modifiers","dotDotDotToken","questionToken","type","initializer","createParameter","Decorator","createDecorator","PropertySignature","createPropertySignature","PropertyDeclaration","exclamationToken","createProperty","MethodSignature","typeParameters","parameters","createMethodSignature","MethodDeclaration","asteriskToken","body","createMethod","Constructor","createConstructor","GetAccessor","createGetAccessor","SetAccessor","createSetAccessor","CallSignature","createCallSignature","ConstructSignature","createConstructSignature","IndexSignature","createIndexSignature","AnyKeyword","BooleanKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","BigIntKeyword","createKeywordTypeNode","TypePredicate","assertsModifier","parameterName","createTypePredicateNodeWithModifier","TypeReference","typeName","typeArguments","createTypeReferenceNode","FunctionType","createFunctionTypeNode","ConstructorType","createConstructorTypeNode","TypeQuery","exprName","createTypeQueryNode","TypeLiteral","members","createTypeLiteralNode","ArrayType","elementType","createArrayTypeNode","TupleType","elementTypes","createTupleTypeNode","OptionalType","createOptionalTypeNode","RestType","createRestTypeNode","UnionType","types","createUnionTypeNode","IntersectionType","createIntersectionTypeNode","ConditionalType","checkType","extendsType","trueType","falseType","createConditionalTypeNode","InferType","typeParameter","createInferTypeNode","ImportType","argument","qualifier","isTypeOf","createImportTypeNode","ParenthesizedType","createParenthesizedType","ThisType","TypeOperator","createTypeOperatorNode","IndexedAccessType","objectType","indexType","createIndexedAccessTypeNode","MappedType","readonlyToken","createMappedTypeNode","LiteralType","literal","createLiteralTypeNode","ObjectBindingPattern","elements","createObjectBindingPattern","ArrayBindingPattern","createArrayBindingPattern","BindingElement","propertyName","createBindingElement","ArrayLiteralExpression","multiLine","createArrayLiteral","ObjectLiteralExpression","properties","createObjectLiteral","PropertyAccessExpression","isPropertyAccessChain","questionDotToken","createPropertyAccessChain","isPropertyAccessExpression","createPropertyAccess","Error","getText","ElementAccessExpression","isElementAccessChain","argumentExpression","createElementAccessChain","isElementAccessExpression","createElementAccess","CallExpression","isCallChain","arguments","createCallChain","isCallExpression","createCall","NewExpression","createNew","TaggedTemplateExpression","tag","template","createTaggedTemplate","TypeAssertionExpression","createTypeAssertion","ParenthesizedExpression","createParen","FunctionExpression","createFunctionExpression","ArrowFunction","equalsGreaterThanToken","createArrowFunction","DeleteExpression","createDelete","TypeOfExpression","createTypeOf","VoidExpression","createVoid","AwaitExpression","createAwait","PrefixUnaryExpression","operator","operand","createPrefix","PostfixUnaryExpression","createPostfix","BinaryExpression","operatorToken","createBinary","ConditionalExpression","condition","whenTrue","whenFalse","createConditional","TemplateExpression","head","templateSpans","createTemplateExpression","TemplateHead","rawText","createTemplateHead","TemplateMiddle","createTemplateMiddle","TemplateTail","createTemplateTail","NoSubstitutionTemplateLiteral","createNoSubstitutionTemplateLiteral","YieldExpression","createYield","SpreadElement","createSpread","ClassExpression","heritageClauses","createClassExpression","OmittedExpression","ExpressionWithTypeArguments","createExpressionWithTypeArguments","AsExpression","createAsExpression","NonNullExpression","createNonNullExpression","MetaProperty","keywordToken","createMetaProperty","TemplateSpan","createTemplateSpan","SemicolonClassElement","Block","createBlock","VariableStatement","declarationList","createVariableStatement","EmptyStatement","ExpressionStatement","createExpressionStatement","IfStatement","thenStatement","elseStatement","createIf","DoStatement","createDo","WhileStatement","createWhile","ForStatement","incrementor","createFor","ForInStatement","createForIn","ForOfStatement","awaitModifier","createForOf","ContinueStatement","label","createContinue","BreakStatement","createBreak","ReturnStatement","createReturn","WithStatement","createWith","SwitchStatement","caseBlock","createSwitch","LabeledStatement","createLabel","ThrowStatement","createThrow","TryStatement","tryBlock","catchClause","finallyBlock","createTry","DebuggerStatement","VariableDeclaration","createVariableDeclaration","VariableDeclarationList","declarations","getNodeFlagValues","flags","createVariableDeclarationList","FunctionDeclaration","createFunctionDeclaration","ClassDeclaration","createClassDeclaration","InterfaceDeclaration","createInterfaceDeclaration","TypeAliasDeclaration","createTypeAliasDeclaration","EnumDeclaration","createEnumDeclaration","ModuleDeclaration","createModuleDeclaration","ModuleBlock","createModuleBlock","CaseBlock","clauses","createCaseBlock","NamespaceExportDeclaration","createNamespaceExportDeclaration","ImportEqualsDeclaration","moduleReference","createImportEqualsDeclaration","ImportDeclaration","importClause","moduleSpecifier","createImportDeclaration","ImportClause","namedBindings","isTypeOnly","createImportClause","NamespaceImport","createNamespaceImport","NamespaceExport","createNamespaceExport","NamedImports","createNamedImports","ImportSpecifier","createImportSpecifier","ExportAssignment","isExportEquals","createExportAssignment","ExportDeclaration","exportClause","createExportDeclaration","NamedExports","createNamedExports","ExportSpecifier","createExportSpecifier","ExternalModuleReference","createExternalModuleReference","JsxElement","openingElement","children","closingElement","createJsxElement","JsxSelfClosingElement","tagName","attributes","createJsxSelfClosingElement","JsxOpeningElement","createJsxOpeningElement","JsxClosingElement","createJsxClosingElement","JsxFragment","openingFragment","closingFragment","createJsxFragment","JsxText","containsOnlyTriviaWhiteSpaces","createJsxText","JsxOpeningFragment","JsxClosingFragment","JsxAttribute","createJsxAttribute","JsxAttributes","createJsxAttributes","JsxSpreadAttribute","createJsxSpreadAttribute","JsxExpression","createJsxExpression","CaseClause","createCaseClause","DefaultClause","createDefaultClause","HeritageClause","token","createHeritageClause","CatchClause","variableDeclaration","block","createCatchClause","PropertyAssignment","createPropertyAssignment","ShorthandPropertyAssignment","objectAssignmentInitializer","createShorthandPropertyAssignment","SpreadAssignment","createSpreadAssignment","EnumMember","createEnumMember","CommaListExpression","createCommaList","FirstToken","LastToken","FirstKeyword","LastKeyword","enumObj","enumName","defaultName","flagValues","getFlagValues","flagValue","push","join","getFlagValuesAsString","NodeFlags","v","BlockScoped","prop"],"mappings":"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","file":"static/js/41.401e4709.chunk.js","sourcesContent":["import CodeBlockWriter from \"code-block-writer\";\n\nexport function generateFactoryCode(ts: typeof import(\"typescript-3.8.3\"), initialNode: import(\"typescript-3.8.3\").Node) {\n    const writer = new CodeBlockWriter({ newLine: \"\\n\", indentNumberOfSpaces: 2 });\n    const syntaxKindToName = createSyntaxKindToNameMap();\n\n    if (ts.isSourceFile(initialNode)) {\n        writer.write(\"[\");\n        if (initialNode.statements.length > 0) {\n            writer.indent(() => {\n                for (let i = 0; i < initialNode.statements.length; i++) {\n                    const statement = initialNode.statements[i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(statement);\n                }\n            }).newLine();\n        }\n        writer.write(\"];\");\n    }\n    else {\n        writeNodeText(initialNode);\n    }\n    writer.newLineIfLastNot();\n\n    return writer.toString();\n\n    function writeNodeText(node: import(\"typescript-3.8.3\").Node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NumericLiteral:\n                createNumericLiteral(node as import(\"typescript-3.8.3\").NumericLiteral);\n                return;\n            case ts.SyntaxKind.BigIntLiteral:\n                createBigIntLiteral(node as import(\"typescript-3.8.3\").BigIntLiteral);\n                return;\n            case ts.SyntaxKind.StringLiteral:\n                createStringLiteral(node as import(\"typescript-3.8.3\").StringLiteral);\n                return;\n            case ts.SyntaxKind.RegularExpressionLiteral:\n                createRegularExpressionLiteral(node as import(\"typescript-3.8.3\").RegularExpressionLiteral);\n                return;\n            case ts.SyntaxKind.Identifier:\n                createIdentifier(node as import(\"typescript-3.8.3\").Identifier);\n                return;\n            case ts.SyntaxKind.PrivateIdentifier:\n                createPrivateIdentifier(node as import(\"typescript-3.8.3\").PrivateIdentifier);\n                return;\n            case ts.SyntaxKind.SuperKeyword:\n                createSuper(node as import(\"typescript-3.8.3\").SuperExpression);\n                return;\n            case ts.SyntaxKind.ThisKeyword:\n                createThis(node as import(\"typescript-3.8.3\").ThisExpression);\n                return;\n            case ts.SyntaxKind.NullKeyword:\n                createNull(node as import(\"typescript-3.8.3\").NullLiteral);\n                return;\n            case ts.SyntaxKind.TrueKeyword:\n                createTrue(node as import(\"typescript-3.8.3\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.FalseKeyword:\n                createFalse(node as import(\"typescript-3.8.3\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.QualifiedName:\n                createQualifiedName(node as import(\"typescript-3.8.3\").QualifiedName);\n                return;\n            case ts.SyntaxKind.ComputedPropertyName:\n                createComputedPropertyName(node as import(\"typescript-3.8.3\").ComputedPropertyName);\n                return;\n            case ts.SyntaxKind.TypeParameter:\n                createTypeParameterDeclaration(node as import(\"typescript-3.8.3\").TypeParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Parameter:\n                createParameter(node as import(\"typescript-3.8.3\").ParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Decorator:\n                createDecorator(node as import(\"typescript-3.8.3\").Decorator);\n                return;\n            case ts.SyntaxKind.PropertySignature:\n                createPropertySignature(node as import(\"typescript-3.8.3\").PropertySignature);\n                return;\n            case ts.SyntaxKind.PropertyDeclaration:\n                createProperty(node as import(\"typescript-3.8.3\").PropertyDeclaration);\n                return;\n            case ts.SyntaxKind.MethodSignature:\n                createMethodSignature(node as import(\"typescript-3.8.3\").MethodSignature);\n                return;\n            case ts.SyntaxKind.MethodDeclaration:\n                createMethod(node as import(\"typescript-3.8.3\").MethodDeclaration);\n                return;\n            case ts.SyntaxKind.Constructor:\n                createConstructor(node as import(\"typescript-3.8.3\").ConstructorDeclaration);\n                return;\n            case ts.SyntaxKind.GetAccessor:\n                createGetAccessor(node as import(\"typescript-3.8.3\").GetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.SetAccessor:\n                createSetAccessor(node as import(\"typescript-3.8.3\").SetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.CallSignature:\n                createCallSignature(node as import(\"typescript-3.8.3\").CallSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.ConstructSignature:\n                createConstructSignature(node as import(\"typescript-3.8.3\").ConstructSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.IndexSignature:\n                createIndexSignature(node as import(\"typescript-3.8.3\").IndexSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.AnyKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BooleanKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NeverKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NumberKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.StringKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.SymbolKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UndefinedKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UnknownKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BigIntKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.8.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.TypePredicate:\n                createTypePredicateNodeWithModifier(node as import(\"typescript-3.8.3\").TypePredicateNode);\n                return;\n            case ts.SyntaxKind.TypeReference:\n                createTypeReferenceNode(node as import(\"typescript-3.8.3\").TypeReferenceNode);\n                return;\n            case ts.SyntaxKind.FunctionType:\n                createFunctionTypeNode(node as import(\"typescript-3.8.3\").FunctionTypeNode);\n                return;\n            case ts.SyntaxKind.ConstructorType:\n                createConstructorTypeNode(node as import(\"typescript-3.8.3\").ConstructorTypeNode);\n                return;\n            case ts.SyntaxKind.TypeQuery:\n                createTypeQueryNode(node as import(\"typescript-3.8.3\").TypeQueryNode);\n                return;\n            case ts.SyntaxKind.TypeLiteral:\n                createTypeLiteralNode(node as import(\"typescript-3.8.3\").TypeLiteralNode);\n                return;\n            case ts.SyntaxKind.ArrayType:\n                createArrayTypeNode(node as import(\"typescript-3.8.3\").ArrayTypeNode);\n                return;\n            case ts.SyntaxKind.TupleType:\n                createTupleTypeNode(node as import(\"typescript-3.8.3\").TupleTypeNode);\n                return;\n            case ts.SyntaxKind.OptionalType:\n                createOptionalTypeNode(node as import(\"typescript-3.8.3\").OptionalTypeNode);\n                return;\n            case ts.SyntaxKind.RestType:\n                createRestTypeNode(node as import(\"typescript-3.8.3\").RestTypeNode);\n                return;\n            case ts.SyntaxKind.UnionType:\n                createUnionTypeNode(node as import(\"typescript-3.8.3\").UnionTypeNode);\n                return;\n            case ts.SyntaxKind.IntersectionType:\n                createIntersectionTypeNode(node as import(\"typescript-3.8.3\").IntersectionTypeNode);\n                return;\n            case ts.SyntaxKind.ConditionalType:\n                createConditionalTypeNode(node as import(\"typescript-3.8.3\").ConditionalTypeNode);\n                return;\n            case ts.SyntaxKind.InferType:\n                createInferTypeNode(node as import(\"typescript-3.8.3\").InferTypeNode);\n                return;\n            case ts.SyntaxKind.ImportType:\n                createImportTypeNode(node as import(\"typescript-3.8.3\").ImportTypeNode);\n                return;\n            case ts.SyntaxKind.ParenthesizedType:\n                createParenthesizedType(node as import(\"typescript-3.8.3\").ParenthesizedTypeNode);\n                return;\n            case ts.SyntaxKind.ThisType:\n                createThisTypeNode(node as import(\"typescript-3.8.3\").ThisTypeNode);\n                return;\n            case ts.SyntaxKind.TypeOperator:\n                createTypeOperatorNode(node as import(\"typescript-3.8.3\").TypeOperatorNode);\n                return;\n            case ts.SyntaxKind.IndexedAccessType:\n                createIndexedAccessTypeNode(node as import(\"typescript-3.8.3\").IndexedAccessTypeNode);\n                return;\n            case ts.SyntaxKind.MappedType:\n                createMappedTypeNode(node as import(\"typescript-3.8.3\").MappedTypeNode);\n                return;\n            case ts.SyntaxKind.LiteralType:\n                createLiteralTypeNode(node as import(\"typescript-3.8.3\").LiteralTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectBindingPattern:\n                createObjectBindingPattern(node as import(\"typescript-3.8.3\").ObjectBindingPattern);\n                return;\n            case ts.SyntaxKind.ArrayBindingPattern:\n                createArrayBindingPattern(node as import(\"typescript-3.8.3\").ArrayBindingPattern);\n                return;\n            case ts.SyntaxKind.BindingElement:\n                createBindingElement(node as import(\"typescript-3.8.3\").BindingElement);\n                return;\n            case ts.SyntaxKind.ArrayLiteralExpression:\n                createArrayLiteral(node as import(\"typescript-3.8.3\").ArrayLiteralExpression);\n                return;\n            case ts.SyntaxKind.ObjectLiteralExpression:\n                createObjectLiteral(node as import(\"typescript-3.8.3\").ObjectLiteralExpression);\n                return;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                if (ts.isPropertyAccessChain(node)) {\n                    createPropertyAccessChain(node as import(\"typescript-3.8.3\").PropertyAccessChain);\n                    return;\n                }\n                if (ts.isPropertyAccessExpression(node)) {\n                    createPropertyAccess(node as import(\"typescript-3.8.3\").PropertyAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.ElementAccessExpression:\n                if (ts.isElementAccessChain(node)) {\n                    createElementAccessChain(node as import(\"typescript-3.8.3\").ElementAccessChain);\n                    return;\n                }\n                if (ts.isElementAccessExpression(node)) {\n                    createElementAccess(node as import(\"typescript-3.8.3\").ElementAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.CallExpression:\n                if (ts.isCallChain(node)) {\n                    createCallChain(node as import(\"typescript-3.8.3\").CallChain);\n                    return;\n                }\n                if (ts.isCallExpression(node)) {\n                    createCall(node as import(\"typescript-3.8.3\").CallExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.NewExpression:\n                createNew(node as import(\"typescript-3.8.3\").NewExpression);\n                return;\n            case ts.SyntaxKind.TaggedTemplateExpression:\n                createTaggedTemplate(node as import(\"typescript-3.8.3\").TaggedTemplateExpression);\n                return;\n            case ts.SyntaxKind.TypeAssertionExpression:\n                createTypeAssertion(node as import(\"typescript-3.8.3\").TypeAssertion);\n                return;\n            case ts.SyntaxKind.ParenthesizedExpression:\n                createParen(node as import(\"typescript-3.8.3\").ParenthesizedExpression);\n                return;\n            case ts.SyntaxKind.FunctionExpression:\n                createFunctionExpression(node as import(\"typescript-3.8.3\").FunctionExpression);\n                return;\n            case ts.SyntaxKind.ArrowFunction:\n                createArrowFunction(node as import(\"typescript-3.8.3\").ArrowFunction);\n                return;\n            case ts.SyntaxKind.DeleteExpression:\n                createDelete(node as import(\"typescript-3.8.3\").DeleteExpression);\n                return;\n            case ts.SyntaxKind.TypeOfExpression:\n                createTypeOf(node as import(\"typescript-3.8.3\").TypeOfExpression);\n                return;\n            case ts.SyntaxKind.VoidExpression:\n                createVoid(node as import(\"typescript-3.8.3\").VoidExpression);\n                return;\n            case ts.SyntaxKind.AwaitExpression:\n                createAwait(node as import(\"typescript-3.8.3\").AwaitExpression);\n                return;\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                createPrefix(node as import(\"typescript-3.8.3\").PrefixUnaryExpression);\n                return;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n                createPostfix(node as import(\"typescript-3.8.3\").PostfixUnaryExpression);\n                return;\n            case ts.SyntaxKind.BinaryExpression:\n                createBinary(node as import(\"typescript-3.8.3\").BinaryExpression);\n                return;\n            case ts.SyntaxKind.ConditionalExpression:\n                createConditional(node as import(\"typescript-3.8.3\").ConditionalExpression);\n                return;\n            case ts.SyntaxKind.TemplateExpression:\n                createTemplateExpression(node as import(\"typescript-3.8.3\").TemplateExpression);\n                return;\n            case ts.SyntaxKind.TemplateHead:\n                createTemplateHead(node as import(\"typescript-3.8.3\").TemplateHead);\n                return;\n            case ts.SyntaxKind.TemplateMiddle:\n                createTemplateMiddle(node as import(\"typescript-3.8.3\").TemplateMiddle);\n                return;\n            case ts.SyntaxKind.TemplateTail:\n                createTemplateTail(node as import(\"typescript-3.8.3\").TemplateTail);\n                return;\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                createNoSubstitutionTemplateLiteral(node as import(\"typescript-3.8.3\").NoSubstitutionTemplateLiteral);\n                return;\n            case ts.SyntaxKind.YieldExpression:\n                createYield(node as import(\"typescript-3.8.3\").YieldExpression);\n                return;\n            case ts.SyntaxKind.SpreadElement:\n                createSpread(node as import(\"typescript-3.8.3\").SpreadElement);\n                return;\n            case ts.SyntaxKind.ClassExpression:\n                createClassExpression(node as import(\"typescript-3.8.3\").ClassExpression);\n                return;\n            case ts.SyntaxKind.OmittedExpression:\n                createOmittedExpression(node as import(\"typescript-3.8.3\").OmittedExpression);\n                return;\n            case ts.SyntaxKind.ExpressionWithTypeArguments:\n                createExpressionWithTypeArguments(node as import(\"typescript-3.8.3\").ExpressionWithTypeArguments);\n                return;\n            case ts.SyntaxKind.AsExpression:\n                createAsExpression(node as import(\"typescript-3.8.3\").AsExpression);\n                return;\n            case ts.SyntaxKind.NonNullExpression:\n                createNonNullExpression(node as import(\"typescript-3.8.3\").NonNullExpression);\n                return;\n            case ts.SyntaxKind.MetaProperty:\n                createMetaProperty(node as import(\"typescript-3.8.3\").MetaProperty);\n                return;\n            case ts.SyntaxKind.TemplateSpan:\n                createTemplateSpan(node as import(\"typescript-3.8.3\").TemplateSpan);\n                return;\n            case ts.SyntaxKind.SemicolonClassElement:\n                createSemicolonClassElement(node as import(\"typescript-3.8.3\").SemicolonClassElement);\n                return;\n            case ts.SyntaxKind.Block:\n                createBlock(node as import(\"typescript-3.8.3\").Block);\n                return;\n            case ts.SyntaxKind.VariableStatement:\n                createVariableStatement(node as import(\"typescript-3.8.3\").VariableStatement);\n                return;\n            case ts.SyntaxKind.EmptyStatement:\n                createEmptyStatement(node as import(\"typescript-3.8.3\").EmptyStatement);\n                return;\n            case ts.SyntaxKind.ExpressionStatement:\n                createExpressionStatement(node as import(\"typescript-3.8.3\").ExpressionStatement);\n                return;\n            case ts.SyntaxKind.IfStatement:\n                createIf(node as import(\"typescript-3.8.3\").IfStatement);\n                return;\n            case ts.SyntaxKind.DoStatement:\n                createDo(node as import(\"typescript-3.8.3\").DoStatement);\n                return;\n            case ts.SyntaxKind.WhileStatement:\n                createWhile(node as import(\"typescript-3.8.3\").WhileStatement);\n                return;\n            case ts.SyntaxKind.ForStatement:\n                createFor(node as import(\"typescript-3.8.3\").ForStatement);\n                return;\n            case ts.SyntaxKind.ForInStatement:\n                createForIn(node as import(\"typescript-3.8.3\").ForInStatement);\n                return;\n            case ts.SyntaxKind.ForOfStatement:\n                createForOf(node as import(\"typescript-3.8.3\").ForOfStatement);\n                return;\n            case ts.SyntaxKind.ContinueStatement:\n                createContinue(node as import(\"typescript-3.8.3\").ContinueStatement);\n                return;\n            case ts.SyntaxKind.BreakStatement:\n                createBreak(node as import(\"typescript-3.8.3\").BreakStatement);\n                return;\n            case ts.SyntaxKind.ReturnStatement:\n                createReturn(node as import(\"typescript-3.8.3\").ReturnStatement);\n                return;\n            case ts.SyntaxKind.WithStatement:\n                createWith(node as import(\"typescript-3.8.3\").WithStatement);\n                return;\n            case ts.SyntaxKind.SwitchStatement:\n                createSwitch(node as import(\"typescript-3.8.3\").SwitchStatement);\n                return;\n            case ts.SyntaxKind.LabeledStatement:\n                createLabel(node as import(\"typescript-3.8.3\").LabeledStatement);\n                return;\n            case ts.SyntaxKind.ThrowStatement:\n                createThrow(node as import(\"typescript-3.8.3\").ThrowStatement);\n                return;\n            case ts.SyntaxKind.TryStatement:\n                createTry(node as import(\"typescript-3.8.3\").TryStatement);\n                return;\n            case ts.SyntaxKind.DebuggerStatement:\n                createDebuggerStatement(node as import(\"typescript-3.8.3\").DebuggerStatement);\n                return;\n            case ts.SyntaxKind.VariableDeclaration:\n                createVariableDeclaration(node as import(\"typescript-3.8.3\").VariableDeclaration);\n                return;\n            case ts.SyntaxKind.VariableDeclarationList:\n                createVariableDeclarationList(node as import(\"typescript-3.8.3\").VariableDeclarationList);\n                return;\n            case ts.SyntaxKind.FunctionDeclaration:\n                createFunctionDeclaration(node as import(\"typescript-3.8.3\").FunctionDeclaration);\n                return;\n            case ts.SyntaxKind.ClassDeclaration:\n                createClassDeclaration(node as import(\"typescript-3.8.3\").ClassDeclaration);\n                return;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                createInterfaceDeclaration(node as import(\"typescript-3.8.3\").InterfaceDeclaration);\n                return;\n            case ts.SyntaxKind.TypeAliasDeclaration:\n                createTypeAliasDeclaration(node as import(\"typescript-3.8.3\").TypeAliasDeclaration);\n                return;\n            case ts.SyntaxKind.EnumDeclaration:\n                createEnumDeclaration(node as import(\"typescript-3.8.3\").EnumDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleDeclaration:\n                createModuleDeclaration(node as import(\"typescript-3.8.3\").ModuleDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleBlock:\n                createModuleBlock(node as import(\"typescript-3.8.3\").ModuleBlock);\n                return;\n            case ts.SyntaxKind.CaseBlock:\n                createCaseBlock(node as import(\"typescript-3.8.3\").CaseBlock);\n                return;\n            case ts.SyntaxKind.NamespaceExportDeclaration:\n                createNamespaceExportDeclaration(node as import(\"typescript-3.8.3\").NamespaceExportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n                createImportEqualsDeclaration(node as import(\"typescript-3.8.3\").ImportEqualsDeclaration);\n                return;\n            case ts.SyntaxKind.ImportDeclaration:\n                createImportDeclaration(node as import(\"typescript-3.8.3\").ImportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportClause:\n                createImportClause(node as import(\"typescript-3.8.3\").ImportClause);\n                return;\n            case ts.SyntaxKind.NamespaceImport:\n                createNamespaceImport(node as import(\"typescript-3.8.3\").NamespaceImport);\n                return;\n            case ts.SyntaxKind.NamespaceExport:\n                createNamespaceExport(node as import(\"typescript-3.8.3\").NamespaceExport);\n                return;\n            case ts.SyntaxKind.NamedImports:\n                createNamedImports(node as import(\"typescript-3.8.3\").NamedImports);\n                return;\n            case ts.SyntaxKind.ImportSpecifier:\n                createImportSpecifier(node as import(\"typescript-3.8.3\").ImportSpecifier);\n                return;\n            case ts.SyntaxKind.ExportAssignment:\n                createExportAssignment(node as import(\"typescript-3.8.3\").ExportAssignment);\n                return;\n            case ts.SyntaxKind.ExportDeclaration:\n                createExportDeclaration(node as import(\"typescript-3.8.3\").ExportDeclaration);\n                return;\n            case ts.SyntaxKind.NamedExports:\n                createNamedExports(node as import(\"typescript-3.8.3\").NamedExports);\n                return;\n            case ts.SyntaxKind.ExportSpecifier:\n                createExportSpecifier(node as import(\"typescript-3.8.3\").ExportSpecifier);\n                return;\n            case ts.SyntaxKind.ExternalModuleReference:\n                createExternalModuleReference(node as import(\"typescript-3.8.3\").ExternalModuleReference);\n                return;\n            case ts.SyntaxKind.JsxElement:\n                createJsxElement(node as import(\"typescript-3.8.3\").JsxElement);\n                return;\n            case ts.SyntaxKind.JsxSelfClosingElement:\n                createJsxSelfClosingElement(node as import(\"typescript-3.8.3\").JsxSelfClosingElement);\n                return;\n            case ts.SyntaxKind.JsxOpeningElement:\n                createJsxOpeningElement(node as import(\"typescript-3.8.3\").JsxOpeningElement);\n                return;\n            case ts.SyntaxKind.JsxClosingElement:\n                createJsxClosingElement(node as import(\"typescript-3.8.3\").JsxClosingElement);\n                return;\n            case ts.SyntaxKind.JsxFragment:\n                createJsxFragment(node as import(\"typescript-3.8.3\").JsxFragment);\n                return;\n            case ts.SyntaxKind.JsxText:\n                createJsxText(node as import(\"typescript-3.8.3\").JsxText);\n                return;\n            case ts.SyntaxKind.JsxOpeningFragment:\n                createJsxOpeningFragment(node as import(\"typescript-3.8.3\").JsxOpeningFragment);\n                return;\n            case ts.SyntaxKind.JsxClosingFragment:\n                createJsxJsxClosingFragment(node as import(\"typescript-3.8.3\").JsxClosingFragment);\n                return;\n            case ts.SyntaxKind.JsxAttribute:\n                createJsxAttribute(node as import(\"typescript-3.8.3\").JsxAttribute);\n                return;\n            case ts.SyntaxKind.JsxAttributes:\n                createJsxAttributes(node as import(\"typescript-3.8.3\").JsxAttributes);\n                return;\n            case ts.SyntaxKind.JsxSpreadAttribute:\n                createJsxSpreadAttribute(node as import(\"typescript-3.8.3\").JsxSpreadAttribute);\n                return;\n            case ts.SyntaxKind.JsxExpression:\n                createJsxExpression(node as import(\"typescript-3.8.3\").JsxExpression);\n                return;\n            case ts.SyntaxKind.CaseClause:\n                createCaseClause(node as import(\"typescript-3.8.3\").CaseClause);\n                return;\n            case ts.SyntaxKind.DefaultClause:\n                createDefaultClause(node as import(\"typescript-3.8.3\").DefaultClause);\n                return;\n            case ts.SyntaxKind.HeritageClause:\n                createHeritageClause(node as import(\"typescript-3.8.3\").HeritageClause);\n                return;\n            case ts.SyntaxKind.CatchClause:\n                createCatchClause(node as import(\"typescript-3.8.3\").CatchClause);\n                return;\n            case ts.SyntaxKind.PropertyAssignment:\n                createPropertyAssignment(node as import(\"typescript-3.8.3\").PropertyAssignment);\n                return;\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n                createShorthandPropertyAssignment(node as import(\"typescript-3.8.3\").ShorthandPropertyAssignment);\n                return;\n            case ts.SyntaxKind.SpreadAssignment:\n                createSpreadAssignment(node as import(\"typescript-3.8.3\").SpreadAssignment);\n                return;\n            case ts.SyntaxKind.EnumMember:\n                createEnumMember(node as import(\"typescript-3.8.3\").EnumMember);\n                return;\n            case ts.SyntaxKind.CommaListExpression:\n                createCommaList(node as import(\"typescript-3.8.3\").CommaListExpression);\n                return;\n            default:\n                if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {\n                    writer.write(\"ts.createToken(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n                    return;\n                }\n                writer.write(\"/* Unhandled node kind: \").write(syntaxKindToName[node.kind]).write(\" */\")\n        }\n    }\n\n    function writeNodeTextForTypeNode(node: import(\"typescript-3.8.3\").TypeNode) {\n        if (node.kind >= ts.SyntaxKind.FirstKeyword && node.kind <= ts.SyntaxKind.LastKeyword) {\n            writer.write(\"ts.createKeywordTypeNode(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n        }\n        else {\n            writeNodeText(node);\n        }\n    }\n\n    function createNumericLiteral(node: import(\"typescript-3.8.3\").NumericLiteral) {\n        writer.write(\"ts.createNumericLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createBigIntLiteral(node: import(\"typescript-3.8.3\").BigIntLiteral) {\n        writer.write(\"ts.createBigIntLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createStringLiteral(node: import(\"typescript-3.8.3\").StringLiteral) {\n        writer.write(\"ts.createStringLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createRegularExpressionLiteral(node: import(\"typescript-3.8.3\").RegularExpressionLiteral) {\n        writer.write(\"ts.createRegularExpressionLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createIdentifier(node: import(\"typescript-3.8.3\").Identifier) {\n        writer.write(\"ts.createIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createPrivateIdentifier(node: import(\"typescript-3.8.3\").PrivateIdentifier) {\n        writer.write(\"ts.createPrivateIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createSuper(node: import(\"typescript-3.8.3\").SuperExpression) {\n        writer.write(\"ts.createSuper(\");\n        writer.write(\")\");\n    }\n\n    function createThis(node: import(\"typescript-3.8.3\").ThisExpression) {\n        writer.write(\"ts.createThis(\");\n        writer.write(\")\");\n    }\n\n    function createNull(node: import(\"typescript-3.8.3\").NullLiteral) {\n        writer.write(\"ts.createNull(\");\n        writer.write(\")\");\n    }\n\n    function createTrue(node: import(\"typescript-3.8.3\").BooleanLiteral) {\n        writer.write(\"ts.createTrue(\");\n        writer.write(\")\");\n    }\n\n    function createFalse(node: import(\"typescript-3.8.3\").BooleanLiteral) {\n        writer.write(\"ts.createFalse(\");\n        writer.write(\")\");\n    }\n\n    function createQualifiedName(node: import(\"typescript-3.8.3\").QualifiedName) {\n        writer.write(\"ts.createQualifiedName(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createComputedPropertyName(node: import(\"typescript-3.8.3\").ComputedPropertyName) {\n        writer.write(\"ts.createComputedPropertyName(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeParameterDeclaration(node: import(\"typescript-3.8.3\").TypeParameterDeclaration) {\n        writer.write(\"ts.createTypeParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.constraint == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.constraint)\n            }\n            writer.write(\",\").newLine();\n            if (node.default == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.default)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParameter(node: import(\"typescript-3.8.3\").ParameterDeclaration) {\n        writer.write(\"ts.createParameter(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDecorator(node: import(\"typescript-3.8.3\").Decorator) {\n        writer.write(\"ts.createDecorator(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPropertySignature(node: import(\"typescript-3.8.3\").PropertySignature) {\n        writer.write(\"ts.createPropertySignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createProperty(node: import(\"typescript-3.8.3\").PropertyDeclaration) {\n        writer.write(\"ts.createProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.QuestionToken)\");\n            else if (node.exclamationToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.ExclamationToken)\");\n            else\n                writer.write(\"undefined\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodSignature(node: import(\"typescript-3.8.3\").MethodSignature) {\n        writer.write(\"ts.createMethodSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethod(node: import(\"typescript-3.8.3\").MethodDeclaration) {\n        writer.write(\"ts.createMethod(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructor(node: import(\"typescript-3.8.3\").ConstructorDeclaration) {\n        writer.write(\"ts.createConstructor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createGetAccessor(node: import(\"typescript-3.8.3\").GetAccessorDeclaration) {\n        writer.write(\"ts.createGetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSetAccessor(node: import(\"typescript-3.8.3\").SetAccessorDeclaration) {\n        writer.write(\"ts.createSetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCallSignature(node: import(\"typescript-3.8.3\").CallSignatureDeclaration) {\n        writer.write(\"ts.createCallSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructSignature(node: import(\"typescript-3.8.3\").ConstructSignatureDeclaration) {\n        writer.write(\"ts.createConstructSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexSignature(node: import(\"typescript-3.8.3\").IndexSignatureDeclaration) {\n        writer.write(\"ts.createIndexSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createKeywordTypeNode(node: import(\"typescript-3.8.3\").KeywordTypeNode) {\n        writer.write(\"ts.createKeywordTypeNode(\");\n        writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.kind])\n        writer.write(\")\");\n    }\n\n    function createTypePredicateNodeWithModifier(node: import(\"typescript-3.8.3\").TypePredicateNode) {\n        writer.write(\"ts.createTypePredicateNodeWithModifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.assertsModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.assertsModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.parameterName)\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeReferenceNode(node: import(\"typescript-3.8.3\").TypeReferenceNode) {\n        writer.write(\"ts.createTypeReferenceNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.typeName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionTypeNode(node: import(\"typescript-3.8.3\").FunctionTypeNode) {\n        writer.write(\"ts.createFunctionTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorTypeNode(node: import(\"typescript-3.8.3\").ConstructorTypeNode) {\n        writer.write(\"ts.createConstructorTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeQueryNode(node: import(\"typescript-3.8.3\").TypeQueryNode) {\n        writer.write(\"ts.createTypeQueryNode(\");\n        writeNodeText(node.exprName)\n        writer.write(\")\");\n    }\n\n    function createTypeLiteralNode(node: import(\"typescript-3.8.3\").TypeLiteralNode) {\n        writer.write(\"ts.createTypeLiteralNode(\");\n        writer.write(\"[\");\n        if (node.members.length === 1) {\n            const item = node.members![0];\n            writeNodeText(item)\n        }\n        else if (node.members.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.members!.length; i++) {\n                    const item = node.members![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayTypeNode(node: import(\"typescript-3.8.3\").ArrayTypeNode) {\n        writer.write(\"ts.createArrayTypeNode(\");\n        writeNodeTextForTypeNode(node.elementType)\n        writer.write(\")\");\n    }\n\n    function createTupleTypeNode(node: import(\"typescript-3.8.3\").TupleTypeNode) {\n        writer.write(\"ts.createTupleTypeNode(\");\n        writer.write(\"[\");\n        if (node.elementTypes.length === 1) {\n            const item = node.elementTypes![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.elementTypes.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elementTypes!.length; i++) {\n                    const item = node.elementTypes![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createOptionalTypeNode(node: import(\"typescript-3.8.3\").OptionalTypeNode) {\n        writer.write(\"ts.createOptionalTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createRestTypeNode(node: import(\"typescript-3.8.3\").RestTypeNode) {\n        writer.write(\"ts.createRestTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createUnionTypeNode(node: import(\"typescript-3.8.3\").UnionTypeNode) {\n        writer.write(\"ts.createUnionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createIntersectionTypeNode(node: import(\"typescript-3.8.3\").IntersectionTypeNode) {\n        writer.write(\"ts.createIntersectionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createConditionalTypeNode(node: import(\"typescript-3.8.3\").ConditionalTypeNode) {\n        writer.write(\"ts.createConditionalTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.checkType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.extendsType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.trueType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.falseType)\n        });\n        writer.write(\")\");\n    }\n\n    function createInferTypeNode(node: import(\"typescript-3.8.3\").InferTypeNode) {\n        writer.write(\"ts.createInferTypeNode(\");\n        writeNodeText(node.typeParameter)\n        writer.write(\")\");\n    }\n\n    function createImportTypeNode(node: import(\"typescript-3.8.3\").ImportTypeNode) {\n        writer.write(\"ts.createImportTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.argument)\n            writer.write(\",\").newLine();\n            if (node.qualifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.qualifier)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isTypeOf == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isTypeOf.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedType(node: import(\"typescript-3.8.3\").ParenthesizedTypeNode) {\n        writer.write(\"ts.createParenthesizedType(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createThisTypeNode(node: import(\"typescript-3.8.3\").ThisTypeNode) {\n        writer.write(\"ts.createThisTypeNode(\");\n        writer.write(\")\");\n    }\n\n    function createTypeOperatorNode(node: import(\"typescript-3.8.3\").TypeOperatorNode) {\n        writer.write(\"ts.createTypeOperatorNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createIndexedAccessTypeNode(node: import(\"typescript-3.8.3\").IndexedAccessTypeNode) {\n        writer.write(\"ts.createIndexedAccessTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.objectType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.indexType)\n        });\n        writer.write(\")\");\n    }\n\n    function createMappedTypeNode(node: import(\"typescript-3.8.3\").MappedTypeNode) {\n        writer.write(\"ts.createMappedTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.readonlyToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.readonlyToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.typeParameter)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createLiteralTypeNode(node: import(\"typescript-3.8.3\").LiteralTypeNode) {\n        writer.write(\"ts.createLiteralTypeNode(\");\n        writeNodeText(node.literal)\n        writer.write(\")\");\n    }\n\n    function createObjectBindingPattern(node: import(\"typescript-3.8.3\").ObjectBindingPattern) {\n        writer.write(\"ts.createObjectBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayBindingPattern(node: import(\"typescript-3.8.3\").ArrayBindingPattern) {\n        writer.write(\"ts.createArrayBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createBindingElement(node: import(\"typescript-3.8.3\").BindingElement) {\n        writer.write(\"ts.createBindingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createArrayLiteral(node: import(\"typescript-3.8.3\").ArrayLiteralExpression) {\n        writer.write(\"ts.createArrayLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.elements.length === 1) {\n                const item = node.elements![0];\n                writeNodeText(item)\n            }\n            else if (node.elements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.elements!.length; i++) {\n                        const item = node.elements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectLiteral(node: import(\"typescript-3.8.3\").ObjectLiteralExpression) {\n        writer.write(\"ts.createObjectLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.properties.length === 1) {\n                const item = node.properties![0];\n                writeNodeText(item)\n            }\n            else if (node.properties.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.properties!.length; i++) {\n                        const item = node.properties![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccess(node: import(\"typescript-3.8.3\").PropertyAccessExpression) {\n        writer.write(\"ts.createPropertyAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessChain(node: import(\"typescript-3.8.3\").PropertyAccessChain) {\n        writer.write(\"ts.createPropertyAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccess(node: import(\"typescript-3.8.3\").ElementAccessExpression) {\n        writer.write(\"ts.createElementAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessChain(node: import(\"typescript-3.8.3\").ElementAccessChain) {\n        writer.write(\"ts.createElementAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createCall(node: import(\"typescript-3.8.3\").CallExpression) {\n        writer.write(\"ts.createCall(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCallChain(node: import(\"typescript-3.8.3\").CallChain) {\n        writer.write(\"ts.createCallChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createNew(node: import(\"typescript-3.8.3\").NewExpression) {\n        writer.write(\"ts.createNew(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.arguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.arguments.length === 1) {\n                    const item = node.arguments![0];\n                    writeNodeText(item)\n                }\n                else if (node.arguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.arguments!.length; i++) {\n                            const item = node.arguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTaggedTemplate(node: import(\"typescript-3.8.3\").TaggedTemplateExpression) {\n        writer.write(\"ts.createTaggedTemplate(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tag)\n            writer.write(\",\").newLine();\n            writeNodeText(node.template)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAssertion(node: import(\"typescript-3.8.3\").TypeAssertion) {\n        writer.write(\"ts.createTypeAssertion(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createParen(node: import(\"typescript-3.8.3\").ParenthesizedExpression) {\n        writer.write(\"ts.createParen(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createFunctionExpression(node: import(\"typescript-3.8.3\").FunctionExpression) {\n        writer.write(\"ts.createFunctionExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createArrowFunction(node: import(\"typescript-3.8.3\").ArrowFunction) {\n        writer.write(\"ts.createArrowFunction(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.equalsGreaterThanToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createDelete(node: import(\"typescript-3.8.3\").DeleteExpression) {\n        writer.write(\"ts.createDelete(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeOf(node: import(\"typescript-3.8.3\").TypeOfExpression) {\n        writer.write(\"ts.createTypeOf(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createVoid(node: import(\"typescript-3.8.3\").VoidExpression) {\n        writer.write(\"ts.createVoid(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createAwait(node: import(\"typescript-3.8.3\").AwaitExpression) {\n        writer.write(\"ts.createAwait(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPrefix(node: import(\"typescript-3.8.3\").PrefixUnaryExpression) {\n        writer.write(\"ts.createPrefix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeText(node.operand)\n        });\n        writer.write(\")\");\n    }\n\n    function createPostfix(node: import(\"typescript-3.8.3\").PostfixUnaryExpression) {\n        writer.write(\"ts.createPostfix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.operand)\n            writer.write(\",\").newLine();\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n        });\n        writer.write(\")\");\n    }\n\n    function createBinary(node: import(\"typescript-3.8.3\").BinaryExpression) {\n        writer.write(\"ts.createBinary(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.operatorToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createConditional(node: import(\"typescript-3.8.3\").ConditionalExpression) {\n        writer.write(\"ts.createConditional(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.condition)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenTrue)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenFalse)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateExpression(node: import(\"typescript-3.8.3\").TemplateExpression) {\n        writer.write(\"ts.createTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateHead(node: import(\"typescript-3.8.3\").TemplateHead) {\n        writer.write(\"ts.createTemplateHead(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateMiddle(node: import(\"typescript-3.8.3\").TemplateMiddle) {\n        writer.write(\"ts.createTemplateMiddle(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateTail(node: import(\"typescript-3.8.3\").TemplateTail) {\n        writer.write(\"ts.createTemplateTail(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNoSubstitutionTemplateLiteral(node: import(\"typescript-3.8.3\").NoSubstitutionTemplateLiteral) {\n        writer.write(\"ts.createNoSubstitutionTemplateLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createYield(node: import(\"typescript-3.8.3\").YieldExpression) {\n        writer.write(\"ts.createYield(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createSpread(node: import(\"typescript-3.8.3\").SpreadElement) {\n        writer.write(\"ts.createSpread(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createClassExpression(node: import(\"typescript-3.8.3\").ClassExpression) {\n        writer.write(\"ts.createClassExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createOmittedExpression(node: import(\"typescript-3.8.3\").OmittedExpression) {\n        writer.write(\"ts.createOmittedExpression(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionWithTypeArguments(node: import(\"typescript-3.8.3\").ExpressionWithTypeArguments) {\n        writer.write(\"ts.createExpressionWithTypeArguments(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createAsExpression(node: import(\"typescript-3.8.3\").AsExpression) {\n        writer.write(\"ts.createAsExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createNonNullExpression(node: import(\"typescript-3.8.3\").NonNullExpression) {\n        writer.write(\"ts.createNonNullExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createMetaProperty(node: import(\"typescript-3.8.3\").MetaProperty) {\n        writer.write(\"ts.createMetaProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.keywordToken])\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateSpan(node: import(\"typescript-3.8.3\").TemplateSpan) {\n        writer.write(\"ts.createTemplateSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createSemicolonClassElement(node: import(\"typescript-3.8.3\").SemicolonClassElement) {\n        writer.write(\"ts.createSemicolonClassElement(\");\n        writer.write(\")\");\n    }\n\n    function createBlock(node: import(\"typescript-3.8.3\").Block) {\n        writer.write(\"ts.createBlock(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableStatement(node: import(\"typescript-3.8.3\").VariableStatement) {\n        writer.write(\"ts.createVariableStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.declarationList)\n        });\n        writer.write(\")\");\n    }\n\n    function createEmptyStatement(node: import(\"typescript-3.8.3\").EmptyStatement) {\n        writer.write(\"ts.createEmptyStatement(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionStatement(node: import(\"typescript-3.8.3\").ExpressionStatement) {\n        writer.write(\"ts.createExpressionStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createIf(node: import(\"typescript-3.8.3\").IfStatement) {\n        writer.write(\"ts.createIf(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.thenStatement)\n            writer.write(\",\").newLine();\n            if (node.elseStatement == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.elseStatement)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDo(node: import(\"typescript-3.8.3\").DoStatement) {\n        writer.write(\"ts.createDo(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.statement)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createWhile(node: import(\"typescript-3.8.3\").WhileStatement) {\n        writer.write(\"ts.createWhile(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createFor(node: import(\"typescript-3.8.3\").ForStatement) {\n        writer.write(\"ts.createFor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n            writer.write(\",\").newLine();\n            if (node.condition == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.condition)\n            }\n            writer.write(\",\").newLine();\n            if (node.incrementor == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.incrementor)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForIn(node: import(\"typescript-3.8.3\").ForInStatement) {\n        writer.write(\"ts.createForIn(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForOf(node: import(\"typescript-3.8.3\").ForOfStatement) {\n        writer.write(\"ts.createForOf(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.awaitModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.awaitModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createContinue(node: import(\"typescript-3.8.3\").ContinueStatement) {\n        writer.write(\"ts.createContinue(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createBreak(node: import(\"typescript-3.8.3\").BreakStatement) {\n        writer.write(\"ts.createBreak(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createReturn(node: import(\"typescript-3.8.3\").ReturnStatement) {\n        writer.write(\"ts.createReturn(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createWith(node: import(\"typescript-3.8.3\").WithStatement) {\n        writer.write(\"ts.createWith(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createSwitch(node: import(\"typescript-3.8.3\").SwitchStatement) {\n        writer.write(\"ts.createSwitch(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.caseBlock)\n        });\n        writer.write(\")\");\n    }\n\n    function createLabel(node: import(\"typescript-3.8.3\").LabeledStatement) {\n        writer.write(\"ts.createLabel(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.label)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createThrow(node: import(\"typescript-3.8.3\").ThrowStatement) {\n        writer.write(\"ts.createThrow(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createTry(node: import(\"typescript-3.8.3\").TryStatement) {\n        writer.write(\"ts.createTry(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tryBlock)\n            writer.write(\",\").newLine();\n            if (node.catchClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.catchClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.finallyBlock == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.finallyBlock)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDebuggerStatement(node: import(\"typescript-3.8.3\").DebuggerStatement) {\n        writer.write(\"ts.createDebuggerStatement(\");\n        writer.write(\")\");\n    }\n\n    function createVariableDeclaration(node: import(\"typescript-3.8.3\").VariableDeclaration) {\n        writer.write(\"ts.createVariableDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableDeclarationList(node: import(\"typescript-3.8.3\").VariableDeclarationList) {\n        writer.write(\"ts.createVariableDeclarationList(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.declarations.length === 1) {\n                const item = node.declarations![0];\n                writeNodeText(item)\n            }\n            else if (node.declarations.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.declarations!.length; i++) {\n                        const item = node.declarations![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionDeclaration(node: import(\"typescript-3.8.3\").FunctionDeclaration) {\n        writer.write(\"ts.createFunctionDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createClassDeclaration(node: import(\"typescript-3.8.3\").ClassDeclaration) {\n        writer.write(\"ts.createClassDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createInterfaceDeclaration(node: import(\"typescript-3.8.3\").InterfaceDeclaration) {\n        writer.write(\"ts.createInterfaceDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAliasDeclaration(node: import(\"typescript-3.8.3\").TypeAliasDeclaration) {\n        writer.write(\"ts.createTypeAliasDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createEnumDeclaration(node: import(\"typescript-3.8.3\").EnumDeclaration) {\n        writer.write(\"ts.createEnumDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleDeclaration(node: import(\"typescript-3.8.3\").ModuleDeclaration) {\n        writer.write(\"ts.createModuleDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleBlock(node: import(\"typescript-3.8.3\").ModuleBlock) {\n        writer.write(\"ts.createModuleBlock(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createCaseBlock(node: import(\"typescript-3.8.3\").CaseBlock) {\n        writer.write(\"ts.createCaseBlock(\");\n        writer.write(\"[\");\n        if (node.clauses.length === 1) {\n            const item = node.clauses![0];\n            writeNodeText(item)\n        }\n        else if (node.clauses.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.clauses!.length; i++) {\n                    const item = node.clauses![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamespaceExportDeclaration(node: import(\"typescript-3.8.3\").NamespaceExportDeclaration) {\n        writer.write(\"ts.createNamespaceExportDeclaration(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createImportEqualsDeclaration(node: import(\"typescript-3.8.3\").ImportEqualsDeclaration) {\n        writer.write(\"ts.createImportEqualsDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleReference)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportDeclaration(node: import(\"typescript-3.8.3\").ImportDeclaration) {\n        writer.write(\"ts.createImportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.importClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.importClause)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleSpecifier)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportClause(node: import(\"typescript-3.8.3\").ImportClause) {\n        writer.write(\"ts.createImportClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.namedBindings == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.namedBindings)\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOnly.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createNamespaceImport(node: import(\"typescript-3.8.3\").NamespaceImport) {\n        writer.write(\"ts.createNamespaceImport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamespaceExport(node: import(\"typescript-3.8.3\").NamespaceExport) {\n        writer.write(\"ts.createNamespaceExport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamedImports(node: import(\"typescript-3.8.3\").NamedImports) {\n        writer.write(\"ts.createNamedImports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createImportSpecifier(node: import(\"typescript-3.8.3\").ImportSpecifier) {\n        writer.write(\"ts.createImportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportAssignment(node: import(\"typescript-3.8.3\").ExportAssignment) {\n        writer.write(\"ts.createExportAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isExportEquals == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isExportEquals.toString())\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportDeclaration(node: import(\"typescript-3.8.3\").ExportDeclaration) {\n        writer.write(\"ts.createExportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.exportClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exportClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.moduleSpecifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.moduleSpecifier)\n            }\n            writer.write(\",\").newLine();\n            writer.write(node.isTypeOnly.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createNamedExports(node: import(\"typescript-3.8.3\").NamedExports) {\n        writer.write(\"ts.createNamedExports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createExportSpecifier(node: import(\"typescript-3.8.3\").ExportSpecifier) {\n        writer.write(\"ts.createExportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExternalModuleReference(node: import(\"typescript-3.8.3\").ExternalModuleReference) {\n        writer.write(\"ts.createExternalModuleReference(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxElement(node: import(\"typescript-3.8.3\").JsxElement) {\n        writer.write(\"ts.createJsxElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingElement)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingElement)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxSelfClosingElement(node: import(\"typescript-3.8.3\").JsxSelfClosingElement) {\n        writer.write(\"ts.createJsxSelfClosingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningElement(node: import(\"typescript-3.8.3\").JsxOpeningElement) {\n        writer.write(\"ts.createJsxOpeningElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxClosingElement(node: import(\"typescript-3.8.3\").JsxClosingElement) {\n        writer.write(\"ts.createJsxClosingElement(\");\n        writeNodeText(node.tagName)\n        writer.write(\")\");\n    }\n\n    function createJsxFragment(node: import(\"typescript-3.8.3\").JsxFragment) {\n        writer.write(\"ts.createJsxFragment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingFragment)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingFragment)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxText(node: import(\"typescript-3.8.3\").JsxText) {\n        writer.write(\"ts.createJsxText(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            writer.write(node.containsOnlyTriviaWhiteSpaces.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningFragment(node: import(\"typescript-3.8.3\").JsxOpeningFragment) {\n        writer.write(\"ts.createJsxOpeningFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxJsxClosingFragment(node: import(\"typescript-3.8.3\").JsxClosingFragment) {\n        writer.write(\"ts.createJsxJsxClosingFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxAttribute(node: import(\"typescript-3.8.3\").JsxAttribute) {\n        writer.write(\"ts.createJsxAttribute(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxAttributes(node: import(\"typescript-3.8.3\").JsxAttributes) {\n        writer.write(\"ts.createJsxAttributes(\");\n        writer.write(\"[\");\n        if (node.properties.length === 1) {\n            const item = node.properties![0];\n            writeNodeText(item)\n        }\n        else if (node.properties.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.properties!.length; i++) {\n                    const item = node.properties![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createJsxSpreadAttribute(node: import(\"typescript-3.8.3\").JsxSpreadAttribute) {\n        writer.write(\"ts.createJsxSpreadAttribute(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxExpression(node: import(\"typescript-3.8.3\").JsxExpression) {\n        writer.write(\"ts.createJsxExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCaseClause(node: import(\"typescript-3.8.3\").CaseClause) {\n        writer.write(\"ts.createCaseClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createDefaultClause(node: import(\"typescript-3.8.3\").DefaultClause) {\n        writer.write(\"ts.createDefaultClause(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createHeritageClause(node: import(\"typescript-3.8.3\").HeritageClause) {\n        writer.write(\"ts.createHeritageClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.token])\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.types.length === 1) {\n                const item = node.types![0];\n                writeNodeText(item)\n            }\n            else if (node.types.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.types!.length; i++) {\n                        const item = node.types![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCatchClause(node: import(\"typescript-3.8.3\").CatchClause) {\n        writer.write(\"ts.createCatchClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.variableDeclaration == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.variableDeclaration)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.block)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAssignment(node: import(\"typescript-3.8.3\").PropertyAssignment) {\n        writer.write(\"ts.createPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n        });\n        writer.write(\")\");\n    }\n\n    function createShorthandPropertyAssignment(node: import(\"typescript-3.8.3\").ShorthandPropertyAssignment) {\n        writer.write(\"ts.createShorthandPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.objectAssignmentInitializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.objectAssignmentInitializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadAssignment(node: import(\"typescript-3.8.3\").SpreadAssignment) {\n        writer.write(\"ts.createSpreadAssignment(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createEnumMember(node: import(\"typescript-3.8.3\").EnumMember) {\n        writer.write(\"ts.createEnumMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCommaList(node: import(\"typescript-3.8.3\").CommaListExpression) {\n        writer.write(\"ts.createCommaList(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createSyntaxKindToNameMap() {\n        const map: { [kind: number]: string } = {};\n        for (const name of Object.keys(ts.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n            const value = (ts.SyntaxKind as any)[name] as number;\n            if (map[value] == null)\n                map[value] = name;\n        }\n        return map;\n    }\n\n    function getNodeFlagValues(value: number) {\n        // ignore the BlockScoped node flag\n        return getFlagValuesAsString(ts.NodeFlags, \"ts.NodeFlags\", value || 0, \"None\", getFlagValues(ts.NodeFlags, value).filter(v => v !== ts.NodeFlags.BlockScoped));\n    }\n\n    function getFlagValuesAsString(enumObj: any, enumName: string, value: number, defaultName: string, flagValues?: number[]) {\n        flagValues = flagValues || getFlagValues(enumObj, value);\n        const members: string[] = [];\n        for (const flagValue of flagValues)\n            members.push(enumName + \".\" + enumObj[flagValue]);\n        if (members.length === 0)\n            members.push(enumName + \".\" + defaultName);\n        return members.join(\" | \");\n    }\n\n    function getFlagValues(enumObj: any, value: number) {\n        const members: number[] = [];\n        for (const prop in enumObj) {\n            if (typeof enumObj[prop] === \"string\")\n                continue;\n            if ((enumObj[prop] & value) !== 0)\n                members.push(enumObj[prop]);\n        }\n        return members;\n    }\n}\n"],"sourceRoot":""}