{"version":3,"sources":["resources/factoryCode/typescript-3.7.5.ts"],"names":["generateFactoryCode","ts","initialNode","writer","CodeBlockWriter","newLine","indentNumberOfSpaces","syntaxKindToName","map","Object","keys","SyntaxKind","filter","k","isNaN","parseInt","name","value","createSyntaxKindToNameMap","isSourceFile","write","statements","length","indent","i","statement","writeNodeText","newLineIfLastNot","toString","node","kind","NumericLiteral","quote","text","createNumericLiteral","BigIntLiteral","createBigIntLiteral","StringLiteral","createStringLiteral","RegularExpressionLiteral","createRegularExpressionLiteral","Identifier","createIdentifier","SuperKeyword","ThisKeyword","NullKeyword","TrueKeyword","FalseKeyword","QualifiedName","left","right","createQualifiedName","ComputedPropertyName","expression","createComputedPropertyName","TypeParameter","constraint","writeNodeTextForTypeNode","default","createTypeParameterDeclaration","Parameter","decorators","item","modifiers","dotDotDotToken","questionToken","type","initializer","createParameter","Decorator","createDecorator","PropertySignature","createPropertySignature","PropertyDeclaration","exclamationToken","createProperty","MethodSignature","typeParameters","parameters","createMethodSignature","MethodDeclaration","asteriskToken","body","createMethod","Constructor","createConstructor","GetAccessor","createGetAccessor","SetAccessor","createSetAccessor","CallSignature","createCallSignature","ConstructSignature","createConstructSignature","IndexSignature","createIndexSignature","AnyKeyword","BooleanKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","BigIntKeyword","createKeywordTypeNode","TypePredicate","assertsModifier","parameterName","createTypePredicateNodeWithModifier","TypeReference","typeName","typeArguments","createTypeReferenceNode","FunctionType","createFunctionTypeNode","ConstructorType","createConstructorTypeNode","TypeQuery","exprName","createTypeQueryNode","TypeLiteral","members","createTypeLiteralNode","ArrayType","elementType","createArrayTypeNode","TupleType","elementTypes","createTupleTypeNode","OptionalType","createOptionalTypeNode","RestType","createRestTypeNode","UnionType","types","createUnionTypeNode","IntersectionType","createIntersectionTypeNode","ConditionalType","checkType","extendsType","trueType","falseType","createConditionalTypeNode","InferType","typeParameter","createInferTypeNode","ImportType","argument","qualifier","isTypeOf","createImportTypeNode","ParenthesizedType","createParenthesizedType","ThisType","TypeOperator","createTypeOperatorNode","IndexedAccessType","objectType","indexType","createIndexedAccessTypeNode","MappedType","readonlyToken","createMappedTypeNode","LiteralType","literal","createLiteralTypeNode","ObjectBindingPattern","elements","createObjectBindingPattern","ArrayBindingPattern","createArrayBindingPattern","BindingElement","propertyName","createBindingElement","ArrayLiteralExpression","multiLine","createArrayLiteral","ObjectLiteralExpression","properties","createObjectLiteral","PropertyAccessExpression","isPropertyAccessChain","questionDotToken","createPropertyAccessChain","isPropertyAccessExpression","createPropertyAccess","Error","getText","ElementAccessExpression","isElementAccessChain","argumentExpression","createElementAccessChain","isElementAccessExpression","createElementAccess","CallExpression","isCallChain","arguments","createCallChain","isCallExpression","createCall","NewExpression","createNew","TaggedTemplateExpression","tag","template","createTaggedTemplate","TypeAssertionExpression","createTypeAssertion","ParenthesizedExpression","createParen","FunctionExpression","createFunctionExpression","ArrowFunction","equalsGreaterThanToken","createArrowFunction","DeleteExpression","createDelete","TypeOfExpression","createTypeOf","VoidExpression","createVoid","AwaitExpression","createAwait","PrefixUnaryExpression","operator","operand","createPrefix","PostfixUnaryExpression","createPostfix","BinaryExpression","operatorToken","createBinary","ConditionalExpression","condition","whenTrue","whenFalse","createConditional","TemplateExpression","head","templateSpans","createTemplateExpression","TemplateHead","rawText","createTemplateHead","TemplateMiddle","createTemplateMiddle","TemplateTail","createTemplateTail","NoSubstitutionTemplateLiteral","createNoSubstitutionTemplateLiteral","YieldExpression","createYield","SpreadElement","createSpread","ClassExpression","heritageClauses","createClassExpression","OmittedExpression","ExpressionWithTypeArguments","createExpressionWithTypeArguments","AsExpression","createAsExpression","NonNullExpression","createNonNullExpression","MetaProperty","keywordToken","createMetaProperty","TemplateSpan","createTemplateSpan","SemicolonClassElement","Block","createBlock","VariableStatement","declarationList","createVariableStatement","EmptyStatement","ExpressionStatement","createExpressionStatement","IfStatement","thenStatement","elseStatement","createIf","DoStatement","createDo","WhileStatement","createWhile","ForStatement","incrementor","createFor","ForInStatement","createForIn","ForOfStatement","awaitModifier","createForOf","ContinueStatement","label","createContinue","BreakStatement","createBreak","ReturnStatement","createReturn","WithStatement","createWith","SwitchStatement","caseBlock","createSwitch","LabeledStatement","createLabel","ThrowStatement","createThrow","TryStatement","tryBlock","catchClause","finallyBlock","createTry","DebuggerStatement","VariableDeclaration","createVariableDeclaration","VariableDeclarationList","declarations","getNodeFlagValues","flags","createVariableDeclarationList","FunctionDeclaration","createFunctionDeclaration","ClassDeclaration","createClassDeclaration","InterfaceDeclaration","createInterfaceDeclaration","TypeAliasDeclaration","createTypeAliasDeclaration","EnumDeclaration","createEnumDeclaration","ModuleDeclaration","createModuleDeclaration","ModuleBlock","createModuleBlock","CaseBlock","clauses","createCaseBlock","NamespaceExportDeclaration","createNamespaceExportDeclaration","ImportEqualsDeclaration","moduleReference","createImportEqualsDeclaration","ImportDeclaration","importClause","moduleSpecifier","createImportDeclaration","ImportClause","namedBindings","createImportClause","NamespaceImport","createNamespaceImport","NamedImports","createNamedImports","ImportSpecifier","createImportSpecifier","ExportAssignment","isExportEquals","createExportAssignment","ExportDeclaration","exportClause","createExportDeclaration","NamedExports","createNamedExports","ExportSpecifier","createExportSpecifier","ExternalModuleReference","createExternalModuleReference","JsxElement","openingElement","children","closingElement","createJsxElement","JsxSelfClosingElement","tagName","attributes","createJsxSelfClosingElement","JsxOpeningElement","createJsxOpeningElement","JsxClosingElement","createJsxClosingElement","JsxFragment","openingFragment","closingFragment","createJsxFragment","JsxText","containsOnlyTriviaWhiteSpaces","createJsxText","JsxOpeningFragment","JsxClosingFragment","JsxAttribute","createJsxAttribute","JsxAttributes","createJsxAttributes","JsxSpreadAttribute","createJsxSpreadAttribute","JsxExpression","createJsxExpression","CaseClause","createCaseClause","DefaultClause","createDefaultClause","HeritageClause","token","createHeritageClause","CatchClause","variableDeclaration","block","createCatchClause","PropertyAssignment","createPropertyAssignment","ShorthandPropertyAssignment","objectAssignmentInitializer","createShorthandPropertyAssignment","SpreadAssignment","createSpreadAssignment","EnumMember","createEnumMember","CommaListExpression","createCommaList","FirstToken","LastToken","FirstKeyword","LastKeyword","enumObj","enumName","defaultName","flagValues","getFlagValues","flagValue","push","join","getFlagValuesAsString","NodeFlags","v","BlockScoped","prop"],"mappings":"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","file":"static/js/40.190ead5a.chunk.js","sourcesContent":["import CodeBlockWriter from \"code-block-writer\";\n\nexport function generateFactoryCode(ts: typeof import(\"typescript-3.7.5\"), initialNode: import(\"typescript-3.7.5\").Node) {\n    const writer = new CodeBlockWriter({ newLine: \"\\n\", indentNumberOfSpaces: 2 });\n    const syntaxKindToName = createSyntaxKindToNameMap();\n\n    if (ts.isSourceFile(initialNode)) {\n        writer.write(\"[\");\n        if (initialNode.statements.length > 0) {\n            writer.indent(() => {\n                for (let i = 0; i < initialNode.statements.length; i++) {\n                    const statement = initialNode.statements[i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(statement);\n                }\n            }).newLine();\n        }\n        writer.write(\"];\");\n    }\n    else {\n        writeNodeText(initialNode);\n    }\n    writer.newLineIfLastNot();\n\n    return writer.toString();\n\n    function writeNodeText(node: import(\"typescript-3.7.5\").Node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NumericLiteral:\n                createNumericLiteral(node as import(\"typescript-3.7.5\").NumericLiteral);\n                return;\n            case ts.SyntaxKind.BigIntLiteral:\n                createBigIntLiteral(node as import(\"typescript-3.7.5\").BigIntLiteral);\n                return;\n            case ts.SyntaxKind.StringLiteral:\n                createStringLiteral(node as import(\"typescript-3.7.5\").StringLiteral);\n                return;\n            case ts.SyntaxKind.RegularExpressionLiteral:\n                createRegularExpressionLiteral(node as import(\"typescript-3.7.5\").RegularExpressionLiteral);\n                return;\n            case ts.SyntaxKind.Identifier:\n                createIdentifier(node as import(\"typescript-3.7.5\").Identifier);\n                return;\n            case ts.SyntaxKind.SuperKeyword:\n                createSuper(node as import(\"typescript-3.7.5\").SuperExpression);\n                return;\n            case ts.SyntaxKind.ThisKeyword:\n                createThis(node as import(\"typescript-3.7.5\").ThisExpression);\n                return;\n            case ts.SyntaxKind.NullKeyword:\n                createNull(node as import(\"typescript-3.7.5\").NullLiteral);\n                return;\n            case ts.SyntaxKind.TrueKeyword:\n                createTrue(node as import(\"typescript-3.7.5\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.FalseKeyword:\n                createFalse(node as import(\"typescript-3.7.5\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.QualifiedName:\n                createQualifiedName(node as import(\"typescript-3.7.5\").QualifiedName);\n                return;\n            case ts.SyntaxKind.ComputedPropertyName:\n                createComputedPropertyName(node as import(\"typescript-3.7.5\").ComputedPropertyName);\n                return;\n            case ts.SyntaxKind.TypeParameter:\n                createTypeParameterDeclaration(node as import(\"typescript-3.7.5\").TypeParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Parameter:\n                createParameter(node as import(\"typescript-3.7.5\").ParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Decorator:\n                createDecorator(node as import(\"typescript-3.7.5\").Decorator);\n                return;\n            case ts.SyntaxKind.PropertySignature:\n                createPropertySignature(node as import(\"typescript-3.7.5\").PropertySignature);\n                return;\n            case ts.SyntaxKind.PropertyDeclaration:\n                createProperty(node as import(\"typescript-3.7.5\").PropertyDeclaration);\n                return;\n            case ts.SyntaxKind.MethodSignature:\n                createMethodSignature(node as import(\"typescript-3.7.5\").MethodSignature);\n                return;\n            case ts.SyntaxKind.MethodDeclaration:\n                createMethod(node as import(\"typescript-3.7.5\").MethodDeclaration);\n                return;\n            case ts.SyntaxKind.Constructor:\n                createConstructor(node as import(\"typescript-3.7.5\").ConstructorDeclaration);\n                return;\n            case ts.SyntaxKind.GetAccessor:\n                createGetAccessor(node as import(\"typescript-3.7.5\").GetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.SetAccessor:\n                createSetAccessor(node as import(\"typescript-3.7.5\").SetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.CallSignature:\n                createCallSignature(node as import(\"typescript-3.7.5\").CallSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.ConstructSignature:\n                createConstructSignature(node as import(\"typescript-3.7.5\").ConstructSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.IndexSignature:\n                createIndexSignature(node as import(\"typescript-3.7.5\").IndexSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.AnyKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BooleanKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NeverKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NumberKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.StringKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.SymbolKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UndefinedKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UnknownKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BigIntKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.7.5\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.TypePredicate:\n                createTypePredicateNodeWithModifier(node as import(\"typescript-3.7.5\").TypePredicateNode);\n                return;\n            case ts.SyntaxKind.TypeReference:\n                createTypeReferenceNode(node as import(\"typescript-3.7.5\").TypeReferenceNode);\n                return;\n            case ts.SyntaxKind.FunctionType:\n                createFunctionTypeNode(node as import(\"typescript-3.7.5\").FunctionTypeNode);\n                return;\n            case ts.SyntaxKind.ConstructorType:\n                createConstructorTypeNode(node as import(\"typescript-3.7.5\").ConstructorTypeNode);\n                return;\n            case ts.SyntaxKind.TypeQuery:\n                createTypeQueryNode(node as import(\"typescript-3.7.5\").TypeQueryNode);\n                return;\n            case ts.SyntaxKind.TypeLiteral:\n                createTypeLiteralNode(node as import(\"typescript-3.7.5\").TypeLiteralNode);\n                return;\n            case ts.SyntaxKind.ArrayType:\n                createArrayTypeNode(node as import(\"typescript-3.7.5\").ArrayTypeNode);\n                return;\n            case ts.SyntaxKind.TupleType:\n                createTupleTypeNode(node as import(\"typescript-3.7.5\").TupleTypeNode);\n                return;\n            case ts.SyntaxKind.OptionalType:\n                createOptionalTypeNode(node as import(\"typescript-3.7.5\").OptionalTypeNode);\n                return;\n            case ts.SyntaxKind.RestType:\n                createRestTypeNode(node as import(\"typescript-3.7.5\").RestTypeNode);\n                return;\n            case ts.SyntaxKind.UnionType:\n                createUnionTypeNode(node as import(\"typescript-3.7.5\").UnionTypeNode);\n                return;\n            case ts.SyntaxKind.IntersectionType:\n                createIntersectionTypeNode(node as import(\"typescript-3.7.5\").IntersectionTypeNode);\n                return;\n            case ts.SyntaxKind.ConditionalType:\n                createConditionalTypeNode(node as import(\"typescript-3.7.5\").ConditionalTypeNode);\n                return;\n            case ts.SyntaxKind.InferType:\n                createInferTypeNode(node as import(\"typescript-3.7.5\").InferTypeNode);\n                return;\n            case ts.SyntaxKind.ImportType:\n                createImportTypeNode(node as import(\"typescript-3.7.5\").ImportTypeNode);\n                return;\n            case ts.SyntaxKind.ParenthesizedType:\n                createParenthesizedType(node as import(\"typescript-3.7.5\").ParenthesizedTypeNode);\n                return;\n            case ts.SyntaxKind.ThisType:\n                createThisTypeNode(node as import(\"typescript-3.7.5\").ThisTypeNode);\n                return;\n            case ts.SyntaxKind.TypeOperator:\n                createTypeOperatorNode(node as import(\"typescript-3.7.5\").TypeOperatorNode);\n                return;\n            case ts.SyntaxKind.IndexedAccessType:\n                createIndexedAccessTypeNode(node as import(\"typescript-3.7.5\").IndexedAccessTypeNode);\n                return;\n            case ts.SyntaxKind.MappedType:\n                createMappedTypeNode(node as import(\"typescript-3.7.5\").MappedTypeNode);\n                return;\n            case ts.SyntaxKind.LiteralType:\n                createLiteralTypeNode(node as import(\"typescript-3.7.5\").LiteralTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectBindingPattern:\n                createObjectBindingPattern(node as import(\"typescript-3.7.5\").ObjectBindingPattern);\n                return;\n            case ts.SyntaxKind.ArrayBindingPattern:\n                createArrayBindingPattern(node as import(\"typescript-3.7.5\").ArrayBindingPattern);\n                return;\n            case ts.SyntaxKind.BindingElement:\n                createBindingElement(node as import(\"typescript-3.7.5\").BindingElement);\n                return;\n            case ts.SyntaxKind.ArrayLiteralExpression:\n                createArrayLiteral(node as import(\"typescript-3.7.5\").ArrayLiteralExpression);\n                return;\n            case ts.SyntaxKind.ObjectLiteralExpression:\n                createObjectLiteral(node as import(\"typescript-3.7.5\").ObjectLiteralExpression);\n                return;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                if (ts.isPropertyAccessChain(node)) {\n                    createPropertyAccessChain(node as import(\"typescript-3.7.5\").PropertyAccessChain);\n                    return;\n                }\n                if (ts.isPropertyAccessExpression(node)) {\n                    createPropertyAccess(node as import(\"typescript-3.7.5\").PropertyAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.ElementAccessExpression:\n                if (ts.isElementAccessChain(node)) {\n                    createElementAccessChain(node as import(\"typescript-3.7.5\").ElementAccessChain);\n                    return;\n                }\n                if (ts.isElementAccessExpression(node)) {\n                    createElementAccess(node as import(\"typescript-3.7.5\").ElementAccessExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.CallExpression:\n                if (ts.isCallChain(node)) {\n                    createCallChain(node as import(\"typescript-3.7.5\").CallChain);\n                    return;\n                }\n                if (ts.isCallExpression(node)) {\n                    createCall(node as import(\"typescript-3.7.5\").CallExpression);\n                    return;\n                }\n                throw new Error(\"Unhandled node: \" + node.getText());\n            case ts.SyntaxKind.NewExpression:\n                createNew(node as import(\"typescript-3.7.5\").NewExpression);\n                return;\n            case ts.SyntaxKind.TaggedTemplateExpression:\n                createTaggedTemplate(node as import(\"typescript-3.7.5\").TaggedTemplateExpression);\n                return;\n            case ts.SyntaxKind.TypeAssertionExpression:\n                createTypeAssertion(node as import(\"typescript-3.7.5\").TypeAssertion);\n                return;\n            case ts.SyntaxKind.ParenthesizedExpression:\n                createParen(node as import(\"typescript-3.7.5\").ParenthesizedExpression);\n                return;\n            case ts.SyntaxKind.FunctionExpression:\n                createFunctionExpression(node as import(\"typescript-3.7.5\").FunctionExpression);\n                return;\n            case ts.SyntaxKind.ArrowFunction:\n                createArrowFunction(node as import(\"typescript-3.7.5\").ArrowFunction);\n                return;\n            case ts.SyntaxKind.DeleteExpression:\n                createDelete(node as import(\"typescript-3.7.5\").DeleteExpression);\n                return;\n            case ts.SyntaxKind.TypeOfExpression:\n                createTypeOf(node as import(\"typescript-3.7.5\").TypeOfExpression);\n                return;\n            case ts.SyntaxKind.VoidExpression:\n                createVoid(node as import(\"typescript-3.7.5\").VoidExpression);\n                return;\n            case ts.SyntaxKind.AwaitExpression:\n                createAwait(node as import(\"typescript-3.7.5\").AwaitExpression);\n                return;\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                createPrefix(node as import(\"typescript-3.7.5\").PrefixUnaryExpression);\n                return;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n                createPostfix(node as import(\"typescript-3.7.5\").PostfixUnaryExpression);\n                return;\n            case ts.SyntaxKind.BinaryExpression:\n                createBinary(node as import(\"typescript-3.7.5\").BinaryExpression);\n                return;\n            case ts.SyntaxKind.ConditionalExpression:\n                createConditional(node as import(\"typescript-3.7.5\").ConditionalExpression);\n                return;\n            case ts.SyntaxKind.TemplateExpression:\n                createTemplateExpression(node as import(\"typescript-3.7.5\").TemplateExpression);\n                return;\n            case ts.SyntaxKind.TemplateHead:\n                createTemplateHead(node as import(\"typescript-3.7.5\").TemplateHead);\n                return;\n            case ts.SyntaxKind.TemplateMiddle:\n                createTemplateMiddle(node as import(\"typescript-3.7.5\").TemplateMiddle);\n                return;\n            case ts.SyntaxKind.TemplateTail:\n                createTemplateTail(node as import(\"typescript-3.7.5\").TemplateTail);\n                return;\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                createNoSubstitutionTemplateLiteral(node as import(\"typescript-3.7.5\").NoSubstitutionTemplateLiteral);\n                return;\n            case ts.SyntaxKind.YieldExpression:\n                createYield(node as import(\"typescript-3.7.5\").YieldExpression);\n                return;\n            case ts.SyntaxKind.SpreadElement:\n                createSpread(node as import(\"typescript-3.7.5\").SpreadElement);\n                return;\n            case ts.SyntaxKind.ClassExpression:\n                createClassExpression(node as import(\"typescript-3.7.5\").ClassExpression);\n                return;\n            case ts.SyntaxKind.OmittedExpression:\n                createOmittedExpression(node as import(\"typescript-3.7.5\").OmittedExpression);\n                return;\n            case ts.SyntaxKind.ExpressionWithTypeArguments:\n                createExpressionWithTypeArguments(node as import(\"typescript-3.7.5\").ExpressionWithTypeArguments);\n                return;\n            case ts.SyntaxKind.AsExpression:\n                createAsExpression(node as import(\"typescript-3.7.5\").AsExpression);\n                return;\n            case ts.SyntaxKind.NonNullExpression:\n                createNonNullExpression(node as import(\"typescript-3.7.5\").NonNullExpression);\n                return;\n            case ts.SyntaxKind.MetaProperty:\n                createMetaProperty(node as import(\"typescript-3.7.5\").MetaProperty);\n                return;\n            case ts.SyntaxKind.TemplateSpan:\n                createTemplateSpan(node as import(\"typescript-3.7.5\").TemplateSpan);\n                return;\n            case ts.SyntaxKind.SemicolonClassElement:\n                createSemicolonClassElement(node as import(\"typescript-3.7.5\").SemicolonClassElement);\n                return;\n            case ts.SyntaxKind.Block:\n                createBlock(node as import(\"typescript-3.7.5\").Block);\n                return;\n            case ts.SyntaxKind.VariableStatement:\n                createVariableStatement(node as import(\"typescript-3.7.5\").VariableStatement);\n                return;\n            case ts.SyntaxKind.EmptyStatement:\n                createEmptyStatement(node as import(\"typescript-3.7.5\").EmptyStatement);\n                return;\n            case ts.SyntaxKind.ExpressionStatement:\n                createExpressionStatement(node as import(\"typescript-3.7.5\").ExpressionStatement);\n                return;\n            case ts.SyntaxKind.IfStatement:\n                createIf(node as import(\"typescript-3.7.5\").IfStatement);\n                return;\n            case ts.SyntaxKind.DoStatement:\n                createDo(node as import(\"typescript-3.7.5\").DoStatement);\n                return;\n            case ts.SyntaxKind.WhileStatement:\n                createWhile(node as import(\"typescript-3.7.5\").WhileStatement);\n                return;\n            case ts.SyntaxKind.ForStatement:\n                createFor(node as import(\"typescript-3.7.5\").ForStatement);\n                return;\n            case ts.SyntaxKind.ForInStatement:\n                createForIn(node as import(\"typescript-3.7.5\").ForInStatement);\n                return;\n            case ts.SyntaxKind.ForOfStatement:\n                createForOf(node as import(\"typescript-3.7.5\").ForOfStatement);\n                return;\n            case ts.SyntaxKind.ContinueStatement:\n                createContinue(node as import(\"typescript-3.7.5\").ContinueStatement);\n                return;\n            case ts.SyntaxKind.BreakStatement:\n                createBreak(node as import(\"typescript-3.7.5\").BreakStatement);\n                return;\n            case ts.SyntaxKind.ReturnStatement:\n                createReturn(node as import(\"typescript-3.7.5\").ReturnStatement);\n                return;\n            case ts.SyntaxKind.WithStatement:\n                createWith(node as import(\"typescript-3.7.5\").WithStatement);\n                return;\n            case ts.SyntaxKind.SwitchStatement:\n                createSwitch(node as import(\"typescript-3.7.5\").SwitchStatement);\n                return;\n            case ts.SyntaxKind.LabeledStatement:\n                createLabel(node as import(\"typescript-3.7.5\").LabeledStatement);\n                return;\n            case ts.SyntaxKind.ThrowStatement:\n                createThrow(node as import(\"typescript-3.7.5\").ThrowStatement);\n                return;\n            case ts.SyntaxKind.TryStatement:\n                createTry(node as import(\"typescript-3.7.5\").TryStatement);\n                return;\n            case ts.SyntaxKind.DebuggerStatement:\n                createDebuggerStatement(node as import(\"typescript-3.7.5\").DebuggerStatement);\n                return;\n            case ts.SyntaxKind.VariableDeclaration:\n                createVariableDeclaration(node as import(\"typescript-3.7.5\").VariableDeclaration);\n                return;\n            case ts.SyntaxKind.VariableDeclarationList:\n                createVariableDeclarationList(node as import(\"typescript-3.7.5\").VariableDeclarationList);\n                return;\n            case ts.SyntaxKind.FunctionDeclaration:\n                createFunctionDeclaration(node as import(\"typescript-3.7.5\").FunctionDeclaration);\n                return;\n            case ts.SyntaxKind.ClassDeclaration:\n                createClassDeclaration(node as import(\"typescript-3.7.5\").ClassDeclaration);\n                return;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                createInterfaceDeclaration(node as import(\"typescript-3.7.5\").InterfaceDeclaration);\n                return;\n            case ts.SyntaxKind.TypeAliasDeclaration:\n                createTypeAliasDeclaration(node as import(\"typescript-3.7.5\").TypeAliasDeclaration);\n                return;\n            case ts.SyntaxKind.EnumDeclaration:\n                createEnumDeclaration(node as import(\"typescript-3.7.5\").EnumDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleDeclaration:\n                createModuleDeclaration(node as import(\"typescript-3.7.5\").ModuleDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleBlock:\n                createModuleBlock(node as import(\"typescript-3.7.5\").ModuleBlock);\n                return;\n            case ts.SyntaxKind.CaseBlock:\n                createCaseBlock(node as import(\"typescript-3.7.5\").CaseBlock);\n                return;\n            case ts.SyntaxKind.NamespaceExportDeclaration:\n                createNamespaceExportDeclaration(node as import(\"typescript-3.7.5\").NamespaceExportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n                createImportEqualsDeclaration(node as import(\"typescript-3.7.5\").ImportEqualsDeclaration);\n                return;\n            case ts.SyntaxKind.ImportDeclaration:\n                createImportDeclaration(node as import(\"typescript-3.7.5\").ImportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportClause:\n                createImportClause(node as import(\"typescript-3.7.5\").ImportClause);\n                return;\n            case ts.SyntaxKind.NamespaceImport:\n                createNamespaceImport(node as import(\"typescript-3.7.5\").NamespaceImport);\n                return;\n            case ts.SyntaxKind.NamedImports:\n                createNamedImports(node as import(\"typescript-3.7.5\").NamedImports);\n                return;\n            case ts.SyntaxKind.ImportSpecifier:\n                createImportSpecifier(node as import(\"typescript-3.7.5\").ImportSpecifier);\n                return;\n            case ts.SyntaxKind.ExportAssignment:\n                createExportAssignment(node as import(\"typescript-3.7.5\").ExportAssignment);\n                return;\n            case ts.SyntaxKind.ExportDeclaration:\n                createExportDeclaration(node as import(\"typescript-3.7.5\").ExportDeclaration);\n                return;\n            case ts.SyntaxKind.NamedExports:\n                createNamedExports(node as import(\"typescript-3.7.5\").NamedExports);\n                return;\n            case ts.SyntaxKind.ExportSpecifier:\n                createExportSpecifier(node as import(\"typescript-3.7.5\").ExportSpecifier);\n                return;\n            case ts.SyntaxKind.ExternalModuleReference:\n                createExternalModuleReference(node as import(\"typescript-3.7.5\").ExternalModuleReference);\n                return;\n            case ts.SyntaxKind.JsxElement:\n                createJsxElement(node as import(\"typescript-3.7.5\").JsxElement);\n                return;\n            case ts.SyntaxKind.JsxSelfClosingElement:\n                createJsxSelfClosingElement(node as import(\"typescript-3.7.5\").JsxSelfClosingElement);\n                return;\n            case ts.SyntaxKind.JsxOpeningElement:\n                createJsxOpeningElement(node as import(\"typescript-3.7.5\").JsxOpeningElement);\n                return;\n            case ts.SyntaxKind.JsxClosingElement:\n                createJsxClosingElement(node as import(\"typescript-3.7.5\").JsxClosingElement);\n                return;\n            case ts.SyntaxKind.JsxFragment:\n                createJsxFragment(node as import(\"typescript-3.7.5\").JsxFragment);\n                return;\n            case ts.SyntaxKind.JsxText:\n                createJsxText(node as import(\"typescript-3.7.5\").JsxText);\n                return;\n            case ts.SyntaxKind.JsxOpeningFragment:\n                createJsxOpeningFragment(node as import(\"typescript-3.7.5\").JsxOpeningFragment);\n                return;\n            case ts.SyntaxKind.JsxClosingFragment:\n                createJsxJsxClosingFragment(node as import(\"typescript-3.7.5\").JsxClosingFragment);\n                return;\n            case ts.SyntaxKind.JsxAttribute:\n                createJsxAttribute(node as import(\"typescript-3.7.5\").JsxAttribute);\n                return;\n            case ts.SyntaxKind.JsxAttributes:\n                createJsxAttributes(node as import(\"typescript-3.7.5\").JsxAttributes);\n                return;\n            case ts.SyntaxKind.JsxSpreadAttribute:\n                createJsxSpreadAttribute(node as import(\"typescript-3.7.5\").JsxSpreadAttribute);\n                return;\n            case ts.SyntaxKind.JsxExpression:\n                createJsxExpression(node as import(\"typescript-3.7.5\").JsxExpression);\n                return;\n            case ts.SyntaxKind.CaseClause:\n                createCaseClause(node as import(\"typescript-3.7.5\").CaseClause);\n                return;\n            case ts.SyntaxKind.DefaultClause:\n                createDefaultClause(node as import(\"typescript-3.7.5\").DefaultClause);\n                return;\n            case ts.SyntaxKind.HeritageClause:\n                createHeritageClause(node as import(\"typescript-3.7.5\").HeritageClause);\n                return;\n            case ts.SyntaxKind.CatchClause:\n                createCatchClause(node as import(\"typescript-3.7.5\").CatchClause);\n                return;\n            case ts.SyntaxKind.PropertyAssignment:\n                createPropertyAssignment(node as import(\"typescript-3.7.5\").PropertyAssignment);\n                return;\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n                createShorthandPropertyAssignment(node as import(\"typescript-3.7.5\").ShorthandPropertyAssignment);\n                return;\n            case ts.SyntaxKind.SpreadAssignment:\n                createSpreadAssignment(node as import(\"typescript-3.7.5\").SpreadAssignment);\n                return;\n            case ts.SyntaxKind.EnumMember:\n                createEnumMember(node as import(\"typescript-3.7.5\").EnumMember);\n                return;\n            case ts.SyntaxKind.CommaListExpression:\n                createCommaList(node as import(\"typescript-3.7.5\").CommaListExpression);\n                return;\n            default:\n                if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {\n                    writer.write(\"ts.createToken(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n                    return;\n                }\n                writer.write(\"/* Unhandled node kind: \").write(syntaxKindToName[node.kind]).write(\" */\")\n        }\n    }\n\n    function writeNodeTextForTypeNode(node: import(\"typescript-3.7.5\").TypeNode) {\n        if (node.kind >= ts.SyntaxKind.FirstKeyword && node.kind <= ts.SyntaxKind.LastKeyword) {\n            writer.write(\"ts.createKeywordTypeNode(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n        }\n        else {\n            writeNodeText(node);\n        }\n    }\n\n    function createNumericLiteral(node: import(\"typescript-3.7.5\").NumericLiteral) {\n        writer.write(\"ts.createNumericLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createBigIntLiteral(node: import(\"typescript-3.7.5\").BigIntLiteral) {\n        writer.write(\"ts.createBigIntLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createStringLiteral(node: import(\"typescript-3.7.5\").StringLiteral) {\n        writer.write(\"ts.createStringLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createRegularExpressionLiteral(node: import(\"typescript-3.7.5\").RegularExpressionLiteral) {\n        writer.write(\"ts.createRegularExpressionLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createIdentifier(node: import(\"typescript-3.7.5\").Identifier) {\n        writer.write(\"ts.createIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createSuper(node: import(\"typescript-3.7.5\").SuperExpression) {\n        writer.write(\"ts.createSuper(\");\n        writer.write(\")\");\n    }\n\n    function createThis(node: import(\"typescript-3.7.5\").ThisExpression) {\n        writer.write(\"ts.createThis(\");\n        writer.write(\")\");\n    }\n\n    function createNull(node: import(\"typescript-3.7.5\").NullLiteral) {\n        writer.write(\"ts.createNull(\");\n        writer.write(\")\");\n    }\n\n    function createTrue(node: import(\"typescript-3.7.5\").BooleanLiteral) {\n        writer.write(\"ts.createTrue(\");\n        writer.write(\")\");\n    }\n\n    function createFalse(node: import(\"typescript-3.7.5\").BooleanLiteral) {\n        writer.write(\"ts.createFalse(\");\n        writer.write(\")\");\n    }\n\n    function createQualifiedName(node: import(\"typescript-3.7.5\").QualifiedName) {\n        writer.write(\"ts.createQualifiedName(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createComputedPropertyName(node: import(\"typescript-3.7.5\").ComputedPropertyName) {\n        writer.write(\"ts.createComputedPropertyName(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeParameterDeclaration(node: import(\"typescript-3.7.5\").TypeParameterDeclaration) {\n        writer.write(\"ts.createTypeParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.constraint == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.constraint)\n            }\n            writer.write(\",\").newLine();\n            if (node.default == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.default)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParameter(node: import(\"typescript-3.7.5\").ParameterDeclaration) {\n        writer.write(\"ts.createParameter(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDecorator(node: import(\"typescript-3.7.5\").Decorator) {\n        writer.write(\"ts.createDecorator(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPropertySignature(node: import(\"typescript-3.7.5\").PropertySignature) {\n        writer.write(\"ts.createPropertySignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createProperty(node: import(\"typescript-3.7.5\").PropertyDeclaration) {\n        writer.write(\"ts.createProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.QuestionToken)\");\n            else if (node.exclamationToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.ExclamationToken)\");\n            else\n                writer.write(\"undefined\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodSignature(node: import(\"typescript-3.7.5\").MethodSignature) {\n        writer.write(\"ts.createMethodSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethod(node: import(\"typescript-3.7.5\").MethodDeclaration) {\n        writer.write(\"ts.createMethod(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructor(node: import(\"typescript-3.7.5\").ConstructorDeclaration) {\n        writer.write(\"ts.createConstructor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createGetAccessor(node: import(\"typescript-3.7.5\").GetAccessorDeclaration) {\n        writer.write(\"ts.createGetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSetAccessor(node: import(\"typescript-3.7.5\").SetAccessorDeclaration) {\n        writer.write(\"ts.createSetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCallSignature(node: import(\"typescript-3.7.5\").CallSignatureDeclaration) {\n        writer.write(\"ts.createCallSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructSignature(node: import(\"typescript-3.7.5\").ConstructSignatureDeclaration) {\n        writer.write(\"ts.createConstructSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexSignature(node: import(\"typescript-3.7.5\").IndexSignatureDeclaration) {\n        writer.write(\"ts.createIndexSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createKeywordTypeNode(node: import(\"typescript-3.7.5\").KeywordTypeNode) {\n        writer.write(\"ts.createKeywordTypeNode(\");\n        writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.kind])\n        writer.write(\")\");\n    }\n\n    function createTypePredicateNodeWithModifier(node: import(\"typescript-3.7.5\").TypePredicateNode) {\n        writer.write(\"ts.createTypePredicateNodeWithModifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.assertsModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.assertsModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.parameterName)\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeReferenceNode(node: import(\"typescript-3.7.5\").TypeReferenceNode) {\n        writer.write(\"ts.createTypeReferenceNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.typeName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionTypeNode(node: import(\"typescript-3.7.5\").FunctionTypeNode) {\n        writer.write(\"ts.createFunctionTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorTypeNode(node: import(\"typescript-3.7.5\").ConstructorTypeNode) {\n        writer.write(\"ts.createConstructorTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeQueryNode(node: import(\"typescript-3.7.5\").TypeQueryNode) {\n        writer.write(\"ts.createTypeQueryNode(\");\n        writeNodeText(node.exprName)\n        writer.write(\")\");\n    }\n\n    function createTypeLiteralNode(node: import(\"typescript-3.7.5\").TypeLiteralNode) {\n        writer.write(\"ts.createTypeLiteralNode(\");\n        writer.write(\"[\");\n        if (node.members.length === 1) {\n            const item = node.members![0];\n            writeNodeText(item)\n        }\n        else if (node.members.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.members!.length; i++) {\n                    const item = node.members![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayTypeNode(node: import(\"typescript-3.7.5\").ArrayTypeNode) {\n        writer.write(\"ts.createArrayTypeNode(\");\n        writeNodeTextForTypeNode(node.elementType)\n        writer.write(\")\");\n    }\n\n    function createTupleTypeNode(node: import(\"typescript-3.7.5\").TupleTypeNode) {\n        writer.write(\"ts.createTupleTypeNode(\");\n        writer.write(\"[\");\n        if (node.elementTypes.length === 1) {\n            const item = node.elementTypes![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.elementTypes.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elementTypes!.length; i++) {\n                    const item = node.elementTypes![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createOptionalTypeNode(node: import(\"typescript-3.7.5\").OptionalTypeNode) {\n        writer.write(\"ts.createOptionalTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createRestTypeNode(node: import(\"typescript-3.7.5\").RestTypeNode) {\n        writer.write(\"ts.createRestTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createUnionTypeNode(node: import(\"typescript-3.7.5\").UnionTypeNode) {\n        writer.write(\"ts.createUnionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createIntersectionTypeNode(node: import(\"typescript-3.7.5\").IntersectionTypeNode) {\n        writer.write(\"ts.createIntersectionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createConditionalTypeNode(node: import(\"typescript-3.7.5\").ConditionalTypeNode) {\n        writer.write(\"ts.createConditionalTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.checkType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.extendsType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.trueType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.falseType)\n        });\n        writer.write(\")\");\n    }\n\n    function createInferTypeNode(node: import(\"typescript-3.7.5\").InferTypeNode) {\n        writer.write(\"ts.createInferTypeNode(\");\n        writeNodeText(node.typeParameter)\n        writer.write(\")\");\n    }\n\n    function createImportTypeNode(node: import(\"typescript-3.7.5\").ImportTypeNode) {\n        writer.write(\"ts.createImportTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.argument)\n            writer.write(\",\").newLine();\n            if (node.qualifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.qualifier)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isTypeOf == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isTypeOf.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedType(node: import(\"typescript-3.7.5\").ParenthesizedTypeNode) {\n        writer.write(\"ts.createParenthesizedType(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createThisTypeNode(node: import(\"typescript-3.7.5\").ThisTypeNode) {\n        writer.write(\"ts.createThisTypeNode(\");\n        writer.write(\")\");\n    }\n\n    function createTypeOperatorNode(node: import(\"typescript-3.7.5\").TypeOperatorNode) {\n        writer.write(\"ts.createTypeOperatorNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createIndexedAccessTypeNode(node: import(\"typescript-3.7.5\").IndexedAccessTypeNode) {\n        writer.write(\"ts.createIndexedAccessTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.objectType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.indexType)\n        });\n        writer.write(\")\");\n    }\n\n    function createMappedTypeNode(node: import(\"typescript-3.7.5\").MappedTypeNode) {\n        writer.write(\"ts.createMappedTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.readonlyToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.readonlyToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.typeParameter)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createLiteralTypeNode(node: import(\"typescript-3.7.5\").LiteralTypeNode) {\n        writer.write(\"ts.createLiteralTypeNode(\");\n        writeNodeText(node.literal)\n        writer.write(\")\");\n    }\n\n    function createObjectBindingPattern(node: import(\"typescript-3.7.5\").ObjectBindingPattern) {\n        writer.write(\"ts.createObjectBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayBindingPattern(node: import(\"typescript-3.7.5\").ArrayBindingPattern) {\n        writer.write(\"ts.createArrayBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createBindingElement(node: import(\"typescript-3.7.5\").BindingElement) {\n        writer.write(\"ts.createBindingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createArrayLiteral(node: import(\"typescript-3.7.5\").ArrayLiteralExpression) {\n        writer.write(\"ts.createArrayLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.elements.length === 1) {\n                const item = node.elements![0];\n                writeNodeText(item)\n            }\n            else if (node.elements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.elements!.length; i++) {\n                        const item = node.elements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectLiteral(node: import(\"typescript-3.7.5\").ObjectLiteralExpression) {\n        writer.write(\"ts.createObjectLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.properties.length === 1) {\n                const item = node.properties![0];\n                writeNodeText(item)\n            }\n            else if (node.properties.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.properties!.length; i++) {\n                        const item = node.properties![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccess(node: import(\"typescript-3.7.5\").PropertyAccessExpression) {\n        writer.write(\"ts.createPropertyAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccessChain(node: import(\"typescript-3.7.5\").PropertyAccessChain) {\n        writer.write(\"ts.createPropertyAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccess(node: import(\"typescript-3.7.5\").ElementAccessExpression) {\n        writer.write(\"ts.createElementAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccessChain(node: import(\"typescript-3.7.5\").ElementAccessChain) {\n        writer.write(\"ts.createElementAccessChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createCall(node: import(\"typescript-3.7.5\").CallExpression) {\n        writer.write(\"ts.createCall(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCallChain(node: import(\"typescript-3.7.5\").CallChain) {\n        writer.write(\"ts.createCallChain(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.questionDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createNew(node: import(\"typescript-3.7.5\").NewExpression) {\n        writer.write(\"ts.createNew(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.arguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.arguments.length === 1) {\n                    const item = node.arguments![0];\n                    writeNodeText(item)\n                }\n                else if (node.arguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.arguments!.length; i++) {\n                            const item = node.arguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTaggedTemplate(node: import(\"typescript-3.7.5\").TaggedTemplateExpression) {\n        writer.write(\"ts.createTaggedTemplate(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tag)\n            writer.write(\",\").newLine();\n            writeNodeText(node.template)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAssertion(node: import(\"typescript-3.7.5\").TypeAssertion) {\n        writer.write(\"ts.createTypeAssertion(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createParen(node: import(\"typescript-3.7.5\").ParenthesizedExpression) {\n        writer.write(\"ts.createParen(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createFunctionExpression(node: import(\"typescript-3.7.5\").FunctionExpression) {\n        writer.write(\"ts.createFunctionExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createArrowFunction(node: import(\"typescript-3.7.5\").ArrowFunction) {\n        writer.write(\"ts.createArrowFunction(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.equalsGreaterThanToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createDelete(node: import(\"typescript-3.7.5\").DeleteExpression) {\n        writer.write(\"ts.createDelete(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeOf(node: import(\"typescript-3.7.5\").TypeOfExpression) {\n        writer.write(\"ts.createTypeOf(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createVoid(node: import(\"typescript-3.7.5\").VoidExpression) {\n        writer.write(\"ts.createVoid(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createAwait(node: import(\"typescript-3.7.5\").AwaitExpression) {\n        writer.write(\"ts.createAwait(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPrefix(node: import(\"typescript-3.7.5\").PrefixUnaryExpression) {\n        writer.write(\"ts.createPrefix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeText(node.operand)\n        });\n        writer.write(\")\");\n    }\n\n    function createPostfix(node: import(\"typescript-3.7.5\").PostfixUnaryExpression) {\n        writer.write(\"ts.createPostfix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.operand)\n            writer.write(\",\").newLine();\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n        });\n        writer.write(\")\");\n    }\n\n    function createBinary(node: import(\"typescript-3.7.5\").BinaryExpression) {\n        writer.write(\"ts.createBinary(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.operatorToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createConditional(node: import(\"typescript-3.7.5\").ConditionalExpression) {\n        writer.write(\"ts.createConditional(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.condition)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenTrue)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenFalse)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateExpression(node: import(\"typescript-3.7.5\").TemplateExpression) {\n        writer.write(\"ts.createTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateHead(node: import(\"typescript-3.7.5\").TemplateHead) {\n        writer.write(\"ts.createTemplateHead(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateMiddle(node: import(\"typescript-3.7.5\").TemplateMiddle) {\n        writer.write(\"ts.createTemplateMiddle(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateTail(node: import(\"typescript-3.7.5\").TemplateTail) {\n        writer.write(\"ts.createTemplateTail(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNoSubstitutionTemplateLiteral(node: import(\"typescript-3.7.5\").NoSubstitutionTemplateLiteral) {\n        writer.write(\"ts.createNoSubstitutionTemplateLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            if (node.rawText == null)\n                writer.write(\"undefined\");\n            else {\n                writer.quote(node.rawText.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createYield(node: import(\"typescript-3.7.5\").YieldExpression) {\n        writer.write(\"ts.createYield(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createSpread(node: import(\"typescript-3.7.5\").SpreadElement) {\n        writer.write(\"ts.createSpread(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createClassExpression(node: import(\"typescript-3.7.5\").ClassExpression) {\n        writer.write(\"ts.createClassExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createOmittedExpression(node: import(\"typescript-3.7.5\").OmittedExpression) {\n        writer.write(\"ts.createOmittedExpression(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionWithTypeArguments(node: import(\"typescript-3.7.5\").ExpressionWithTypeArguments) {\n        writer.write(\"ts.createExpressionWithTypeArguments(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createAsExpression(node: import(\"typescript-3.7.5\").AsExpression) {\n        writer.write(\"ts.createAsExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createNonNullExpression(node: import(\"typescript-3.7.5\").NonNullExpression) {\n        writer.write(\"ts.createNonNullExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createMetaProperty(node: import(\"typescript-3.7.5\").MetaProperty) {\n        writer.write(\"ts.createMetaProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.keywordToken])\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateSpan(node: import(\"typescript-3.7.5\").TemplateSpan) {\n        writer.write(\"ts.createTemplateSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createSemicolonClassElement(node: import(\"typescript-3.7.5\").SemicolonClassElement) {\n        writer.write(\"ts.createSemicolonClassElement(\");\n        writer.write(\")\");\n    }\n\n    function createBlock(node: import(\"typescript-3.7.5\").Block) {\n        writer.write(\"ts.createBlock(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableStatement(node: import(\"typescript-3.7.5\").VariableStatement) {\n        writer.write(\"ts.createVariableStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.declarationList)\n        });\n        writer.write(\")\");\n    }\n\n    function createEmptyStatement(node: import(\"typescript-3.7.5\").EmptyStatement) {\n        writer.write(\"ts.createEmptyStatement(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionStatement(node: import(\"typescript-3.7.5\").ExpressionStatement) {\n        writer.write(\"ts.createExpressionStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createIf(node: import(\"typescript-3.7.5\").IfStatement) {\n        writer.write(\"ts.createIf(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.thenStatement)\n            writer.write(\",\").newLine();\n            if (node.elseStatement == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.elseStatement)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDo(node: import(\"typescript-3.7.5\").DoStatement) {\n        writer.write(\"ts.createDo(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.statement)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createWhile(node: import(\"typescript-3.7.5\").WhileStatement) {\n        writer.write(\"ts.createWhile(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createFor(node: import(\"typescript-3.7.5\").ForStatement) {\n        writer.write(\"ts.createFor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n            writer.write(\",\").newLine();\n            if (node.condition == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.condition)\n            }\n            writer.write(\",\").newLine();\n            if (node.incrementor == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.incrementor)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForIn(node: import(\"typescript-3.7.5\").ForInStatement) {\n        writer.write(\"ts.createForIn(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForOf(node: import(\"typescript-3.7.5\").ForOfStatement) {\n        writer.write(\"ts.createForOf(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.awaitModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.awaitModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createContinue(node: import(\"typescript-3.7.5\").ContinueStatement) {\n        writer.write(\"ts.createContinue(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createBreak(node: import(\"typescript-3.7.5\").BreakStatement) {\n        writer.write(\"ts.createBreak(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createReturn(node: import(\"typescript-3.7.5\").ReturnStatement) {\n        writer.write(\"ts.createReturn(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createWith(node: import(\"typescript-3.7.5\").WithStatement) {\n        writer.write(\"ts.createWith(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createSwitch(node: import(\"typescript-3.7.5\").SwitchStatement) {\n        writer.write(\"ts.createSwitch(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.caseBlock)\n        });\n        writer.write(\")\");\n    }\n\n    function createLabel(node: import(\"typescript-3.7.5\").LabeledStatement) {\n        writer.write(\"ts.createLabel(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.label)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createThrow(node: import(\"typescript-3.7.5\").ThrowStatement) {\n        writer.write(\"ts.createThrow(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createTry(node: import(\"typescript-3.7.5\").TryStatement) {\n        writer.write(\"ts.createTry(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tryBlock)\n            writer.write(\",\").newLine();\n            if (node.catchClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.catchClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.finallyBlock == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.finallyBlock)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDebuggerStatement(node: import(\"typescript-3.7.5\").DebuggerStatement) {\n        writer.write(\"ts.createDebuggerStatement(\");\n        writer.write(\")\");\n    }\n\n    function createVariableDeclaration(node: import(\"typescript-3.7.5\").VariableDeclaration) {\n        writer.write(\"ts.createVariableDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableDeclarationList(node: import(\"typescript-3.7.5\").VariableDeclarationList) {\n        writer.write(\"ts.createVariableDeclarationList(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.declarations.length === 1) {\n                const item = node.declarations![0];\n                writeNodeText(item)\n            }\n            else if (node.declarations.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.declarations!.length; i++) {\n                        const item = node.declarations![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionDeclaration(node: import(\"typescript-3.7.5\").FunctionDeclaration) {\n        writer.write(\"ts.createFunctionDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createClassDeclaration(node: import(\"typescript-3.7.5\").ClassDeclaration) {\n        writer.write(\"ts.createClassDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createInterfaceDeclaration(node: import(\"typescript-3.7.5\").InterfaceDeclaration) {\n        writer.write(\"ts.createInterfaceDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAliasDeclaration(node: import(\"typescript-3.7.5\").TypeAliasDeclaration) {\n        writer.write(\"ts.createTypeAliasDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createEnumDeclaration(node: import(\"typescript-3.7.5\").EnumDeclaration) {\n        writer.write(\"ts.createEnumDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleDeclaration(node: import(\"typescript-3.7.5\").ModuleDeclaration) {\n        writer.write(\"ts.createModuleDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleBlock(node: import(\"typescript-3.7.5\").ModuleBlock) {\n        writer.write(\"ts.createModuleBlock(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createCaseBlock(node: import(\"typescript-3.7.5\").CaseBlock) {\n        writer.write(\"ts.createCaseBlock(\");\n        writer.write(\"[\");\n        if (node.clauses.length === 1) {\n            const item = node.clauses![0];\n            writeNodeText(item)\n        }\n        else if (node.clauses.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.clauses!.length; i++) {\n                    const item = node.clauses![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamespaceExportDeclaration(node: import(\"typescript-3.7.5\").NamespaceExportDeclaration) {\n        writer.write(\"ts.createNamespaceExportDeclaration(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createImportEqualsDeclaration(node: import(\"typescript-3.7.5\").ImportEqualsDeclaration) {\n        writer.write(\"ts.createImportEqualsDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleReference)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportDeclaration(node: import(\"typescript-3.7.5\").ImportDeclaration) {\n        writer.write(\"ts.createImportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.importClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.importClause)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleSpecifier)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportClause(node: import(\"typescript-3.7.5\").ImportClause) {\n        writer.write(\"ts.createImportClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.namedBindings == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.namedBindings)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamespaceImport(node: import(\"typescript-3.7.5\").NamespaceImport) {\n        writer.write(\"ts.createNamespaceImport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamedImports(node: import(\"typescript-3.7.5\").NamedImports) {\n        writer.write(\"ts.createNamedImports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createImportSpecifier(node: import(\"typescript-3.7.5\").ImportSpecifier) {\n        writer.write(\"ts.createImportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportAssignment(node: import(\"typescript-3.7.5\").ExportAssignment) {\n        writer.write(\"ts.createExportAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isExportEquals == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isExportEquals.toString())\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportDeclaration(node: import(\"typescript-3.7.5\").ExportDeclaration) {\n        writer.write(\"ts.createExportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.exportClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exportClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.moduleSpecifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.moduleSpecifier)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamedExports(node: import(\"typescript-3.7.5\").NamedExports) {\n        writer.write(\"ts.createNamedExports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createExportSpecifier(node: import(\"typescript-3.7.5\").ExportSpecifier) {\n        writer.write(\"ts.createExportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExternalModuleReference(node: import(\"typescript-3.7.5\").ExternalModuleReference) {\n        writer.write(\"ts.createExternalModuleReference(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxElement(node: import(\"typescript-3.7.5\").JsxElement) {\n        writer.write(\"ts.createJsxElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingElement)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingElement)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxSelfClosingElement(node: import(\"typescript-3.7.5\").JsxSelfClosingElement) {\n        writer.write(\"ts.createJsxSelfClosingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningElement(node: import(\"typescript-3.7.5\").JsxOpeningElement) {\n        writer.write(\"ts.createJsxOpeningElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxClosingElement(node: import(\"typescript-3.7.5\").JsxClosingElement) {\n        writer.write(\"ts.createJsxClosingElement(\");\n        writeNodeText(node.tagName)\n        writer.write(\")\");\n    }\n\n    function createJsxFragment(node: import(\"typescript-3.7.5\").JsxFragment) {\n        writer.write(\"ts.createJsxFragment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingFragment)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingFragment)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxText(node: import(\"typescript-3.7.5\").JsxText) {\n        writer.write(\"ts.createJsxText(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            writer.write(node.containsOnlyTriviaWhiteSpaces.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningFragment(node: import(\"typescript-3.7.5\").JsxOpeningFragment) {\n        writer.write(\"ts.createJsxOpeningFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxJsxClosingFragment(node: import(\"typescript-3.7.5\").JsxClosingFragment) {\n        writer.write(\"ts.createJsxJsxClosingFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxAttribute(node: import(\"typescript-3.7.5\").JsxAttribute) {\n        writer.write(\"ts.createJsxAttribute(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxAttributes(node: import(\"typescript-3.7.5\").JsxAttributes) {\n        writer.write(\"ts.createJsxAttributes(\");\n        writer.write(\"[\");\n        if (node.properties.length === 1) {\n            const item = node.properties![0];\n            writeNodeText(item)\n        }\n        else if (node.properties.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.properties!.length; i++) {\n                    const item = node.properties![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createJsxSpreadAttribute(node: import(\"typescript-3.7.5\").JsxSpreadAttribute) {\n        writer.write(\"ts.createJsxSpreadAttribute(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxExpression(node: import(\"typescript-3.7.5\").JsxExpression) {\n        writer.write(\"ts.createJsxExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCaseClause(node: import(\"typescript-3.7.5\").CaseClause) {\n        writer.write(\"ts.createCaseClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createDefaultClause(node: import(\"typescript-3.7.5\").DefaultClause) {\n        writer.write(\"ts.createDefaultClause(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createHeritageClause(node: import(\"typescript-3.7.5\").HeritageClause) {\n        writer.write(\"ts.createHeritageClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.token])\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.types.length === 1) {\n                const item = node.types![0];\n                writeNodeText(item)\n            }\n            else if (node.types.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.types!.length; i++) {\n                        const item = node.types![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCatchClause(node: import(\"typescript-3.7.5\").CatchClause) {\n        writer.write(\"ts.createCatchClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.variableDeclaration == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.variableDeclaration)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.block)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAssignment(node: import(\"typescript-3.7.5\").PropertyAssignment) {\n        writer.write(\"ts.createPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n        });\n        writer.write(\")\");\n    }\n\n    function createShorthandPropertyAssignment(node: import(\"typescript-3.7.5\").ShorthandPropertyAssignment) {\n        writer.write(\"ts.createShorthandPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.objectAssignmentInitializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.objectAssignmentInitializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadAssignment(node: import(\"typescript-3.7.5\").SpreadAssignment) {\n        writer.write(\"ts.createSpreadAssignment(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createEnumMember(node: import(\"typescript-3.7.5\").EnumMember) {\n        writer.write(\"ts.createEnumMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCommaList(node: import(\"typescript-3.7.5\").CommaListExpression) {\n        writer.write(\"ts.createCommaList(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createSyntaxKindToNameMap() {\n        const map: { [kind: number]: string } = {};\n        for (const name of Object.keys(ts.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n            const value = (ts.SyntaxKind as any)[name] as number;\n            if (map[value] == null)\n                map[value] = name;\n        }\n        return map;\n    }\n\n    function getNodeFlagValues(value: number) {\n        // ignore the BlockScoped node flag\n        return getFlagValuesAsString(ts.NodeFlags, \"ts.NodeFlags\", value || 0, \"None\", getFlagValues(ts.NodeFlags, value).filter(v => v !== ts.NodeFlags.BlockScoped));\n    }\n\n    function getFlagValuesAsString(enumObj: any, enumName: string, value: number, defaultName: string, flagValues?: number[]) {\n        flagValues = flagValues || getFlagValues(enumObj, value);\n        const members: string[] = [];\n        for (const flagValue of flagValues)\n            members.push(enumName + \".\" + enumObj[flagValue]);\n        if (members.length === 0)\n            members.push(enumName + \".\" + defaultName);\n        return members.join(\" | \");\n    }\n\n    function getFlagValues(enumObj: any, value: number) {\n        const members: number[] = [];\n        for (const prop in enumObj) {\n            if (typeof enumObj[prop] === \"string\")\n                continue;\n            if ((enumObj[prop] & value) !== 0)\n                members.push(enumObj[prop]);\n        }\n        return members;\n    }\n}\n"],"sourceRoot":""}