{"version":3,"sources":["resources/factoryCode/typescript-3.5.3.ts"],"names":["generateFactoryCode","ts","initialNode","writer","CodeBlockWriter","newLine","indentNumberOfSpaces","syntaxKindToName","map","Object","keys","SyntaxKind","filter","k","isNaN","parseInt","name","value","createSyntaxKindToNameMap","isSourceFile","write","statements","length","indent","i","statement","writeNodeText","newLineIfLastNot","toString","node","kind","NumericLiteral","quote","text","createNumericLiteral","BigIntLiteral","createBigIntLiteral","StringLiteral","createStringLiteral","RegularExpressionLiteral","createRegularExpressionLiteral","Identifier","createIdentifier","SuperKeyword","ThisKeyword","NullKeyword","TrueKeyword","FalseKeyword","QualifiedName","left","right","createQualifiedName","ComputedPropertyName","expression","createComputedPropertyName","TypeParameter","constraint","writeNodeTextForTypeNode","default","createTypeParameterDeclaration","Parameter","decorators","item","modifiers","dotDotDotToken","questionToken","type","initializer","createParameter","Decorator","createDecorator","PropertySignature","createPropertySignature","PropertyDeclaration","exclamationToken","createProperty","MethodSignature","typeParameters","parameters","createMethodSignature","MethodDeclaration","asteriskToken","body","createMethod","Constructor","createConstructor","GetAccessor","createGetAccessor","SetAccessor","createSetAccessor","CallSignature","createCallSignature","ConstructSignature","createConstructSignature","IndexSignature","createIndexSignature","AnyKeyword","BooleanKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","BigIntKeyword","createKeywordTypeNode","TypePredicate","parameterName","createTypePredicateNode","TypeReference","typeName","typeArguments","createTypeReferenceNode","FunctionType","createFunctionTypeNode","ConstructorType","createConstructorTypeNode","TypeQuery","exprName","createTypeQueryNode","TypeLiteral","members","createTypeLiteralNode","ArrayType","elementType","createArrayTypeNode","TupleType","elementTypes","createTupleTypeNode","OptionalType","createOptionalTypeNode","RestType","createRestTypeNode","UnionType","types","createUnionTypeNode","IntersectionType","createIntersectionTypeNode","ConditionalType","checkType","extendsType","trueType","falseType","createConditionalTypeNode","InferType","typeParameter","createInferTypeNode","ImportType","argument","qualifier","isTypeOf","createImportTypeNode","ParenthesizedType","createParenthesizedType","ThisType","TypeOperator","createTypeOperatorNode","IndexedAccessType","objectType","indexType","createIndexedAccessTypeNode","MappedType","readonlyToken","createMappedTypeNode","LiteralType","literal","createLiteralTypeNode","ObjectBindingPattern","elements","createObjectBindingPattern","ArrayBindingPattern","createArrayBindingPattern","BindingElement","propertyName","createBindingElement","ArrayLiteralExpression","multiLine","createArrayLiteral","ObjectLiteralExpression","properties","createObjectLiteral","PropertyAccessExpression","createPropertyAccess","ElementAccessExpression","argumentExpression","createElementAccess","CallExpression","arguments","createCall","NewExpression","createNew","TaggedTemplateExpression","tag","template","createTaggedTemplate","TypeAssertionExpression","createTypeAssertion","ParenthesizedExpression","createParen","FunctionExpression","createFunctionExpression","ArrowFunction","equalsGreaterThanToken","createArrowFunction","DeleteExpression","createDelete","TypeOfExpression","createTypeOf","VoidExpression","createVoid","AwaitExpression","createAwait","PrefixUnaryExpression","operator","operand","createPrefix","PostfixUnaryExpression","createPostfix","BinaryExpression","operatorToken","createBinary","ConditionalExpression","condition","whenTrue","whenFalse","createConditional","TemplateExpression","head","templateSpans","createTemplateExpression","TemplateHead","createTemplateHead","TemplateMiddle","createTemplateMiddle","TemplateTail","createTemplateTail","NoSubstitutionTemplateLiteral","createNoSubstitutionTemplateLiteral","YieldExpression","createYield","SpreadElement","createSpread","ClassExpression","heritageClauses","createClassExpression","OmittedExpression","ExpressionWithTypeArguments","createExpressionWithTypeArguments","AsExpression","createAsExpression","NonNullExpression","createNonNullExpression","MetaProperty","keywordToken","createMetaProperty","TemplateSpan","createTemplateSpan","SemicolonClassElement","Block","createBlock","VariableStatement","declarationList","createVariableStatement","EmptyStatement","ExpressionStatement","createExpressionStatement","IfStatement","thenStatement","elseStatement","createIf","DoStatement","createDo","WhileStatement","createWhile","ForStatement","incrementor","createFor","ForInStatement","createForIn","ForOfStatement","awaitModifier","createForOf","ContinueStatement","label","createContinue","BreakStatement","createBreak","ReturnStatement","createReturn","WithStatement","createWith","SwitchStatement","caseBlock","createSwitch","LabeledStatement","createLabel","ThrowStatement","createThrow","TryStatement","tryBlock","catchClause","finallyBlock","createTry","DebuggerStatement","VariableDeclaration","createVariableDeclaration","VariableDeclarationList","declarations","getNodeFlagValues","flags","createVariableDeclarationList","FunctionDeclaration","createFunctionDeclaration","ClassDeclaration","createClassDeclaration","InterfaceDeclaration","createInterfaceDeclaration","TypeAliasDeclaration","createTypeAliasDeclaration","EnumDeclaration","createEnumDeclaration","ModuleDeclaration","createModuleDeclaration","ModuleBlock","createModuleBlock","CaseBlock","clauses","createCaseBlock","NamespaceExportDeclaration","createNamespaceExportDeclaration","ImportEqualsDeclaration","moduleReference","createImportEqualsDeclaration","ImportDeclaration","importClause","moduleSpecifier","createImportDeclaration","ImportClause","namedBindings","createImportClause","NamespaceImport","createNamespaceImport","NamedImports","createNamedImports","ImportSpecifier","createImportSpecifier","ExportAssignment","isExportEquals","createExportAssignment","ExportDeclaration","exportClause","createExportDeclaration","NamedExports","createNamedExports","ExportSpecifier","createExportSpecifier","ExternalModuleReference","createExternalModuleReference","JsxElement","openingElement","children","closingElement","createJsxElement","JsxSelfClosingElement","tagName","attributes","createJsxSelfClosingElement","JsxOpeningElement","createJsxOpeningElement","JsxClosingElement","createJsxClosingElement","JsxFragment","openingFragment","closingFragment","createJsxFragment","JsxText","containsOnlyTriviaWhiteSpaces","createJsxText","JsxOpeningFragment","JsxClosingFragment","JsxAttribute","createJsxAttribute","JsxAttributes","createJsxAttributes","JsxSpreadAttribute","createJsxSpreadAttribute","JsxExpression","createJsxExpression","CaseClause","createCaseClause","DefaultClause","createDefaultClause","HeritageClause","token","createHeritageClause","CatchClause","variableDeclaration","block","createCatchClause","PropertyAssignment","createPropertyAssignment","ShorthandPropertyAssignment","objectAssignmentInitializer","createShorthandPropertyAssignment","SpreadAssignment","createSpreadAssignment","EnumMember","createEnumMember","CommaListExpression","createCommaList","FirstToken","LastToken","FirstKeyword","LastKeyword","enumObj","enumName","defaultName","flagValues","getFlagValues","flagValue","push","join","getFlagValuesAsString","NodeFlags","v","BlockScoped","prop"],"mappings":"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","file":"static/js/38.fc5d01ff.chunk.js","sourcesContent":["import CodeBlockWriter from \"code-block-writer\";\n\nexport function generateFactoryCode(ts: typeof import(\"typescript-3.5.3\"), initialNode: import(\"typescript-3.5.3\").Node) {\n    const writer = new CodeBlockWriter({ newLine: \"\\n\", indentNumberOfSpaces: 2 });\n    const syntaxKindToName = createSyntaxKindToNameMap();\n\n    if (ts.isSourceFile(initialNode)) {\n        writer.write(\"[\");\n        if (initialNode.statements.length > 0) {\n            writer.indent(() => {\n                for (let i = 0; i < initialNode.statements.length; i++) {\n                    const statement = initialNode.statements[i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(statement);\n                }\n            }).newLine();\n        }\n        writer.write(\"];\");\n    }\n    else {\n        writeNodeText(initialNode);\n    }\n    writer.newLineIfLastNot();\n\n    return writer.toString();\n\n    function writeNodeText(node: import(\"typescript-3.5.3\").Node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.NumericLiteral:\n                createNumericLiteral(node as import(\"typescript-3.5.3\").NumericLiteral);\n                return;\n            case ts.SyntaxKind.BigIntLiteral:\n                createBigIntLiteral(node as import(\"typescript-3.5.3\").BigIntLiteral);\n                return;\n            case ts.SyntaxKind.StringLiteral:\n                createStringLiteral(node as import(\"typescript-3.5.3\").StringLiteral);\n                return;\n            case ts.SyntaxKind.RegularExpressionLiteral:\n                createRegularExpressionLiteral(node as import(\"typescript-3.5.3\").RegularExpressionLiteral);\n                return;\n            case ts.SyntaxKind.Identifier:\n                createIdentifier(node as import(\"typescript-3.5.3\").Identifier);\n                return;\n            case ts.SyntaxKind.SuperKeyword:\n                createSuper(node as import(\"typescript-3.5.3\").SuperExpression);\n                return;\n            case ts.SyntaxKind.ThisKeyword:\n                createThis(node as import(\"typescript-3.5.3\").ThisExpression);\n                return;\n            case ts.SyntaxKind.NullKeyword:\n                createNull(node as import(\"typescript-3.5.3\").NullLiteral);\n                return;\n            case ts.SyntaxKind.TrueKeyword:\n                createTrue(node as import(\"typescript-3.5.3\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.FalseKeyword:\n                createFalse(node as import(\"typescript-3.5.3\").BooleanLiteral);\n                return;\n            case ts.SyntaxKind.QualifiedName:\n                createQualifiedName(node as import(\"typescript-3.5.3\").QualifiedName);\n                return;\n            case ts.SyntaxKind.ComputedPropertyName:\n                createComputedPropertyName(node as import(\"typescript-3.5.3\").ComputedPropertyName);\n                return;\n            case ts.SyntaxKind.TypeParameter:\n                createTypeParameterDeclaration(node as import(\"typescript-3.5.3\").TypeParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Parameter:\n                createParameter(node as import(\"typescript-3.5.3\").ParameterDeclaration);\n                return;\n            case ts.SyntaxKind.Decorator:\n                createDecorator(node as import(\"typescript-3.5.3\").Decorator);\n                return;\n            case ts.SyntaxKind.PropertySignature:\n                createPropertySignature(node as import(\"typescript-3.5.3\").PropertySignature);\n                return;\n            case ts.SyntaxKind.PropertyDeclaration:\n                createProperty(node as import(\"typescript-3.5.3\").PropertyDeclaration);\n                return;\n            case ts.SyntaxKind.MethodSignature:\n                createMethodSignature(node as import(\"typescript-3.5.3\").MethodSignature);\n                return;\n            case ts.SyntaxKind.MethodDeclaration:\n                createMethod(node as import(\"typescript-3.5.3\").MethodDeclaration);\n                return;\n            case ts.SyntaxKind.Constructor:\n                createConstructor(node as import(\"typescript-3.5.3\").ConstructorDeclaration);\n                return;\n            case ts.SyntaxKind.GetAccessor:\n                createGetAccessor(node as import(\"typescript-3.5.3\").GetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.SetAccessor:\n                createSetAccessor(node as import(\"typescript-3.5.3\").SetAccessorDeclaration);\n                return;\n            case ts.SyntaxKind.CallSignature:\n                createCallSignature(node as import(\"typescript-3.5.3\").CallSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.ConstructSignature:\n                createConstructSignature(node as import(\"typescript-3.5.3\").ConstructSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.IndexSignature:\n                createIndexSignature(node as import(\"typescript-3.5.3\").IndexSignatureDeclaration);\n                return;\n            case ts.SyntaxKind.AnyKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BooleanKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NeverKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.NumberKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.StringKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.SymbolKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UndefinedKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.UnknownKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.BigIntKeyword:\n                createKeywordTypeNode(node as import(\"typescript-3.5.3\").KeywordTypeNode);\n                return;\n            case ts.SyntaxKind.TypePredicate:\n                createTypePredicateNode(node as import(\"typescript-3.5.3\").TypePredicateNode);\n                return;\n            case ts.SyntaxKind.TypeReference:\n                createTypeReferenceNode(node as import(\"typescript-3.5.3\").TypeReferenceNode);\n                return;\n            case ts.SyntaxKind.FunctionType:\n                createFunctionTypeNode(node as import(\"typescript-3.5.3\").FunctionTypeNode);\n                return;\n            case ts.SyntaxKind.ConstructorType:\n                createConstructorTypeNode(node as import(\"typescript-3.5.3\").ConstructorTypeNode);\n                return;\n            case ts.SyntaxKind.TypeQuery:\n                createTypeQueryNode(node as import(\"typescript-3.5.3\").TypeQueryNode);\n                return;\n            case ts.SyntaxKind.TypeLiteral:\n                createTypeLiteralNode(node as import(\"typescript-3.5.3\").TypeLiteralNode);\n                return;\n            case ts.SyntaxKind.ArrayType:\n                createArrayTypeNode(node as import(\"typescript-3.5.3\").ArrayTypeNode);\n                return;\n            case ts.SyntaxKind.TupleType:\n                createTupleTypeNode(node as import(\"typescript-3.5.3\").TupleTypeNode);\n                return;\n            case ts.SyntaxKind.OptionalType:\n                createOptionalTypeNode(node as import(\"typescript-3.5.3\").OptionalTypeNode);\n                return;\n            case ts.SyntaxKind.RestType:\n                createRestTypeNode(node as import(\"typescript-3.5.3\").RestTypeNode);\n                return;\n            case ts.SyntaxKind.UnionType:\n                createUnionTypeNode(node as import(\"typescript-3.5.3\").UnionTypeNode);\n                return;\n            case ts.SyntaxKind.IntersectionType:\n                createIntersectionTypeNode(node as import(\"typescript-3.5.3\").IntersectionTypeNode);\n                return;\n            case ts.SyntaxKind.ConditionalType:\n                createConditionalTypeNode(node as import(\"typescript-3.5.3\").ConditionalTypeNode);\n                return;\n            case ts.SyntaxKind.InferType:\n                createInferTypeNode(node as import(\"typescript-3.5.3\").InferTypeNode);\n                return;\n            case ts.SyntaxKind.ImportType:\n                createImportTypeNode(node as import(\"typescript-3.5.3\").ImportTypeNode);\n                return;\n            case ts.SyntaxKind.ParenthesizedType:\n                createParenthesizedType(node as import(\"typescript-3.5.3\").ParenthesizedTypeNode);\n                return;\n            case ts.SyntaxKind.ThisType:\n                createThisTypeNode(node as import(\"typescript-3.5.3\").ThisTypeNode);\n                return;\n            case ts.SyntaxKind.TypeOperator:\n                createTypeOperatorNode(node as import(\"typescript-3.5.3\").TypeOperatorNode);\n                return;\n            case ts.SyntaxKind.IndexedAccessType:\n                createIndexedAccessTypeNode(node as import(\"typescript-3.5.3\").IndexedAccessTypeNode);\n                return;\n            case ts.SyntaxKind.MappedType:\n                createMappedTypeNode(node as import(\"typescript-3.5.3\").MappedTypeNode);\n                return;\n            case ts.SyntaxKind.LiteralType:\n                createLiteralTypeNode(node as import(\"typescript-3.5.3\").LiteralTypeNode);\n                return;\n            case ts.SyntaxKind.ObjectBindingPattern:\n                createObjectBindingPattern(node as import(\"typescript-3.5.3\").ObjectBindingPattern);\n                return;\n            case ts.SyntaxKind.ArrayBindingPattern:\n                createArrayBindingPattern(node as import(\"typescript-3.5.3\").ArrayBindingPattern);\n                return;\n            case ts.SyntaxKind.BindingElement:\n                createBindingElement(node as import(\"typescript-3.5.3\").BindingElement);\n                return;\n            case ts.SyntaxKind.ArrayLiteralExpression:\n                createArrayLiteral(node as import(\"typescript-3.5.3\").ArrayLiteralExpression);\n                return;\n            case ts.SyntaxKind.ObjectLiteralExpression:\n                createObjectLiteral(node as import(\"typescript-3.5.3\").ObjectLiteralExpression);\n                return;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                createPropertyAccess(node as import(\"typescript-3.5.3\").PropertyAccessExpression);\n                return;\n            case ts.SyntaxKind.ElementAccessExpression:\n                createElementAccess(node as import(\"typescript-3.5.3\").ElementAccessExpression);\n                return;\n            case ts.SyntaxKind.CallExpression:\n                createCall(node as import(\"typescript-3.5.3\").CallExpression);\n                return;\n            case ts.SyntaxKind.NewExpression:\n                createNew(node as import(\"typescript-3.5.3\").NewExpression);\n                return;\n            case ts.SyntaxKind.TaggedTemplateExpression:\n                createTaggedTemplate(node as import(\"typescript-3.5.3\").TaggedTemplateExpression);\n                return;\n            case ts.SyntaxKind.TypeAssertionExpression:\n                createTypeAssertion(node as import(\"typescript-3.5.3\").TypeAssertion);\n                return;\n            case ts.SyntaxKind.ParenthesizedExpression:\n                createParen(node as import(\"typescript-3.5.3\").ParenthesizedExpression);\n                return;\n            case ts.SyntaxKind.FunctionExpression:\n                createFunctionExpression(node as import(\"typescript-3.5.3\").FunctionExpression);\n                return;\n            case ts.SyntaxKind.ArrowFunction:\n                createArrowFunction(node as import(\"typescript-3.5.3\").ArrowFunction);\n                return;\n            case ts.SyntaxKind.DeleteExpression:\n                createDelete(node as import(\"typescript-3.5.3\").DeleteExpression);\n                return;\n            case ts.SyntaxKind.TypeOfExpression:\n                createTypeOf(node as import(\"typescript-3.5.3\").TypeOfExpression);\n                return;\n            case ts.SyntaxKind.VoidExpression:\n                createVoid(node as import(\"typescript-3.5.3\").VoidExpression);\n                return;\n            case ts.SyntaxKind.AwaitExpression:\n                createAwait(node as import(\"typescript-3.5.3\").AwaitExpression);\n                return;\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                createPrefix(node as import(\"typescript-3.5.3\").PrefixUnaryExpression);\n                return;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n                createPostfix(node as import(\"typescript-3.5.3\").PostfixUnaryExpression);\n                return;\n            case ts.SyntaxKind.BinaryExpression:\n                createBinary(node as import(\"typescript-3.5.3\").BinaryExpression);\n                return;\n            case ts.SyntaxKind.ConditionalExpression:\n                createConditional(node as import(\"typescript-3.5.3\").ConditionalExpression);\n                return;\n            case ts.SyntaxKind.TemplateExpression:\n                createTemplateExpression(node as import(\"typescript-3.5.3\").TemplateExpression);\n                return;\n            case ts.SyntaxKind.TemplateHead:\n                createTemplateHead(node as import(\"typescript-3.5.3\").TemplateHead);\n                return;\n            case ts.SyntaxKind.TemplateMiddle:\n                createTemplateMiddle(node as import(\"typescript-3.5.3\").TemplateMiddle);\n                return;\n            case ts.SyntaxKind.TemplateTail:\n                createTemplateTail(node as import(\"typescript-3.5.3\").TemplateTail);\n                return;\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                createNoSubstitutionTemplateLiteral(node as import(\"typescript-3.5.3\").NoSubstitutionTemplateLiteral);\n                return;\n            case ts.SyntaxKind.YieldExpression:\n                createYield(node as import(\"typescript-3.5.3\").YieldExpression);\n                return;\n            case ts.SyntaxKind.SpreadElement:\n                createSpread(node as import(\"typescript-3.5.3\").SpreadElement);\n                return;\n            case ts.SyntaxKind.ClassExpression:\n                createClassExpression(node as import(\"typescript-3.5.3\").ClassExpression);\n                return;\n            case ts.SyntaxKind.OmittedExpression:\n                createOmittedExpression(node as import(\"typescript-3.5.3\").OmittedExpression);\n                return;\n            case ts.SyntaxKind.ExpressionWithTypeArguments:\n                createExpressionWithTypeArguments(node as import(\"typescript-3.5.3\").ExpressionWithTypeArguments);\n                return;\n            case ts.SyntaxKind.AsExpression:\n                createAsExpression(node as import(\"typescript-3.5.3\").AsExpression);\n                return;\n            case ts.SyntaxKind.NonNullExpression:\n                createNonNullExpression(node as import(\"typescript-3.5.3\").NonNullExpression);\n                return;\n            case ts.SyntaxKind.MetaProperty:\n                createMetaProperty(node as import(\"typescript-3.5.3\").MetaProperty);\n                return;\n            case ts.SyntaxKind.TemplateSpan:\n                createTemplateSpan(node as import(\"typescript-3.5.3\").TemplateSpan);\n                return;\n            case ts.SyntaxKind.SemicolonClassElement:\n                createSemicolonClassElement(node as import(\"typescript-3.5.3\").SemicolonClassElement);\n                return;\n            case ts.SyntaxKind.Block:\n                createBlock(node as import(\"typescript-3.5.3\").Block);\n                return;\n            case ts.SyntaxKind.VariableStatement:\n                createVariableStatement(node as import(\"typescript-3.5.3\").VariableStatement);\n                return;\n            case ts.SyntaxKind.EmptyStatement:\n                createEmptyStatement(node as import(\"typescript-3.5.3\").EmptyStatement);\n                return;\n            case ts.SyntaxKind.ExpressionStatement:\n                createExpressionStatement(node as import(\"typescript-3.5.3\").ExpressionStatement);\n                return;\n            case ts.SyntaxKind.IfStatement:\n                createIf(node as import(\"typescript-3.5.3\").IfStatement);\n                return;\n            case ts.SyntaxKind.DoStatement:\n                createDo(node as import(\"typescript-3.5.3\").DoStatement);\n                return;\n            case ts.SyntaxKind.WhileStatement:\n                createWhile(node as import(\"typescript-3.5.3\").WhileStatement);\n                return;\n            case ts.SyntaxKind.ForStatement:\n                createFor(node as import(\"typescript-3.5.3\").ForStatement);\n                return;\n            case ts.SyntaxKind.ForInStatement:\n                createForIn(node as import(\"typescript-3.5.3\").ForInStatement);\n                return;\n            case ts.SyntaxKind.ForOfStatement:\n                createForOf(node as import(\"typescript-3.5.3\").ForOfStatement);\n                return;\n            case ts.SyntaxKind.ContinueStatement:\n                createContinue(node as import(\"typescript-3.5.3\").ContinueStatement);\n                return;\n            case ts.SyntaxKind.BreakStatement:\n                createBreak(node as import(\"typescript-3.5.3\").BreakStatement);\n                return;\n            case ts.SyntaxKind.ReturnStatement:\n                createReturn(node as import(\"typescript-3.5.3\").ReturnStatement);\n                return;\n            case ts.SyntaxKind.WithStatement:\n                createWith(node as import(\"typescript-3.5.3\").WithStatement);\n                return;\n            case ts.SyntaxKind.SwitchStatement:\n                createSwitch(node as import(\"typescript-3.5.3\").SwitchStatement);\n                return;\n            case ts.SyntaxKind.LabeledStatement:\n                createLabel(node as import(\"typescript-3.5.3\").LabeledStatement);\n                return;\n            case ts.SyntaxKind.ThrowStatement:\n                createThrow(node as import(\"typescript-3.5.3\").ThrowStatement);\n                return;\n            case ts.SyntaxKind.TryStatement:\n                createTry(node as import(\"typescript-3.5.3\").TryStatement);\n                return;\n            case ts.SyntaxKind.DebuggerStatement:\n                createDebuggerStatement(node as import(\"typescript-3.5.3\").DebuggerStatement);\n                return;\n            case ts.SyntaxKind.VariableDeclaration:\n                createVariableDeclaration(node as import(\"typescript-3.5.3\").VariableDeclaration);\n                return;\n            case ts.SyntaxKind.VariableDeclarationList:\n                createVariableDeclarationList(node as import(\"typescript-3.5.3\").VariableDeclarationList);\n                return;\n            case ts.SyntaxKind.FunctionDeclaration:\n                createFunctionDeclaration(node as import(\"typescript-3.5.3\").FunctionDeclaration);\n                return;\n            case ts.SyntaxKind.ClassDeclaration:\n                createClassDeclaration(node as import(\"typescript-3.5.3\").ClassDeclaration);\n                return;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                createInterfaceDeclaration(node as import(\"typescript-3.5.3\").InterfaceDeclaration);\n                return;\n            case ts.SyntaxKind.TypeAliasDeclaration:\n                createTypeAliasDeclaration(node as import(\"typescript-3.5.3\").TypeAliasDeclaration);\n                return;\n            case ts.SyntaxKind.EnumDeclaration:\n                createEnumDeclaration(node as import(\"typescript-3.5.3\").EnumDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleDeclaration:\n                createModuleDeclaration(node as import(\"typescript-3.5.3\").ModuleDeclaration);\n                return;\n            case ts.SyntaxKind.ModuleBlock:\n                createModuleBlock(node as import(\"typescript-3.5.3\").ModuleBlock);\n                return;\n            case ts.SyntaxKind.CaseBlock:\n                createCaseBlock(node as import(\"typescript-3.5.3\").CaseBlock);\n                return;\n            case ts.SyntaxKind.NamespaceExportDeclaration:\n                createNamespaceExportDeclaration(node as import(\"typescript-3.5.3\").NamespaceExportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n                createImportEqualsDeclaration(node as import(\"typescript-3.5.3\").ImportEqualsDeclaration);\n                return;\n            case ts.SyntaxKind.ImportDeclaration:\n                createImportDeclaration(node as import(\"typescript-3.5.3\").ImportDeclaration);\n                return;\n            case ts.SyntaxKind.ImportClause:\n                createImportClause(node as import(\"typescript-3.5.3\").ImportClause);\n                return;\n            case ts.SyntaxKind.NamespaceImport:\n                createNamespaceImport(node as import(\"typescript-3.5.3\").NamespaceImport);\n                return;\n            case ts.SyntaxKind.NamedImports:\n                createNamedImports(node as import(\"typescript-3.5.3\").NamedImports);\n                return;\n            case ts.SyntaxKind.ImportSpecifier:\n                createImportSpecifier(node as import(\"typescript-3.5.3\").ImportSpecifier);\n                return;\n            case ts.SyntaxKind.ExportAssignment:\n                createExportAssignment(node as import(\"typescript-3.5.3\").ExportAssignment);\n                return;\n            case ts.SyntaxKind.ExportDeclaration:\n                createExportDeclaration(node as import(\"typescript-3.5.3\").ExportDeclaration);\n                return;\n            case ts.SyntaxKind.NamedExports:\n                createNamedExports(node as import(\"typescript-3.5.3\").NamedExports);\n                return;\n            case ts.SyntaxKind.ExportSpecifier:\n                createExportSpecifier(node as import(\"typescript-3.5.3\").ExportSpecifier);\n                return;\n            case ts.SyntaxKind.ExternalModuleReference:\n                createExternalModuleReference(node as import(\"typescript-3.5.3\").ExternalModuleReference);\n                return;\n            case ts.SyntaxKind.JsxElement:\n                createJsxElement(node as import(\"typescript-3.5.3\").JsxElement);\n                return;\n            case ts.SyntaxKind.JsxSelfClosingElement:\n                createJsxSelfClosingElement(node as import(\"typescript-3.5.3\").JsxSelfClosingElement);\n                return;\n            case ts.SyntaxKind.JsxOpeningElement:\n                createJsxOpeningElement(node as import(\"typescript-3.5.3\").JsxOpeningElement);\n                return;\n            case ts.SyntaxKind.JsxClosingElement:\n                createJsxClosingElement(node as import(\"typescript-3.5.3\").JsxClosingElement);\n                return;\n            case ts.SyntaxKind.JsxFragment:\n                createJsxFragment(node as import(\"typescript-3.5.3\").JsxFragment);\n                return;\n            case ts.SyntaxKind.JsxText:\n                createJsxText(node as import(\"typescript-3.5.3\").JsxText);\n                return;\n            case ts.SyntaxKind.JsxOpeningFragment:\n                createJsxOpeningFragment(node as import(\"typescript-3.5.3\").JsxOpeningFragment);\n                return;\n            case ts.SyntaxKind.JsxClosingFragment:\n                createJsxJsxClosingFragment(node as import(\"typescript-3.5.3\").JsxClosingFragment);\n                return;\n            case ts.SyntaxKind.JsxAttribute:\n                createJsxAttribute(node as import(\"typescript-3.5.3\").JsxAttribute);\n                return;\n            case ts.SyntaxKind.JsxAttributes:\n                createJsxAttributes(node as import(\"typescript-3.5.3\").JsxAttributes);\n                return;\n            case ts.SyntaxKind.JsxSpreadAttribute:\n                createJsxSpreadAttribute(node as import(\"typescript-3.5.3\").JsxSpreadAttribute);\n                return;\n            case ts.SyntaxKind.JsxExpression:\n                createJsxExpression(node as import(\"typescript-3.5.3\").JsxExpression);\n                return;\n            case ts.SyntaxKind.CaseClause:\n                createCaseClause(node as import(\"typescript-3.5.3\").CaseClause);\n                return;\n            case ts.SyntaxKind.DefaultClause:\n                createDefaultClause(node as import(\"typescript-3.5.3\").DefaultClause);\n                return;\n            case ts.SyntaxKind.HeritageClause:\n                createHeritageClause(node as import(\"typescript-3.5.3\").HeritageClause);\n                return;\n            case ts.SyntaxKind.CatchClause:\n                createCatchClause(node as import(\"typescript-3.5.3\").CatchClause);\n                return;\n            case ts.SyntaxKind.PropertyAssignment:\n                createPropertyAssignment(node as import(\"typescript-3.5.3\").PropertyAssignment);\n                return;\n            case ts.SyntaxKind.ShorthandPropertyAssignment:\n                createShorthandPropertyAssignment(node as import(\"typescript-3.5.3\").ShorthandPropertyAssignment);\n                return;\n            case ts.SyntaxKind.SpreadAssignment:\n                createSpreadAssignment(node as import(\"typescript-3.5.3\").SpreadAssignment);\n                return;\n            case ts.SyntaxKind.EnumMember:\n                createEnumMember(node as import(\"typescript-3.5.3\").EnumMember);\n                return;\n            case ts.SyntaxKind.CommaListExpression:\n                createCommaList(node as import(\"typescript-3.5.3\").CommaListExpression);\n                return;\n            default:\n                if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {\n                    writer.write(\"ts.createToken(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n                    return;\n                }\n                writer.write(\"/* Unhandled node kind: \").write(syntaxKindToName[node.kind]).write(\" */\")\n        }\n    }\n\n    function writeNodeTextForTypeNode(node: import(\"typescript-3.5.3\").TypeNode) {\n        if (node.kind >= ts.SyntaxKind.FirstKeyword && node.kind <= ts.SyntaxKind.LastKeyword) {\n            writer.write(\"ts.createKeywordTypeNode(ts.SyntaxKind.\").write(syntaxKindToName[node.kind]).write(\")\");\n        }\n        else {\n            writeNodeText(node);\n        }\n    }\n\n    function createNumericLiteral(node: import(\"typescript-3.5.3\").NumericLiteral) {\n        writer.write(\"ts.createNumericLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createBigIntLiteral(node: import(\"typescript-3.5.3\").BigIntLiteral) {\n        writer.write(\"ts.createBigIntLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createStringLiteral(node: import(\"typescript-3.5.3\").StringLiteral) {\n        writer.write(\"ts.createStringLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createRegularExpressionLiteral(node: import(\"typescript-3.5.3\").RegularExpressionLiteral) {\n        writer.write(\"ts.createRegularExpressionLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createIdentifier(node: import(\"typescript-3.5.3\").Identifier) {\n        writer.write(\"ts.createIdentifier(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createSuper(node: import(\"typescript-3.5.3\").SuperExpression) {\n        writer.write(\"ts.createSuper(\");\n        writer.write(\")\");\n    }\n\n    function createThis(node: import(\"typescript-3.5.3\").ThisExpression) {\n        writer.write(\"ts.createThis(\");\n        writer.write(\")\");\n    }\n\n    function createNull(node: import(\"typescript-3.5.3\").NullLiteral) {\n        writer.write(\"ts.createNull(\");\n        writer.write(\")\");\n    }\n\n    function createTrue(node: import(\"typescript-3.5.3\").BooleanLiteral) {\n        writer.write(\"ts.createTrue(\");\n        writer.write(\")\");\n    }\n\n    function createFalse(node: import(\"typescript-3.5.3\").BooleanLiteral) {\n        writer.write(\"ts.createFalse(\");\n        writer.write(\")\");\n    }\n\n    function createQualifiedName(node: import(\"typescript-3.5.3\").QualifiedName) {\n        writer.write(\"ts.createQualifiedName(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createComputedPropertyName(node: import(\"typescript-3.5.3\").ComputedPropertyName) {\n        writer.write(\"ts.createComputedPropertyName(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeParameterDeclaration(node: import(\"typescript-3.5.3\").TypeParameterDeclaration) {\n        writer.write(\"ts.createTypeParameterDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.constraint == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.constraint)\n            }\n            writer.write(\",\").newLine();\n            if (node.default == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.default)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParameter(node: import(\"typescript-3.5.3\").ParameterDeclaration) {\n        writer.write(\"ts.createParameter(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDecorator(node: import(\"typescript-3.5.3\").Decorator) {\n        writer.write(\"ts.createDecorator(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPropertySignature(node: import(\"typescript-3.5.3\").PropertySignature) {\n        writer.write(\"ts.createPropertySignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createProperty(node: import(\"typescript-3.5.3\").PropertyDeclaration) {\n        writer.write(\"ts.createProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.QuestionToken)\");\n            else if (node.exclamationToken != null)\n                writer.write(\"ts.createToken(ts.SyntaxKind.ExclamationToken)\");\n            else\n                writer.write(\"undefined\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethodSignature(node: import(\"typescript-3.5.3\").MethodSignature) {\n        writer.write(\"ts.createMethodSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createMethod(node: import(\"typescript-3.5.3\").MethodDeclaration) {\n        writer.write(\"ts.createMethod(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructor(node: import(\"typescript-3.5.3\").ConstructorDeclaration) {\n        writer.write(\"ts.createConstructor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createGetAccessor(node: import(\"typescript-3.5.3\").GetAccessorDeclaration) {\n        writer.write(\"ts.createGetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSetAccessor(node: import(\"typescript-3.5.3\").SetAccessorDeclaration) {\n        writer.write(\"ts.createSetAccessor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCallSignature(node: import(\"typescript-3.5.3\").CallSignatureDeclaration) {\n        writer.write(\"ts.createCallSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructSignature(node: import(\"typescript-3.5.3\").ConstructSignatureDeclaration) {\n        writer.write(\"ts.createConstructSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createIndexSignature(node: import(\"typescript-3.5.3\").IndexSignatureDeclaration) {\n        writer.write(\"ts.createIndexSignature(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createKeywordTypeNode(node: import(\"typescript-3.5.3\").KeywordTypeNode) {\n        writer.write(\"ts.createKeywordTypeNode(\");\n        writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.kind])\n        writer.write(\")\");\n    }\n\n    function createTypePredicateNode(node: import(\"typescript-3.5.3\").TypePredicateNode) {\n        writer.write(\"ts.createTypePredicateNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.parameterName)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeReferenceNode(node: import(\"typescript-3.5.3\").TypeReferenceNode) {\n        writer.write(\"ts.createTypeReferenceNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.typeName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionTypeNode(node: import(\"typescript-3.5.3\").FunctionTypeNode) {\n        writer.write(\"ts.createFunctionTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createConstructorTypeNode(node: import(\"typescript-3.5.3\").ConstructorTypeNode) {\n        writer.write(\"ts.createConstructorTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeQueryNode(node: import(\"typescript-3.5.3\").TypeQueryNode) {\n        writer.write(\"ts.createTypeQueryNode(\");\n        writeNodeText(node.exprName)\n        writer.write(\")\");\n    }\n\n    function createTypeLiteralNode(node: import(\"typescript-3.5.3\").TypeLiteralNode) {\n        writer.write(\"ts.createTypeLiteralNode(\");\n        writer.write(\"[\");\n        if (node.members.length === 1) {\n            const item = node.members![0];\n            writeNodeText(item)\n        }\n        else if (node.members.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.members!.length; i++) {\n                    const item = node.members![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayTypeNode(node: import(\"typescript-3.5.3\").ArrayTypeNode) {\n        writer.write(\"ts.createArrayTypeNode(\");\n        writeNodeTextForTypeNode(node.elementType)\n        writer.write(\")\");\n    }\n\n    function createTupleTypeNode(node: import(\"typescript-3.5.3\").TupleTypeNode) {\n        writer.write(\"ts.createTupleTypeNode(\");\n        writer.write(\"[\");\n        if (node.elementTypes.length === 1) {\n            const item = node.elementTypes![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.elementTypes.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elementTypes!.length; i++) {\n                    const item = node.elementTypes![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createOptionalTypeNode(node: import(\"typescript-3.5.3\").OptionalTypeNode) {\n        writer.write(\"ts.createOptionalTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createRestTypeNode(node: import(\"typescript-3.5.3\").RestTypeNode) {\n        writer.write(\"ts.createRestTypeNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createUnionTypeNode(node: import(\"typescript-3.5.3\").UnionTypeNode) {\n        writer.write(\"ts.createUnionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createIntersectionTypeNode(node: import(\"typescript-3.5.3\").IntersectionTypeNode) {\n        writer.write(\"ts.createIntersectionTypeNode(\");\n        writer.write(\"[\");\n        if (node.types.length === 1) {\n            const item = node.types![0];\n            writeNodeTextForTypeNode(item)\n        }\n        else if (node.types.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.types!.length; i++) {\n                    const item = node.types![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeTextForTypeNode(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createConditionalTypeNode(node: import(\"typescript-3.5.3\").ConditionalTypeNode) {\n        writer.write(\"ts.createConditionalTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.checkType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.extendsType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.trueType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.falseType)\n        });\n        writer.write(\")\");\n    }\n\n    function createInferTypeNode(node: import(\"typescript-3.5.3\").InferTypeNode) {\n        writer.write(\"ts.createInferTypeNode(\");\n        writeNodeText(node.typeParameter)\n        writer.write(\")\");\n    }\n\n    function createImportTypeNode(node: import(\"typescript-3.5.3\").ImportTypeNode) {\n        writer.write(\"ts.createImportTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.argument)\n            writer.write(\",\").newLine();\n            if (node.qualifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.qualifier)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isTypeOf == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isTypeOf.toString())\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createParenthesizedType(node: import(\"typescript-3.5.3\").ParenthesizedTypeNode) {\n        writer.write(\"ts.createParenthesizedType(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createThisTypeNode(node: import(\"typescript-3.5.3\").ThisTypeNode) {\n        writer.write(\"ts.createThisTypeNode(\");\n        writer.write(\")\");\n    }\n\n    function createTypeOperatorNode(node: import(\"typescript-3.5.3\").TypeOperatorNode) {\n        writer.write(\"ts.createTypeOperatorNode(\");\n        writeNodeTextForTypeNode(node.type)\n        writer.write(\")\");\n    }\n\n    function createIndexedAccessTypeNode(node: import(\"typescript-3.5.3\").IndexedAccessTypeNode) {\n        writer.write(\"ts.createIndexedAccessTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.objectType)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.indexType)\n        });\n        writer.write(\")\");\n    }\n\n    function createMappedTypeNode(node: import(\"typescript-3.5.3\").MappedTypeNode) {\n        writer.write(\"ts.createMappedTypeNode(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.readonlyToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.readonlyToken)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.typeParameter)\n            writer.write(\",\").newLine();\n            if (node.questionToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.questionToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createLiteralTypeNode(node: import(\"typescript-3.5.3\").LiteralTypeNode) {\n        writer.write(\"ts.createLiteralTypeNode(\");\n        writeNodeText(node.literal)\n        writer.write(\")\");\n    }\n\n    function createObjectBindingPattern(node: import(\"typescript-3.5.3\").ObjectBindingPattern) {\n        writer.write(\"ts.createObjectBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createArrayBindingPattern(node: import(\"typescript-3.5.3\").ArrayBindingPattern) {\n        writer.write(\"ts.createArrayBindingPattern(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createBindingElement(node: import(\"typescript-3.5.3\").BindingElement) {\n        writer.write(\"ts.createBindingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createArrayLiteral(node: import(\"typescript-3.5.3\").ArrayLiteralExpression) {\n        writer.write(\"ts.createArrayLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.elements.length === 1) {\n                const item = node.elements![0];\n                writeNodeText(item)\n            }\n            else if (node.elements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.elements!.length; i++) {\n                        const item = node.elements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createObjectLiteral(node: import(\"typescript-3.5.3\").ObjectLiteralExpression) {\n        writer.write(\"ts.createObjectLiteral(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.properties.length === 1) {\n                const item = node.properties![0];\n                writeNodeText(item)\n            }\n            else if (node.properties.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.properties!.length; i++) {\n                        const item = node.properties![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAccess(node: import(\"typescript-3.5.3\").PropertyAccessExpression) {\n        writer.write(\"ts.createPropertyAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createElementAccess(node: import(\"typescript-3.5.3\").ElementAccessExpression) {\n        writer.write(\"ts.createElementAccess(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.argumentExpression)\n        });\n        writer.write(\")\");\n    }\n\n    function createCall(node: import(\"typescript-3.5.3\").CallExpression) {\n        writer.write(\"ts.createCall(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.arguments.length === 1) {\n                const item = node.arguments![0];\n                writeNodeText(item)\n            }\n            else if (node.arguments.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.arguments!.length; i++) {\n                        const item = node.arguments![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createNew(node: import(\"typescript-3.5.3\").NewExpression) {\n        writer.write(\"ts.createNew(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.arguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.arguments.length === 1) {\n                    const item = node.arguments![0];\n                    writeNodeText(item)\n                }\n                else if (node.arguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.arguments!.length; i++) {\n                            const item = node.arguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createTaggedTemplate(node: import(\"typescript-3.5.3\").TaggedTemplateExpression) {\n        writer.write(\"ts.createTaggedTemplate(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tag)\n            writer.write(\",\").newLine();\n            writeNodeText(node.template)\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAssertion(node: import(\"typescript-3.5.3\").TypeAssertion) {\n        writer.write(\"ts.createTypeAssertion(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeTextForTypeNode(node.type)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createParen(node: import(\"typescript-3.5.3\").ParenthesizedExpression) {\n        writer.write(\"ts.createParen(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createFunctionExpression(node: import(\"typescript-3.5.3\").FunctionExpression) {\n        writer.write(\"ts.createFunctionExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createArrowFunction(node: import(\"typescript-3.5.3\").ArrowFunction) {\n        writer.write(\"ts.createArrowFunction(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.equalsGreaterThanToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.body)\n        });\n        writer.write(\")\");\n    }\n\n    function createDelete(node: import(\"typescript-3.5.3\").DeleteExpression) {\n        writer.write(\"ts.createDelete(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createTypeOf(node: import(\"typescript-3.5.3\").TypeOfExpression) {\n        writer.write(\"ts.createTypeOf(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createVoid(node: import(\"typescript-3.5.3\").VoidExpression) {\n        writer.write(\"ts.createVoid(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createAwait(node: import(\"typescript-3.5.3\").AwaitExpression) {\n        writer.write(\"ts.createAwait(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createPrefix(node: import(\"typescript-3.5.3\").PrefixUnaryExpression) {\n        writer.write(\"ts.createPrefix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n            writer.write(\",\").newLine();\n            writeNodeText(node.operand)\n        });\n        writer.write(\")\");\n    }\n\n    function createPostfix(node: import(\"typescript-3.5.3\").PostfixUnaryExpression) {\n        writer.write(\"ts.createPostfix(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.operand)\n            writer.write(\",\").newLine();\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.operator])\n        });\n        writer.write(\")\");\n    }\n\n    function createBinary(node: import(\"typescript-3.5.3\").BinaryExpression) {\n        writer.write(\"ts.createBinary(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.left)\n            writer.write(\",\").newLine();\n            writeNodeText(node.operatorToken)\n            writer.write(\",\").newLine();\n            writeNodeText(node.right)\n        });\n        writer.write(\")\");\n    }\n\n    function createConditional(node: import(\"typescript-3.5.3\").ConditionalExpression) {\n        writer.write(\"ts.createConditional(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.condition)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenTrue)\n            writer.write(\",\").newLine();\n            writeNodeText(node.whenFalse)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateExpression(node: import(\"typescript-3.5.3\").TemplateExpression) {\n        writer.write(\"ts.createTemplateExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.head)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.templateSpans.length === 1) {\n                const item = node.templateSpans![0];\n                writeNodeText(item)\n            }\n            else if (node.templateSpans.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.templateSpans!.length; i++) {\n                        const item = node.templateSpans![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateHead(node: import(\"typescript-3.5.3\").TemplateHead) {\n        writer.write(\"ts.createTemplateHead(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createTemplateMiddle(node: import(\"typescript-3.5.3\").TemplateMiddle) {\n        writer.write(\"ts.createTemplateMiddle(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createTemplateTail(node: import(\"typescript-3.5.3\").TemplateTail) {\n        writer.write(\"ts.createTemplateTail(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createNoSubstitutionTemplateLiteral(node: import(\"typescript-3.5.3\").NoSubstitutionTemplateLiteral) {\n        writer.write(\"ts.createNoSubstitutionTemplateLiteral(\");\n        writer.quote(node.text.toString())\n        writer.write(\")\");\n    }\n\n    function createYield(node: import(\"typescript-3.5.3\").YieldExpression) {\n        writer.write(\"ts.createYield(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createSpread(node: import(\"typescript-3.5.3\").SpreadElement) {\n        writer.write(\"ts.createSpread(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createClassExpression(node: import(\"typescript-3.5.3\").ClassExpression) {\n        writer.write(\"ts.createClassExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createOmittedExpression(node: import(\"typescript-3.5.3\").OmittedExpression) {\n        writer.write(\"ts.createOmittedExpression(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionWithTypeArguments(node: import(\"typescript-3.5.3\").ExpressionWithTypeArguments) {\n        writer.write(\"ts.createExpressionWithTypeArguments(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createAsExpression(node: import(\"typescript-3.5.3\").AsExpression) {\n        writer.write(\"ts.createAsExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createNonNullExpression(node: import(\"typescript-3.5.3\").NonNullExpression) {\n        writer.write(\"ts.createNonNullExpression(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createMetaProperty(node: import(\"typescript-3.5.3\").MetaProperty) {\n        writer.write(\"ts.createMetaProperty(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.keywordToken])\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createTemplateSpan(node: import(\"typescript-3.5.3\").TemplateSpan) {\n        writer.write(\"ts.createTemplateSpan(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.literal)\n        });\n        writer.write(\")\");\n    }\n\n    function createSemicolonClassElement(node: import(\"typescript-3.5.3\").SemicolonClassElement) {\n        writer.write(\"ts.createSemicolonClassElement(\");\n        writer.write(\")\");\n    }\n\n    function createBlock(node: import(\"typescript-3.5.3\").Block) {\n        writer.write(\"ts.createBlock(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(((node as any).multiLine || false).toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableStatement(node: import(\"typescript-3.5.3\").VariableStatement) {\n        writer.write(\"ts.createVariableStatement(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.declarationList)\n        });\n        writer.write(\")\");\n    }\n\n    function createEmptyStatement(node: import(\"typescript-3.5.3\").EmptyStatement) {\n        writer.write(\"ts.createEmptyStatement(\");\n        writer.write(\")\");\n    }\n\n    function createExpressionStatement(node: import(\"typescript-3.5.3\").ExpressionStatement) {\n        writer.write(\"ts.createExpressionStatement(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createIf(node: import(\"typescript-3.5.3\").IfStatement) {\n        writer.write(\"ts.createIf(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.thenStatement)\n            writer.write(\",\").newLine();\n            if (node.elseStatement == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.elseStatement)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDo(node: import(\"typescript-3.5.3\").DoStatement) {\n        writer.write(\"ts.createDo(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.statement)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createWhile(node: import(\"typescript-3.5.3\").WhileStatement) {\n        writer.write(\"ts.createWhile(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createFor(node: import(\"typescript-3.5.3\").ForStatement) {\n        writer.write(\"ts.createFor(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n            writer.write(\",\").newLine();\n            if (node.condition == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.condition)\n            }\n            writer.write(\",\").newLine();\n            if (node.incrementor == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.incrementor)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForIn(node: import(\"typescript-3.5.3\").ForInStatement) {\n        writer.write(\"ts.createForIn(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createForOf(node: import(\"typescript-3.5.3\").ForOfStatement) {\n        writer.write(\"ts.createForOf(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.awaitModifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.awaitModifier)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createContinue(node: import(\"typescript-3.5.3\").ContinueStatement) {\n        writer.write(\"ts.createContinue(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createBreak(node: import(\"typescript-3.5.3\").BreakStatement) {\n        writer.write(\"ts.createBreak(\");\n        if (node.label == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.label)\n        }\n        writer.write(\")\");\n    }\n\n    function createReturn(node: import(\"typescript-3.5.3\").ReturnStatement) {\n        writer.write(\"ts.createReturn(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createWith(node: import(\"typescript-3.5.3\").WithStatement) {\n        writer.write(\"ts.createWith(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createSwitch(node: import(\"typescript-3.5.3\").SwitchStatement) {\n        writer.write(\"ts.createSwitch(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writeNodeText(node.caseBlock)\n        });\n        writer.write(\")\");\n    }\n\n    function createLabel(node: import(\"typescript-3.5.3\").LabeledStatement) {\n        writer.write(\"ts.createLabel(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.label)\n            writer.write(\",\").newLine();\n            writeNodeText(node.statement)\n        });\n        writer.write(\")\");\n    }\n\n    function createThrow(node: import(\"typescript-3.5.3\").ThrowStatement) {\n        writer.write(\"ts.createThrow(\");\n        if (node.expression == null)\n            writer.write(\"undefined\");\n        else {\n            writeNodeText(node.expression)\n        }\n        writer.write(\")\");\n    }\n\n    function createTry(node: import(\"typescript-3.5.3\").TryStatement) {\n        writer.write(\"ts.createTry(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tryBlock)\n            writer.write(\",\").newLine();\n            if (node.catchClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.catchClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.finallyBlock == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.finallyBlock)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createDebuggerStatement(node: import(\"typescript-3.5.3\").DebuggerStatement) {\n        writer.write(\"ts.createDebuggerStatement(\");\n        writer.write(\")\");\n    }\n\n    function createVariableDeclaration(node: import(\"typescript-3.5.3\").VariableDeclaration) {\n        writer.write(\"ts.createVariableDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createVariableDeclarationList(node: import(\"typescript-3.5.3\").VariableDeclarationList) {\n        writer.write(\"ts.createVariableDeclarationList(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"[\");\n            if (node.declarations.length === 1) {\n                const item = node.declarations![0];\n                writeNodeText(item)\n            }\n            else if (node.declarations.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.declarations!.length; i++) {\n                        const item = node.declarations![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createFunctionDeclaration(node: import(\"typescript-3.5.3\").FunctionDeclaration) {\n        writer.write(\"ts.createFunctionDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.asteriskToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.asteriskToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.parameters.length === 1) {\n                const item = node.parameters![0];\n                writeNodeText(item)\n            }\n            else if (node.parameters.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.parameters!.length; i++) {\n                        const item = node.parameters![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            if (node.type == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeTextForTypeNode(node.type)\n            }\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createClassDeclaration(node: import(\"typescript-3.5.3\").ClassDeclaration) {\n        writer.write(\"ts.createClassDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createInterfaceDeclaration(node: import(\"typescript-3.5.3\").InterfaceDeclaration) {\n        writer.write(\"ts.createInterfaceDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.heritageClauses == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.heritageClauses.length === 1) {\n                    const item = node.heritageClauses![0];\n                    writeNodeText(item)\n                }\n                else if (node.heritageClauses.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.heritageClauses!.length; i++) {\n                            const item = node.heritageClauses![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createTypeAliasDeclaration(node: import(\"typescript-3.5.3\").TypeAliasDeclaration) {\n        writer.write(\"ts.createTypeAliasDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.typeParameters == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeParameters.length === 1) {\n                    const item = node.typeParameters![0];\n                    writeNodeText(item)\n                }\n                else if (node.typeParameters.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeParameters!.length; i++) {\n                            const item = node.typeParameters![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeTextForTypeNode(node.type)\n        });\n        writer.write(\")\");\n    }\n\n    function createEnumDeclaration(node: import(\"typescript-3.5.3\").EnumDeclaration) {\n        writer.write(\"ts.createEnumDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.members.length === 1) {\n                const item = node.members![0];\n                writeNodeText(item)\n            }\n            else if (node.members.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.members!.length; i++) {\n                        const item = node.members![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleDeclaration(node: import(\"typescript-3.5.3\").ModuleDeclaration) {\n        writer.write(\"ts.createModuleDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.body == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.body)\n            }\n            writer.write(\",\").newLine();\n            writer.write(getNodeFlagValues(node.flags || 0));\n        });\n        writer.write(\")\");\n    }\n\n    function createModuleBlock(node: import(\"typescript-3.5.3\").ModuleBlock) {\n        writer.write(\"ts.createModuleBlock(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createCaseBlock(node: import(\"typescript-3.5.3\").CaseBlock) {\n        writer.write(\"ts.createCaseBlock(\");\n        writer.write(\"[\");\n        if (node.clauses.length === 1) {\n            const item = node.clauses![0];\n            writeNodeText(item)\n        }\n        else if (node.clauses.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.clauses!.length; i++) {\n                    const item = node.clauses![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createNamespaceExportDeclaration(node: import(\"typescript-3.5.3\").NamespaceExportDeclaration) {\n        writer.write(\"ts.createNamespaceExportDeclaration(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createImportEqualsDeclaration(node: import(\"typescript-3.5.3\").ImportEqualsDeclaration) {\n        writer.write(\"ts.createImportEqualsDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleReference)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportDeclaration(node: import(\"typescript-3.5.3\").ImportDeclaration) {\n        writer.write(\"ts.createImportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.importClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.importClause)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.moduleSpecifier)\n        });\n        writer.write(\")\");\n    }\n\n    function createImportClause(node: import(\"typescript-3.5.3\").ImportClause) {\n        writer.write(\"ts.createImportClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.name == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.name)\n            }\n            writer.write(\",\").newLine();\n            if (node.namedBindings == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.namedBindings)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamespaceImport(node: import(\"typescript-3.5.3\").NamespaceImport) {\n        writer.write(\"ts.createNamespaceImport(\");\n        writeNodeText(node.name)\n        writer.write(\")\");\n    }\n\n    function createNamedImports(node: import(\"typescript-3.5.3\").NamedImports) {\n        writer.write(\"ts.createNamedImports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createImportSpecifier(node: import(\"typescript-3.5.3\").ImportSpecifier) {\n        writer.write(\"ts.createImportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportAssignment(node: import(\"typescript-3.5.3\").ExportAssignment) {\n        writer.write(\"ts.createExportAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.isExportEquals == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(node.isExportEquals.toString())\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.expression)\n        });\n        writer.write(\")\");\n    }\n\n    function createExportDeclaration(node: import(\"typescript-3.5.3\").ExportDeclaration) {\n        writer.write(\"ts.createExportDeclaration(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.decorators == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.decorators.length === 1) {\n                    const item = node.decorators![0];\n                    writeNodeText(item)\n                }\n                else if (node.decorators.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.decorators!.length; i++) {\n                            const item = node.decorators![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeText(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.modifiers == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.modifiers.length === 1) {\n                    const item = node.modifiers![0];\n                    writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                }\n                else if (node.modifiers.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.modifiers!.length; i++) {\n                            const item = node.modifiers![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writer.write(\"ts.createModifier(ts.SyntaxKind.\" + syntaxKindToName[item.kind] + \")\");\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            if (node.exportClause == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.exportClause)\n            }\n            writer.write(\",\").newLine();\n            if (node.moduleSpecifier == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.moduleSpecifier)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createNamedExports(node: import(\"typescript-3.5.3\").NamedExports) {\n        writer.write(\"ts.createNamedExports(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createExportSpecifier(node: import(\"typescript-3.5.3\").ExportSpecifier) {\n        writer.write(\"ts.createExportSpecifier(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.propertyName == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.propertyName)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.name)\n        });\n        writer.write(\")\");\n    }\n\n    function createExternalModuleReference(node: import(\"typescript-3.5.3\").ExternalModuleReference) {\n        writer.write(\"ts.createExternalModuleReference(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxElement(node: import(\"typescript-3.5.3\").JsxElement) {\n        writer.write(\"ts.createJsxElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingElement)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingElement)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxSelfClosingElement(node: import(\"typescript-3.5.3\").JsxSelfClosingElement) {\n        writer.write(\"ts.createJsxSelfClosingElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningElement(node: import(\"typescript-3.5.3\").JsxOpeningElement) {\n        writer.write(\"ts.createJsxOpeningElement(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.tagName)\n            writer.write(\",\").newLine();\n            if (node.typeArguments == null)\n                writer.write(\"undefined\");\n            else {\n                writer.write(\"[\");\n                if (node.typeArguments.length === 1) {\n                    const item = node.typeArguments![0];\n                    writeNodeTextForTypeNode(item)\n                }\n                else if (node.typeArguments.length > 1) {\n                    writer.indent(() => {\n                        for (let i = 0; i < node.typeArguments!.length; i++) {\n                            const item = node.typeArguments![i];\n                            if (i > 0)\n                                writer.write(\",\").newLine();\n                            writeNodeTextForTypeNode(item)\n                        }\n                    });\n                }\n                writer.write(\"]\");\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.attributes)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxClosingElement(node: import(\"typescript-3.5.3\").JsxClosingElement) {\n        writer.write(\"ts.createJsxClosingElement(\");\n        writeNodeText(node.tagName)\n        writer.write(\")\");\n    }\n\n    function createJsxFragment(node: import(\"typescript-3.5.3\").JsxFragment) {\n        writer.write(\"ts.createJsxFragment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.openingFragment)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.children.length === 1) {\n                const item = node.children![0];\n                writeNodeText(item)\n            }\n            else if (node.children.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.children!.length; i++) {\n                        const item = node.children![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n            writer.write(\",\").newLine();\n            writeNodeText(node.closingFragment)\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxText(node: import(\"typescript-3.5.3\").JsxText) {\n        writer.write(\"ts.createJsxText(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.quote(node.text.toString())\n            writer.write(\",\").newLine();\n            writer.write(node.containsOnlyTriviaWhiteSpaces.toString())\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxOpeningFragment(node: import(\"typescript-3.5.3\").JsxOpeningFragment) {\n        writer.write(\"ts.createJsxOpeningFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxJsxClosingFragment(node: import(\"typescript-3.5.3\").JsxClosingFragment) {\n        writer.write(\"ts.createJsxJsxClosingFragment(\");\n        writer.write(\")\");\n    }\n\n    function createJsxAttribute(node: import(\"typescript-3.5.3\").JsxAttribute) {\n        writer.write(\"ts.createJsxAttribute(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createJsxAttributes(node: import(\"typescript-3.5.3\").JsxAttributes) {\n        writer.write(\"ts.createJsxAttributes(\");\n        writer.write(\"[\");\n        if (node.properties.length === 1) {\n            const item = node.properties![0];\n            writeNodeText(item)\n        }\n        else if (node.properties.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.properties!.length; i++) {\n                    const item = node.properties![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createJsxSpreadAttribute(node: import(\"typescript-3.5.3\").JsxSpreadAttribute) {\n        writer.write(\"ts.createJsxSpreadAttribute(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createJsxExpression(node: import(\"typescript-3.5.3\").JsxExpression) {\n        writer.write(\"ts.createJsxExpression(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.dotDotDotToken == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.dotDotDotToken)\n            }\n            writer.write(\",\").newLine();\n            if (node.expression == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.expression)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCaseClause(node: import(\"typescript-3.5.3\").CaseClause) {\n        writer.write(\"ts.createCaseClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.expression)\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.statements.length === 1) {\n                const item = node.statements![0];\n                writeNodeText(item)\n            }\n            else if (node.statements.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.statements!.length; i++) {\n                        const item = node.statements![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createDefaultClause(node: import(\"typescript-3.5.3\").DefaultClause) {\n        writer.write(\"ts.createDefaultClause(\");\n        writer.write(\"[\");\n        if (node.statements.length === 1) {\n            const item = node.statements![0];\n            writeNodeText(item)\n        }\n        else if (node.statements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.statements!.length; i++) {\n                    const item = node.statements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createHeritageClause(node: import(\"typescript-3.5.3\").HeritageClause) {\n        writer.write(\"ts.createHeritageClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            writer.write(\"ts.SyntaxKind.\").write(syntaxKindToName[node.token])\n            writer.write(\",\").newLine();\n            writer.write(\"[\");\n            if (node.types.length === 1) {\n                const item = node.types![0];\n                writeNodeText(item)\n            }\n            else if (node.types.length > 1) {\n                writer.indent(() => {\n                    for (let i = 0; i < node.types!.length; i++) {\n                        const item = node.types![i];\n                        if (i > 0)\n                            writer.write(\",\").newLine();\n                        writeNodeText(item)\n                    }\n                });\n            }\n            writer.write(\"]\");\n        });\n        writer.write(\")\");\n    }\n\n    function createCatchClause(node: import(\"typescript-3.5.3\").CatchClause) {\n        writer.write(\"ts.createCatchClause(\");\n        writer.newLine();\n        writer.indent(() => {\n            if (node.variableDeclaration == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.variableDeclaration)\n            }\n            writer.write(\",\").newLine();\n            writeNodeText(node.block)\n        });\n        writer.write(\")\");\n    }\n\n    function createPropertyAssignment(node: import(\"typescript-3.5.3\").PropertyAssignment) {\n        writer.write(\"ts.createPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            writeNodeText(node.initializer)\n        });\n        writer.write(\")\");\n    }\n\n    function createShorthandPropertyAssignment(node: import(\"typescript-3.5.3\").ShorthandPropertyAssignment) {\n        writer.write(\"ts.createShorthandPropertyAssignment(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.objectAssignmentInitializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.objectAssignmentInitializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createSpreadAssignment(node: import(\"typescript-3.5.3\").SpreadAssignment) {\n        writer.write(\"ts.createSpreadAssignment(\");\n        writeNodeText(node.expression)\n        writer.write(\")\");\n    }\n\n    function createEnumMember(node: import(\"typescript-3.5.3\").EnumMember) {\n        writer.write(\"ts.createEnumMember(\");\n        writer.newLine();\n        writer.indent(() => {\n            writeNodeText(node.name)\n            writer.write(\",\").newLine();\n            if (node.initializer == null)\n                writer.write(\"undefined\");\n            else {\n                writeNodeText(node.initializer)\n            }\n        });\n        writer.write(\")\");\n    }\n\n    function createCommaList(node: import(\"typescript-3.5.3\").CommaListExpression) {\n        writer.write(\"ts.createCommaList(\");\n        writer.write(\"[\");\n        if (node.elements.length === 1) {\n            const item = node.elements![0];\n            writeNodeText(item)\n        }\n        else if (node.elements.length > 1) {\n            writer.indent(() => {\n                for (let i = 0; i < node.elements!.length; i++) {\n                    const item = node.elements![i];\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    writeNodeText(item)\n                }\n            });\n        }\n        writer.write(\"]\");\n        writer.write(\")\");\n    }\n\n    function createSyntaxKindToNameMap() {\n        const map: { [kind: number]: string } = {};\n        for (const name of Object.keys(ts.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n            const value = (ts.SyntaxKind as any)[name] as number;\n            if (map[value] == null)\n                map[value] = name;\n        }\n        return map;\n    }\n\n    function getNodeFlagValues(value: number) {\n        // ignore the BlockScoped node flag\n        return getFlagValuesAsString(ts.NodeFlags, \"ts.NodeFlags\", value || 0, \"None\", getFlagValues(ts.NodeFlags, value).filter(v => v !== ts.NodeFlags.BlockScoped));\n    }\n\n    function getFlagValuesAsString(enumObj: any, enumName: string, value: number, defaultName: string, flagValues?: number[]) {\n        flagValues = flagValues || getFlagValues(enumObj, value);\n        const members: string[] = [];\n        for (const flagValue of flagValues)\n            members.push(enumName + \".\" + enumObj[flagValue]);\n        if (members.length === 0)\n            members.push(enumName + \".\" + defaultName);\n        return members.join(\" | \");\n    }\n\n    function getFlagValues(enumObj: any, value: number) {\n        const members: number[] = [];\n        for (const prop in enumObj) {\n            if (typeof enumObj[prop] === \"string\")\n                continue;\n            if ((enumObj[prop] & value) !== 0)\n                members.push(enumObj[prop]);\n        }\n        return members;\n    }\n}\n"],"sourceRoot":""}